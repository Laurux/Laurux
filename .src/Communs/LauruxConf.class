' Gambas class file

'----------------------------------------------------------------------------
'

'
'Ce programme est un logiciel libre; Vous pouvez le redistribuer et/ou
'le modifier selon les termes de la GNU General PUBLIC License publiés par
'la Free Software Foundation.

'Ce programme est distribué sans garantie. Voyez la GNU General PUBLIC
'License pour plus de details.

'Vous devez lire la GNU General PUBLIC Licence.
'Si vous ne disposez pas d'un exemplaire, veuillez écrire
'à " The Free Software Foundation
'INC, 59 Temple place - Suite 33, Boston
'MA 02111-1307 USA
'----------------------------------------------------------------------------
'################################################
'# nom du fichier           : LauruxConf.class
'# Auteur                   : Jacky Tripoteau
'# date de création         : 01/11/2004
'# Gestion du fichier de configuration
'################################################
'#######################################################
'# Modification Marc GUILLAUME <alarch@alarch.ath.cx>
'# pour utilisation d'un tunnel ssh de connexion MySQL
'# 07 janvier 2010
'########################################################
'
Private Soc As String
Private intitule As String
Private son As Integer = Start.Son
Private Lig As String
Private rResult As Result
Private Nouveau As Boolean = False

Public Sub _new()

  Dim ssh As String
  Dim elements As Variant
  Dim Lig2 As String[]
  Dim bBase As Boolean = False

  Utils.Observers(Me)
  Me.Center
  Nbase.Clear
  ComboBox1.Text = Start.LocalSettings["/dbase/type"]
  ComboBox1_Click()
  FileChooser1.Filter = ["*.sqlite", "SQlite Database File"]
  If Start.LocalSettings["/Soc" & Start.Societe & "/Prefixe"] Then
    TextLabel2.visible = True
    Prefixe.visible = True
    Prefixe.Text = Start.LocalSettings["/dbase/Prefixe"]
  Endif
  If Start.LocalSettings["/Soc" & Start.Societe & "/Blocsoc"] = False Or If IsNull(Start.LocalSettings["/Soc" & Start.Societe & "/Blocsoc"]) Then
    For Each elements In Utils.db.Databases
      Lig = elements.name
      If Start.LocalSettings["/Soc" & Start.Societe & "/Prefixe"] Then
        Lig2 = Split(Lig, "_")
        If lig2.Count = 2 Then
          If Left$(Lig2[1], 6) = "Laurux" Then
            bBase = True
          Else
            bBase = False
          Endif
        Else
          bBase = False
        Endif
      Else
        If Left$(Lig, 6) = "Laurux" And If Len(lig) > 6 Then
          bBase = True
        Else
          bBase = False
        Endif
      Endif
      If bBase Then
        If Start.LocalSettings["/Soc" & Start.Societe & "/Prefixe"] Then
          Nbase.Add(Lig)
        Else
          If Left$(Lig, 6) = "Laurux" Then
            If Len(lig) > 6 Then Nbase.Add(Lig)
          Endif
        Endif
      Endif
    Next
  Endif
  Nbase.text = Start.LocalSettings["/dbase/Prefixe"] & Start.LocalSettings["/dbase/Name"]
  'Nbase.text = "Laurux" & Start.LocalSettings["/Soc"]
  If IsNull(Nbase.Text) Then
    Nbase.Text = "Laurux01"
    'Nbase.Enabled = False
    Nouveau = True
    Maj.Value = True
  Endif
  'If Start.LocalSettings["/Soc" & Start.Societe & "/Prefixe"] Then
  'TextLabel2.Visible = True
  'Prefixe.Visible = True
  'Prefixe.text = Start.LocalSettings["/dbase/Prefixe"]
  'Else
  'Prefixe.clear
  ' Endif
  If Start.LocalSettings["/Soc" & Start.Societe & "/Blocsoc"] = True Then Nbase.Enabled = False
  Try login.Text = Start.LocalSettings["/dbase/Login"]
  Try Port.Text = Start.LocalSettings["/dbase/Port"]
  If IsNull(Port.text) Then Port.text = "3306"
  If ComboBox1.Text = "mysql"
    Try Host.Text = Start.LocalSettings["/dbase/Host"]
  Else
    Try FileChooser1.Root = Start.LocalSettings["/dbase/Host"]
  Endif
  If Start.LocalSettings["/Soc" & Start.Societe & "/Blocsoc"] = False Or If IsNull(Start.LocalSettings["/Soc" & Start.Societe & "/Blocsoc"]) Then
    Try Maj.Value = Start.LocalSettings["/dbase/Maj"]
    Maj.Enabled = True
  Else
    Try Maj.Value = False
    Maj.Enabled = False
  Endif
  If IsNull(Host.Text) Then Host.Text = "localhost"
  Try Password.Text = hexdblKey.crypt("de", Start.LocalSettings["/dbase/Password"], "Laurux")
  Try ssh = Start.LocalSettings["/dbase/Con-ssh"]
  If ssh = "" Then ssh = 0
  If ssh <> 0 Then
    Bssh.value = True
    Bssh_Click()
    Loginssh.Text = Start.LocalSettings["/dbase/ssh/Login"]
    Hostssh.Text = Start.LocalSettings["/dbase/ssh/Hostssh"]
    Passwordssh.Text = hexdblKey.crypt("de", Start.LocalSettings["/dbase/ssh/Passwssh"], "LauruX2012")
    Portssh.Text = Start.LocalSettings["/dbase/ssh/Portssh"]
    Portlocal.Text = Start.LocalSettings["/dbase/ssh/Portlocal"]
    Passphrase.Text = Start.LocalSettings["/dbase/ssh/Passphrase"]
    Try Passp.value = Start.LocalSettings["/dbase/ssh/Passp"]
  Endif
Catch
  Nbase.text = Start.LocalSettings["/dbase/Prefixe"] & Start.LocalSettings["/dbase/Name"]
  If IsNull(Nbase.Text) Then Nbase.Text = "Laurux01"
  Try login.Text = Start.LocalSettings["/dbase/Login"]
  Try Port.Text = Start.LocalSettings["/dbase/Port"]
  If IsNull(Port.text) Then Port.text = "3306"
  If ComboBox1.Text = "mysql"
    Try Host.Text = Start.LocalSettings["/dbase/Host"]
  Else
    Try FileChooser1.Root = Start.LocalSettings["/dbase/Host"]
  Endif
  
  If Start.LocalSettings["/Soc" & Start.Societe & "/Blocsoc"] = False Or If IsNull(Start.LocalSettings["/Soc" & Start.Societe & "/Blocsoc"]) Then
    Try Maj.Value = Start.LocalSettings["/dbase/Maj"]
    Maj.Enabled = True
  Else
    Try Maj.Value = False
    Maj.Enabled = False
  Endif
  If IsNull(Host.Text) Then Host.Text = "localhost"
  Try Password.Text = hexdblKey.crypt("de", Start.LocalSettings["/dbase/Password"], "Laurux")
  Try ssh = Start.LocalSettings["/dbase/Con-ssh"]
  If ssh = "" Then ssh = 0
  If ssh <> 0 Then
    Bssh.value = True
    Bssh_Click()
    Loginssh.Text = Start.LocalSettings["/dbase/ssh/Login"]
    Hostssh.Text = Start.LocalSettings["/dbase/ssh/Hostssh"]
    Passwordssh.Text = hexdblKey.crypt("de", Start.LocalSettings["/dbase/ssh/Passwssh"], "LauruX2012")
    Portssh.Text = Start.LocalSettings["/dbase/ssh/Portssh"]
    Portlocal.Text = Start.LocalSettings["/dbase/ssh/Portlocal"]
    Passphrase.Text = Start.LocalSettings["/dbase/ssh/Passphrase"]
    Try Passp.value = Start.LocalSettings["/dbase/ssh/Passp"]
  Endif
  Nouveau = True
  Maj.Value = True

End

'***********************************************************
'* La connexion se fait sans mot de passe, la clé publique
'* de l'utilisateur doit se trouver sur le serveur SQL
'* contacté en SSH
'* MG - 07 janvier 2010
'***********************************************************
Public Sub Button1_Click()

  Dim $ready_connect As Boolean
  Dim data As Table

  $ready_connect = True
  Soc = Start.LocalSettings["/Soc"]
  If IsNull(Soc) Then Soc = "01"
  intitule = "  "
  Start.LocalSettings["/Societes/Soc" & Soc] = Majversion.Version
  '# -- Partie commune aux connexions avec ou sans tunnel
  Start.LocalSettings["/dbase/type"] = ComboBox1.Text
  Start.LocalSettings["/dbase/Prefixe"] = Prefixe.Text
  Start.LocalSettings["/dbase/Login"] = login.Text
  Start.LocalSettings["/dbase/Password"] = hexdblKey.crypt("en", Password.Text, "Laurux")
  Start.LocalSettings["/dbase/Port"] = Port.Text
  If Start.LocalSettings["/dbase/type"] = "mysql"
    Start.LocalSettings["/dbase/Host"] = Host.Text
    Start.LocalSettings["/dbase/Name"] = Nbase.Text
  Else 'sqlite3
    Start.LocalSettings["/dbase/Host"] = File.Dir(FileChooser1.SelectedPath)
    Start.LocalSettings["/dbase/Name"] = File.BaseName(FileChooser1.SelectedPath)
  Endif
  Start.LocalSettings["/dbase/Maj"] = Maj.Value

  '# -- Partie variant suivant que l'on utilise un tunnel ssh ou pas
  Start.LocalSettings["/dbase/ssh/Con-ssh"] = Bssh.Value
  If Bssh.value Then
    Start.LocalSettings["/dbase/ssh/Login"] = Loginssh.Text
    Start.LocalSettings["/dbase/ssh/Hostssh"] = Hostssh.Text
    Start.LocalSettings["/dbase/ssh/Passwssh"] = hexdblKey.crypt("en", Passwordssh.Text, "LauruX2012")
    Start.LocalSettings["/dbase/ssh/Portssh"] = Portssh.Text
    Start.LocalSettings["/dbase/ssh/Portlocal"] = Portlocal.Text
    Start.LocalSettings["/dbase/ssh/Passphrase"] = Passphrase.Text
    Start.LocalSettings["/dbase/ssh/Passp"] = Passp.value
  Endif
  Start.LocalSettings.Save
  Start.LocalSettings.Reload
  '# -- valeurs de connexion communes avec ou sans tunnel
  ' Le type reste bien entendu mysql
  Utils.db.type = Start.LocalSettings["/dbase/type"]
  ' le nom est celui de la base
  Utils.db.Name = Start.LocalSettings["/dbase/Name"]
  ' le login est celui de la base
  Utils.db.Login = Start.LocalSettings["/dbase/Login"]
  ' le mot de passe est celui de la base
  Utils.db.Password = hexdblKey.crypt("de", Start.LocalSettings["/dbase/Password"], "Laurux")

  '*************************************
  '* On initialise les variables
  '* ainsi les routines de connexion
  '* restent inchangées
  '* Il suffira juste de lancer le tunnel
  '* ssh ou pas
  '*************************************
  If Bssh.Value Then
    '# -- Valeurs de connexion via tunnel
    ' par contre on utilise le port local de loopback pour la connexion (et pas localhost qui impliquerait une connexion socket unix)
    Utils.db.Host = "127.0.0.1"
    ' Utils.db.Host = "localhost"
    ' on remplace le port mysql par le port local du tunnel ssh
    Utils.db.Port = Start.LocalSettings["/dbase/ssh/Portlocal"]
    ' on définit des variables pour l'établissement du tunnel ssh
    Utils.MysqlServeur = Start.LocalSettings["/dbase/Host"]
    Utils.RemotePort = Start.LocalSettings["/dbase/Port"]
    Utils.SshPort = Start.LocalSettings["/dbase/ssh/Portssh"]
    Utils.SshPassw = hexdblKey.crypt("de", Start.LocalSettings["/dbase/ssh/Passwssh"], "LauruX2012")
    Utils.SshHost = Start.LocalSettings["/dbase/ssh/Hostssh"]
    Utils.SshUser = Start.LocalSettings["/dbase/ssh/Login"]
    Utils.SshPassphrase = Start.LocalSettings["/dbase/ssh/Passphrase"]
  Else
    '# -- Valeurs de connexion sans tunnel
    ' l'hôte à utiliser est le serveur MySQL
    Utils.db.Host = Start.LocalSettings["/dbase/Host"]
    ' le port le port MySQL du serveur
    Utils.db.Port = Start.LocalSettings["/dbase/Port"]
  Endif
  Soc = Right$(Nbase.Text, 2)

  '# -- lancement si nécessaire du tunnel ssh
  If Bssh.Value Then
    If Utils.monteTunnel() Then
      $ready_connect = True
    Else
      $ready_connect = False
    Endif
  Endif

  If $ready_connect Then
    Try Utils.db.Close
    
    
    If Start.LocalSettings["/dbase/type"] = "mysql"
      Utils.db.name = Prefixe.Text & Nbase.Text
      Utils.db.Open
      Try Utils.db.exec("SET NAMES 'latin1'")
      If Not IsNull(Utils.db.Login) Then Shell "mysql -h " & Start.LocalSettings["/dbase/Host"] & " " & " -u " & Utils.db.Login & " -p" & Utils.db.Password & " -e \"use " & Utils.db.Name & ";" & "SET @@global.sql_mode= NO_ENGINE_SUBSTITUTION " & "; \"" Wait
    Else 'sqlite3
      Utils.db.Host = Start.LocalSettings["/dbase/Host"]
      Utils.db.Name = Utils.db.Name & ".sqlite"
      Utils.db.Open
      For Each data In Utils.db.Tables
        Print data.Name
      Next
      rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabSoc"))
    Endif
    If Not Error Then
      rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabSoc") & " where cd_sc = &1", Right$(Nbase.text, 2))
      Message.Info("Le fichier de configuration a été crée ou modifié !\nLa société " & Right$(Nbase.Text, 2) & " " & rResult!type_sc & " - " & rResult!int_sc & " est la société de travail en cours.")
      Start.LocalSettings["/Soc"] = Right$(Nbase.text, 2)
      Start.LocalSettings.Save
      Start.LocalSettings.Reload
      Start.societe = Right$(Nbase.text, 2)
      Fmenu.text = "Société en cours : " & rResult!type_sc & " - " & rResult!int_sc
      Fmenuc.text = "Société en cours : " & rResult!type_sc & " - " & rResult!int_sc
      Fmenuf.text = "Société en cours : " & rResult!type_sc & " - " & rResult!int_sc
    Else
      If Createbase(Nbase.text) Then Me.close
    Endif
  Else
    Message.Warning("Le tunnel SSH demandé ne peut être monté")
  Endif
Catch
  If Left$(error.Text, 35) = "Cannot open database: Access denied" Then
    Message.Warning("Attention, l' utilisateur ou le mot de passe est erroné ! \n Veuillez controler votre saisie SVP et vérifier que l'utisateur soit bien créé dans MySQL!")
  Else
    If Left$(error.Text, 38) = "Cannot open database: Unknown database" Then
      If Createbase(Nbase.text) Then Me.close
    Else
      If Left$(error.Text, 35) = "Cannot open database: Can't connect" Then
        Message.Warning("Attention, accès MySQL impossible ! \n Veuillez vérifier que MySQL soit bien installé et que le service soit lancé SVP !")
      Else
        message.Error(Error.Text & " " & Error.Where)
      Endif
    Endif
  Endif

End

Public Sub Createbase(Base As String, Optional AsCurrent As Boolean = True) As Boolean

  Dim hcon As New Connection
  Dim sTemp As String
  Dim Soc As String = Right$(Base, 2)
  Dim Tab As String
  Dim $ipr As New Integer[]

  If son Then
    Music.Play
  Endif
  If message.Question("Le programme va créer la base " & Base & ".", "Oui", "Non") = 1 Then
    Me.mouse = Mouse.wait
    Try Utils.db.Close

    hcon.type = "mysql"
    hcon.Name = ""
    hcon.Login = Login.Text
    hcon.Password = Password.Text
    hcon.Host = Host.Text
    hcon.Port = Port.Text
    Try hcon.open
    If Error Then Print Error.Text
    hcon.Databases.Add(Base)
    hcon.Close
    Start.LocalSettings["/dbase/Con-ssh"] = Bssh.Value
    If AsCurrent Then Start.LocalSettings["/Soc"] = Soc
    Start.LocalSettings["/intitule"] = intitule
    Start.LocalSettings["/son"] = 0
    Start.LocalSettings["/Tips"] = 1
    Start.LocalSettings["/Soc" & Soc & "/Entete"] = 1
    Start.LocalSettings["/Soc" & Soc & "/Conditions"] = 1
    Start.LocalSettings["/Soc" & Soc & "/Tva550"] = 0
    Start.LocalSettings["/Soc" & Soc & "/Codetva"] = " "
    Start.LocalSettings["/Soc" & Soc & "/Compta"] = 0
    Start.LocalSettings["/Soc" & Soc & "/Gestion"] = 0
    Start.LocalSettings["/Soc" & Soc & "/CptFac"] = 1
    Start.LocalSettings["/Soc" & Soc & "/Qt1"] = 0
    Start.LocalSettings["/Soc" & Soc & "/Coul_fen"] = 0
    Start.LocalSettings["/Soc" & Soc & "/Qt1"] = 0
    Start.LocalSettings["/Soc" & Soc & "/Ctrlstk"] = 0
    Start.LocalSettings["/Soc" & Soc & "/AutoEnt"] = 0
    Start.LocalSettings["/Coul" & "/Fnets"] = "Background: &HDDDDDD&; "
    Start.LocalSettings["/Coul" & "/Btns"] = "Background: &HBDBDBD&; "
    Start.LocalSettings["/Coul" & "/Znss"] = "Background: &HFAFAFA&; "
    Start.LocalSettings["/Coul" & "/Znaff"] = "Background: &HEEEEEE&; "
    Start.LocalSettings["/Coul" & "/Focus"] = "Background: &HF9FFC7&; "
    Start.LocalSettings["/Coul" & "/Coulfonds"] = "Background: &FFEE81&; "
    Start.LocalSettings["/Coul" & "/Others"] = "Background: &FFE0B8&; "
    Start.LocalSettings["/Coul" & "/Fcs"] = "Background: &HF9FFC7&"
    Start.LocalSettings["/Coul" & "/Stk"] = "Background: &HCFF58E&; Font: serif,9; "
    Start.LocalSettings["/Coul" & "/Coulfonds"] = "255,252,216,"
    Start.LocalSettings["/Coul" & "/Others"] = "255,232,199,"
    Start.LocalSettings["/Coul" & "/Facts"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Avs"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Bl"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Devis"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Cmde"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Prf"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Nstk"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Eps"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Spd"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Soc" & Soc & "/Font"] = "Serif,+1"
    Start.LocalSettings["/Soc" & Soc & "/Copie"] = 0
    Start.LocalSettings["/Soc" & Soc & "/Siret"] = "Siret"
    Start.LocalSettings["/Soc" & Soc & "/Prxdec"] = 0
    Start.LocalSettings["/Soc" & Soc & "/Taxe"] = "TVA"
    Start.LocalSettings["/Soc" & Soc & "/Pays"] = "France"
    Start.LocalSettings["/Soc" & Soc & "/Impbl"] = 0
    Start.LocalSettings["/Soc" & Start.Societe & "/Exp"] = 1
    Start.LocalSettings["/Soc" & Start.Societe & "/Lettrage"] = 1
    Start.LocalSettings["/Soc" & Start.Societe & "/Impbl"] = 0
    Start.LocalSettings["/Soc" & Soc & "/nbfam"] = "5"
    $ipr.Add(5)
    Start.LocalSettings["/Soc" & Soc & "/ipr"] = $ipr
    'mise des options à faux
    Start.LocalSettings["/Soc" & Soc & "/pp"] = False
    Start.LocalSettings["/Soc" & Soc & "/bois"] = False
    Start.LocalSettings.Save
    
    Utils.Fill_DataBase(Soc, "Laurux01.sql")
    'Cas special si la connection à la base a echouée car elle n'existait pas... maintenant c'est ok (si besoin le tunnel est déjà monté)
    If Not Utils.db.Opened Then Utils.db.Open()
    Tab = "Fiches_Societes"
    Utils.db.Exec("UPdate  " & Base & "." & Tab & "  SET cd_sc = &1 where cd_sc = 01", Soc)
    
    Start.LocalSettings["/Societes/Soc" & Soc] = Majversion.Version
    Start.LocalSettings.Reload
    If AsCurrent Then Start.societe = soc
    Me.mouse = Mouse.Default
    Message.Info("La base de démarrage a été installé sur " & Base & "!\nCette base peut être maintenant sélectionné.")
    Return True
  Else
    Return False
  Endif

End

Public Sub Button2_Click()

  Me.close

End

'********************************************************************
'* Fermeture du formulaire avec suppression de l'éventuel tunnel ssh
'* MG - 07 janvier 2010
'********************************************************************
Public Sub Form_Close()

  Dim $Nbase As String[]

  Start.LocalSettings["/dbase/Prefixe"] = Prefixe.Text
  Start.LocalSettings["/dbase/Con-ssh"] = Bssh.Value
  Start.LocalSettings["/dbase/type"] = ComboBox1.Text
  $Nbase = Split(Nbase.Text, "_")
  Start.LocalSettings["/dbase/Login"] = login.Text
  Start.LocalSettings["/dbase/Password"] = hexdblKey.crypt("en", Password.Text, "Laurux")
  Start.LocalSettings["/dbase/Port"] = Port.Text
  If ComboBox1.Text = "mysql"
    Try Start.LocalSettings["/dbase/Name"] = $Nbase[1]
    If Error Then Start.LocalSettings["/dbase/Name"] = $Nbase[0]
    Start.LocalSettings["/dbase/Host"] = Host.Text
  Else
     Start.LocalSettings["/dbase/Host"] = File.Dir(FileChooser1.SelectedPath)
     Start.LocalSettings["/dbase/Name"] = File.BaseName(FileChooser1.SelectedPath)
  Endif
  Start.LocalSettings["/dbase/Maj"] = Maj.Value
  If Bssh.value Then
    Start.LocalSettings["/dbase/ssh/Login"] = Loginssh.Text
    Start.LocalSettings["/dbase/ssh/Hostssh"] = Hostssh.Text
    Start.LocalSettings["/dbase/ssh/Passwssh"] = hexdblKey.crypt("en", Passwordssh.Text, "LauruX2012")
    Start.LocalSettings["/dbase/ssh/Portssh"] = Portssh.Text
    Start.LocalSettings["/dbase/ssh/Portlocal"] = Portlocal.Text
  Endif

  'Modal during empty/non working configuration
  'Else restart Laurux with new database connection
  If Not Me.Modal
    Me.Hide
    Start.UnLock()
    Utils.fermeTunnel()
    Utils.db.Close
    Try Fmenu.Close
    Try Fmenuc.Close
    Try Fmenuf.Close
    Try Fmenu.delete
    Try Fmenuc.delete
    Try Fmenuf.delete
    Start.Main()
  Endif

End

'******************************************
'* Masquage affichage du cadre tunnel ssh
'* MG - 07 janvier 2010
'******************************************
Public Sub Bssh_Click()

  If Bssh.value Then
    Frame1.Enabled = True
  Else
    Frame1.Enabled = False
  Endif

End

'**********************************
'*    Appel de la doc html        *
'**********************************
Public Sub Button3_Click()

  Doc.Open("Conf")

End

Public Sub ComboBox1_Click()

  If ComboBox1.Text = "mysql"
    Frame1.Visible = True
    Bssh.Visible = True
    Frame2.Visible = True
    FileChooser1.Visible = False
  Else
    Frame1.Visible = False
    Bssh.Visible = False
    Frame2.Visible = False
    FileChooser1.Visible = True
  Endif

End
