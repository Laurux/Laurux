' Gambas class file

Private Jnl As String
Private numr As Integer ' Numero ecriture provisoire
Private numr2 As Integer ' numero ecriture définitif
Private numecr As String
Private client As String
Private Nclient As String
Private collectif As String
Private typec As String
Private Artdsg As String
Private Artdsg2 As String
Private Artfam As String
Private Nbd As String
Private Nbdec As String
Private Paht As String
Private Pmp As String
Private Artpu As String
Private Artbrut As String
Private Artnet As String
Private Arttc As String
Private Artrm As String ' remise client sur pieces ou par type client
Private Rms As New String[6, 3] ' Tableau des remises quantitatives
Private Qte As String
Private Decq As String '
Private Ttva As Float
Private Tx As Float
Private Arttx As String
Private Arr As String
Private Decm As String
Private Ecot As String
Private Tcp As String
Private marge As String
Private Datem As String
Private CptCaisse As String
Private Vic As String
Private Vichq As String
Private Viautre As String
Private jnal As String
Private jnal3 As String
Private Tab As String = "Virements"
Private RegroupBL As Facturergbl
Private $soption As String

Public Sub _new()

  $soption = utils.Option()
  Parametres()
  Ventilation()

End

Public Sub Button2_Click()

  Me.close

End

'**********************************************On effectue le moulinage des tickets**************************************
Public Sub Button1_Click()

  Dim rResult As Result
  Dim chemin As String = "/Sauve"

  If Jnal = "" Or If Vic = "" Or If Vichq = "" Or If Viautre = "" Then
    If start.son Then Music.Play
    Message.Error("Vous devez completer, dans les parametres, les données relatives au journal de caisse \net aux comptes de virements internes avant de faire le moulinage !")
  Else
    If start.son Then Music.Play
    If Message.Question("Ce programme va effacer les bordereaux de remises de chèques et de cartes !\nEtes-vous d'accord pour lancer le moulinage ?", "Oui", "Non") = 1 Then
      rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabCaisses") & " where connecte = &1", 1)
      If rResult.Available Then
        If start.son Then Music.Play
        Message.Error("La caisse numéro " & rResult!code & " est connectée ! \n Veuillez déconnecter toutes vos caisses avant de faire le moulinage SVP.")
        Return
      Else
        rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabCaisses") & " where tkz = &1", 0)
        If rResult.Available Then
          If start.son Then Music.Play
          Message.Error("Le ticket Z de la caisse numéro " & rResult!code & " n'est pas tiré ! \n Veuillez imprimer vos bandes Z avant de faire le moulinage SVP.")
          Return
        Else
          If start.son Then Music.Play
          If Message.Question("Cette opération va effectuer le passage en comptabilité pour l'ensemble des tickets de caisse.\nLes bons de caisse pour les clients en compte seront archivés dans les documents.\nLes bordereaux seront effacés.\nVoulez-vous continuer ?", "Oui", "Non") = "1" Then
            Me.mouse = mouse.Wait
            If Not Exist(User.home & chemin) Then Mkdir User.home & chemin
            Shell "mysqldump -h " & Start.LocalSettings["/dbase/Host"] & " -u " & Utils.db.Login & " -p" & Utils.db.Password & " " & Utils.db.Name & " " & "--add-drop-table" & " " & ">" & " " & User.home & "/Sauve/" & Utils.db.Name & ".sql" & Format$(Now, "yyyymmdd") Wait
            Moulinage()
          Endif
        Endif
      Endif
    Endif
  Endif

End

Public Sub Livre_caisse(Optional Ncaisse As String = "", Optional Statut As String = "V", Optional Validate As Boolean = False, Optional p_date As LDate = Null, Optional Format As String = "A4", Optional Filename As String = "") As Boolean

  Dim rTkx, rttva, rTkd, rTkl As Result
  Dim rTkFam As Result
  Dim rTkhv As Result
  Dim rCaisse As Result
  'Dim Tabz As String
  Dim Tabe, Tabl, Tabx As String
  Dim Posy As Integer
  Dim sFam As String = "0,00"
  Dim sFam2 As String = "0,00"
  Dim sLFam, tintitule As String
  Dim sMtfam As String = 0
  Dim sMtreg As String = 0
  Dim sreg As String
  Dim sqte As String
  Dim totcaisse As String = 0
  Dim totventes As String = 0
  Dim totboncaisse As String = 0
  Dim Fdc As String = "0"
  Dim Totnbtck, X2, Y2, NBT As Integer = 0
  Dim Pnm, itva As Float = 0
  Dim Enc As Boolean = False
  Dim pdf As Cfacture
  Dim $code, $intitule As String
  Dim sintitule As String
  Dim filtredate As String
  Dim initdate As String
  Dim Boncaisse, tcheque, tcarte, tespece, tmttc As Float
  Dim Ba4 As Boolean = True
  Dim FndCaisse As String
  Dim ipos As Integer
  Dim Ret As Boolean = False
  Dim dteov As LDate
  
  Tabe = "Fiches_EntTicketz" ' & rCaisse!code
  Tabx = "Fiches_Fam"
  Tabl = "Fiches_LigTicketz" ' & rCaisse!code

  With Utils
    
  
    If Filename = "" Then
      If Not Exist(User.home & "/Caisse/") Then Mkdir User.home & "/Caisse/"
      If p_date Then
        Filename = User.home & "/Caisse/Livre_caisse" & Ncaisse & "_" & Format$(p_date.G, "dd-mm-yyyy") & ".pdf"
      Else
        Filename = User.home & "/Caisse/Livre_caisse" & Ncaisse & "_" & Format$(Now, "dd-mm-yyyy") & ".pdf"
      Endif
    Endif
    
    If p_date Then
      filtredate = " and DATE(e.date) = \"" & p_date.D & "\""
      initdate = "du " & p_date.L
    Else
      filtredate = ""
      initdate = "au " & LDate().L 
    Endif
    pdf = New Cfacture("P", "mm", Format)
    If Format <> "A4" Then
      Ba4 = False
    Endif
    pdf.Open()
    pdf.AliasNbPages()
    rCaisse = Utils.db.Exec("select * from  " & Cbase.Table("TabCaisses") & " order by code")
    If rCaisse.Available Then
      Repeat
        If Ncaisse <> Null Then
          If Ncaisse <> rCaisse!code Then Continue
        Endif
        
        sIntitule = "Livre de caisse " & initdate & " : Caisse N° " & rCaisse!code
  
  
        rTkx = Utils.db.Exec("select * from  " & Cbase.Table("TabCaisses") & " WHERE code = &1", rCaisse!code)
        Try Fdc = Format$(rTkx!fndc, "0.00")
        Try dteov = New LDate(rTkx!dteov)
        totcaisse = Val(.cpoint(Totcaisse)) + Val(.cpoint(Fdc))
        
        rTkx = Utils.db.Exec(" select * from " & Tabe & " as e where e.statut = &1 and e.caisse = &2" & filtredate, Statut, rCaisse!code)
        If rTkx.Available Then
          Ret = True 'Donnee présente
          Totnbtck = rTkx.count
          pdf.newPage()
          Posy = 5
          If rTkx.Available Then
            Repeat
              ' Les clients comptes génère des BL il n'y a donc pas de vente/d'encaissement
              ' l'encaissement pourra avoir lieu en caisse lors du règlement de BL
              If rTkx!type = 1 Then Continue
              If rTkx!savoir = 1 Then
                Try totventes = Val(.cpoint(Totventes)) - Val(.cpoint(rTkx!mttc))
              Else
                Try totventes = Val(.cpoint(Totventes)) + Val(.cpoint(rTkx!mttc))
              Endif
              If rTkx!scheque = "V" Then tcheque = tcheque + Val(.cpoint(rTkx!mcheque))
              If rTkx!scarte = "U" Then tcarte = tcarte + Val(.cpoint(rTkx!mcarte))
              If rTkx!sespeces = "N" Then tespece = tespece + Val(.cpoint(rTkx!mespeces))
            Until rTkx.MoveNext()
          Endif
          
          rTkhv = Utils.db.Exec(" select * from " & Tabl & " as l inner join " & Tabe & " as e on e.numero = l.numero where e.statut = &1 and e.suppr !=1 and e.caisse = &2 " & filtredate & " order by l.type", Statut, rCaisse!code)
          If rTkhv.Available Then
            Posy += 5
            Pdf.Level3(sIntitule, Posy, Ba4)
            Posy += 8
            Pdf.Level3("Caissier(e) " & rTkhv!vendeur, Posy, Ba4)
            Posy += 8
            pdf.Level2E(Posy)
            Posy += 8
            If p_date Then
              pdf.Level2("Fond de caisse actuel le " & LDate(Now).LT, Fdc, "", Posy)
            Else
              pdf.Level2("Fond de caisse initial le " & dteov.LT, Fdc, "", Posy)
            Endif
            Posy += 8
            pdf.Lines2(Posy)
          Endif
          rTkd = Utils.db.Exec(" select  sum(replace(mttc, ',', '.')) as tmttc from " & Tabe & " as e where e.statut = &1 and e.suppr = &2 and e.caisse =&3" & filtredate, Statut, 1, rCaisse!code)
          If rTkd.Available Then Try tmttc = rTkd!tmttc
          rTkx = Utils.db.Exec(" select * from " & Tabe & " as e where e.statut = &1 and e.suppr = &2 and e.caisse =&3" & filtredate, Statut, 1, rCaisse!code)
          If rTkx.Available Then
            pdf.Level2("Tickets  annulés :  ", Format$(tmttc, "0.00"), rTkx.Count, Posy)
            Posy += 5
            Repeat
              pdf.Level2(rTkx!numero, Format$(Val(.cpoint(rTkx!mttc)), "0.00"), "", Posy)
              Posy += 5
            Until rTkx.MoveNext()
            pdf.Lines2(Posy)
          Endif
          rTkhv = Utils.db.Exec(" select count(*) as cnt, l.type, sum(cast(REPLACE(l.montant,',','.') as decimal(7,2))) as totmontant, DATE(e.date) as ddate from " & Tabl & " as l left join " & Tabe & " as e on l.numero = e.numero where l.type is not Null and e.statut = &1 and e.caisse = &2 and e.suppr != 1 " & filtredate & " group by l.type, DATE(e.date)", Statut, rCaisse!code)
          If rTkhv.Available Then
            pdf.Level2("Mouvements ", "", "", Posy)
            Posy += 5
            Repeat
              If rTkhv!type = "N" Then
                sreg = "Tot. rglts especes "
              Else If rTkhv!type = "Q" Then
                sreg = "Tot. rendu especes "
              Else If rTkhv!type = "U" Then
                sreg = "Tot. rglts par cartes "
              Else If rTkhv!type = "V" Then
                sreg = "Tot. rglts par cheques "
              Else If rTkhv!type = "B" Then
                sreg = "Tot. bonus utilises "
              Else If rTkhv!type = "E" Then
                sreg = "Tot. bons de reduction "
              Else If rTkhv!type = "X" Then
                sreg = "Tot. bons achat "
              Else If rTkhv!type = "Y" Then
                sreg = "Tot. cheques cadeaux "
              Else If rTkhv!type = "W" Then
                sreg = "Tot. credits "
              Else If rTkhv!type = "Z" Then
                sreg = "Tot. avoirs "
              Else If rTkhv!type = "1" Then
                sreg = "Tot. cheques entr."
              Else If rTkhv!type = "M" Then
                sreg = "Tot. clients compte "
              Else If rTkhv!type = "RA" Then
                sreg = "Tot. acompte utilise "
              Else If rTkhv!type = "EA" Then
                sreg = "Tot. acompte verse "
              Else If rTkhv!type = "EH" Then
                sreg = "Tot. entree "
              Else If rTkhv!type = "SH" Then
                sreg = "Tot. sortie "
              Else If rTkhv!type <> "" Then
                sreg = "Type inconnu " & rTkhv!type & " "
              Else
                sreg = ""
              Endif
              
              If rTkhv!totmontant <> Null Then
                sMtreg = Format$(Val(.cpoint(rTkhv!totmontant)), "0.00")
              Else
                sMtreg = "0.00"
              Endif
              'If rTkhv!type = "N" Then totcaisse = Val(.cpoint(Totcaisse)) + Val(.cpoint(rTkhv!totmontant)
              'If rTkhv!type = "Q" Then totcaisse = Val(.cpoint(Totcaisse)) - Val(.cpoint(rTkhv!totmontant)
              sqte = rTkhv!cnt
              If Val(sqte) > 0 Then
                If rTkhv!type = "E" Or If rTkhv!type = "B" Or If rTkhv!type = "N" Or If rTkhv!type = "Q" Or If rTkhv!type = "U" Or If rTkhv!type = "V" Or If rTkhv!type = "X" Or If rTkhv!type = "Y" Or If rTkhv!type = "W" Or If rTkhv!type = "Z" Or If rTkhv!type = "M" Or If rTkhv!type = "1" Or If rTkhv!type = "RA" Then
                  sreg &= " du " & LDate(rTkhv!ddate).L
                  pdf.Level2(sReg, sMTreg, sqte, Posy)
                  Posy += 5
                Else If rTkhv!type = "EA" Or If rTkhv!type = "EH" Or If rTkhv!type = "SH" Then
                  sreg &= " (mvt. hors ventes) du " & LDate(rTkhv!ddate).L
                  pdf.Level2(sReg, sMTreg, sqte, Posy)
                  Posy += 5
                Else
                  'Aucun affichage
                Endif
              Endif
              If posy > 260 Then
                pdf.Baspage()
                pdf.newPage
                Posy = 5
              Endif
            Until rTkhv.MoveNext()
          Endif
          totcaisse = Val(.cpoint(Totcaisse)) + tespece
          pdf.Lines2(Posy)
          pdf.Level2("Total ventes (hors clients compte) ", Format$(Val(.cpoint(Totventes)), "0.00"), "", Posy)
          If Not p_date Then
            Posy += 5
            pdf.Lines2(Posy)
            pdf.Level2("Fond de caisse final le " & LDate(Now).LT, Format$(Val(.cpoint(Totcaisse)), "0.00"), "", Posy)
            FndCaisse = Totcaisse
          Endif
          Posy += 5
          pdf.Lines2(Posy)
          If Validate = 1 Then
            pdf.Lines2(Posy)
            pdf.Level2("Nombre de tickets :", Totnbtck, "", Posy)
            Posy += 5
            Try Pnm = Totventes / Totnbtck
            If Error Then Pnm = 0
            pdf.Level2("Panier moyen :", Format$(Pnm, "0.00"), "", Posy)
            Posy += 5
            pdf.Lines2(Posy)
          Endif
          'Recapitulatif TVA sur les ticket avec un encaissement
          rttva = Utils.db.Exec("select * from  " & Tabl & " as l inner join " & Tabe & " as e on e.numero = l.numero WHERE left(intitule,3) = &1 and e.type = &2 and e.suppr != 1 and e.statut = &3 and e.caisse=&4 " & filtredate & " order by intitule", "TVA", 0, Statut, rCaisse!code)
          If rttva.Available Then
            pdf.Level2("Recapitulatif TVA (sur encaissement)", "", "", Posy)
            Posy += 5
            tintitule = rttva!intitule
            Repeat
              If tintitule <> rttva!intitule Then
                pdf.Level2(Tintitule, itva, "", Posy)
                Posy += 5
                itva = 0
              Endif
              Try itva = itva + Val(utils.cpoint(rttva!montant))
              tintitule = rttva!intitule
              If posy > 260 Then
                pdf.Baspage()
                pdf.newPage
                Posy = 5
              Endif
            Until rttva.MoveNext()
            pdf.Level2(Tintitule, itva, "", Posy)
            Posy += 5
            pdf.Lines2(Posy)
          Endif
        
          'pdf.Level2("Total période (sur encaissement)", Format$(Val(.cpoint(rCaisse!fndtotp)), "0.00"), "", Posy)
          ' Posy += 5
          ' pdf.Lines2(Posy)
          pdf.Level2("Total général (sur encaissement)", Format$(Val(.cpoint(rCaisse!fndtotg)), "0.00"), "", Posy)
          Posy += 5
          pdf.Lines2(Posy)
          
          rTkFam = Utils.db.Exec("select sum(cast(replace(l.qte,',','.') as decimal(7,2))) as totalfamqte, fam, sum(cast(replace(l.mht,',','.') as decimal(7,2))) as totalfamht, libell_fam from " & Tabl & " as l left join " & Tabe & " as e on l.numero = e.numero left join " & Tabx & " on l.fam = code_fam where l.fam is not Null and l.type = &1 and e.statut = &2 and e.suppr != 1 and e.caisse = &3 " & filtredate & " group by fam order by totalfamht", "A", Statut, rCaisse!code)
          If rTkFam.Available Then
            pdf.Level2("Total ventes HT par familles", "", "", Posy)
            Posy += 5
            Repeat
              sFam = "Famille " & Left$(rTkFam!fam, 2)
              If Totventes <> 0 Then
                pdf.Level2(Utils.Replace(rTkFam!libell_fam) & " " & Format$(Val(utils.cpoint(rTkFam!totalfamht)) / Totventes * 100, "0.00") & " %", rTkFam!totalfamht, rTkFam!totalfamqte, Posy)
              Endif
              Posy += 5
              If posy > 260 Then
                pdf.Baspage()
                pdf.newPage
                Posy = 5
              Endif
            Until rTkFam.MoveNext()
            Posy += 5
          Endif
          'On imprime les tickets supprimés.
          If Ba4 Then
            ipos = 80
          Else
            ipos = 10
          Endif
          rTkx = Utils.db.Exec(" select * from " & Tabe & " as e where e.statut = &1 and e.suppr = &2 and e.caisse = &3 " & filtredate & " order by numero", Statut, 1, rCaisse!code)
          If rTkx.Available Then
            pdf.Baspage()
            pdf.newPage
            Posy = 5
            Y2 = 5
            pdf.Entete("Caisse " & rCaisse!code & ": Récapitulatif des tickets supprimés " & initdate, ipos, Posy, 1, Ba4)
            Posy += 10
            Y2 += 10
            Repeat
              Inc NBT
              If Nbt = 2 Then
                X2 = 106
              Else
                X2 = 2
              Endif
              If Not Ba4 Then X2 = 2
              If Posy >= 278 Or If Y2 >= 278 Then
                pdf.Baspage()
                pdf.newPage
                Posy = 5
                Y2 = 5
                If Ba4 Then
                  pdf.Entete("Caisse " & rCaisse!code & ": Récapitulatif des tickets supprimés " & initdate, ipos, Posy, 1, Ba4)
                  Posy += 10
                  Y2 += 10
                Endif
              Endif
              If Ba4 Then
                If Nbt < 2 Then
                  pdf.Entete("Ticket numéro " & rTkx!numero & "     " & LDate(rTkx!date).LT & " " & rTkx!nom, X2, Posy, 1, "")
                Else
                  pdf.Entete("Ticket numéro " & rTkx!numero & "     " & LDate(rTkx!date).LT & " " & rTkx!nom, X2, Y2, 1, "")
                Endif
              Else
                pdf.Entete("Ticket numéro " & rTkx!numero & "     " & LDate(rTkx!date).LT & " " & rTkx!nom, X2, Posy, 1, "")
              Endif
              If Ba4 Then
                If Nbt = 1 Then Posy += 8
                If Nbt = 2 Then Y2 += 8
              Else
                Posy += 8
              Endif
              rTkl = Utils.db.Exec(" select * from " & Tabl & " where numero = &1 order by LInd", rTkx!numero)
              If rTkl.Available Then
                Repeat
                  $code = rTkl!code & String$(15 - Len(rTkl!code), " ")
                  $intitule = rTkl!intitule & String$(40 - (Len(rTkl!intitule) - 10), " ")
                  If Ba4 Then
                    If Nbt < 2 Then
                      pdf.Level1($code, $intitule, rTkl!montant, rTkl!qte, X2, PosY, "")
                    Else
                      pdf.Level1($code, $intitule, rTkl!montant, rTkl!qte, X2, Y2, "")
                    Endif
                  Else
                    pdf.Level1($code, $intitule, rTkl!montant, rTkl!qte, X2, PosY, "")
                  Endif
                  If Ba4 Then
                    If Nbt = 1 Then Posy += 3
                    If Nbt = 2 Then Y2 += 3
                  Else
                    Posy += 3
                  Endif
                  If Posy >= 280 Or If Y2 >= 280 Then
                    pdf.Baspage()
                    pdf.newPage
                    Posy = 5
                    Y2 = 5
                    If Ba4 Then
                      pdf.Entete("Caisse " & rCaisse!code & ": Récapitulatif des tickets supprimés " & initdate, ipos, Posy, 1, Ba4)
                      Posy += 10
                      Y2 += 10
                    Endif
                  Endif
                Until rTkl.MoveNext()
              Endif
              If Nbt = 2 Then nbt = 0
            Until rTkx.MoveNext()
          Endif
          
          'On imprime les tickets.
          nbt = 0
          rTkx = Utils.db.Exec(" select * from " & Tabe & " as e where e.type = 0 and e.statut = &1 and e.suppr = &2 and e.caisse = &3 " & filtredate & " order by numero", Statut, 0, rCaisse!code)
          If rTkx.Available Then
            pdf.Baspage()
            pdf.newPage
            Posy = 5
            Y2 = 5
            pdf.Entete("Caisse " & rCaisse!code & ": Récapitulatif des tickets encaissés " & initdate, ipos, Posy, 1, Ba4)
            Posy += 10
            Y2 += 10
            Repeat
              Inc NBT
              If Nbt = 2 Then
                X2 = 106
              Else
                X2 = 2
              Endif
              If Not Ba4 Then X2 = 2
              If Posy >= 278 Or If Y2 >= 278 Then
                pdf.Baspage()
                pdf.newPage
                Posy = 5
                Y2 = 5
                If Ba4 Then
                  pdf.Entete("Caisse " & rCaisse!code & ": Récapitulatif des tickets encaissés " & initdate, ipos, Posy, 1, Ba4)
                  Posy += 10
                  Y2 += 10
                Endif
              Endif
              If Ba4 Then
                If Nbt < 2 Then
                  pdf.Entete("Ticket numéro " & rTkx!numero & "     " & LDate(rTkx!date).LT, X2, Posy, 1, "")
                Else
                  pdf.Entete("Ticket numéro " & rTkx!numero & "     " & LDate(rTkx!date).LT, X2, Y2, 1, "")
                Endif
              Else
                pdf.Entete("Ticket numéro " & rTkx!numero & "     " & LDate(rTkx!date).LT, X2, Posy, 1, "")
              Endif
              If Ba4 Then
                If Nbt = 1 Then Posy += 8
                If Nbt = 2 Then Y2 += 8
              Else
                Posy += 8
              Endif
              rTkl = Utils.db.Exec(" select * from " & Tabl & " where numero = &1 order by LInd", rTkx!numero)
              If rTkl.Available Then
                Repeat
                  $code = rTkl!code & String$(15 - Len(rTkl!code), " ")
                  $intitule = rTkl!intitule & String$(40 - (Len(rTkl!intitule) - 10), " ")
                  If Ba4 Then
                    If Nbt < 2 Then
                      pdf.Level1($code, $intitule, rTkl!montant, rTkl!qte, X2, PosY, "")
                    Else
                      pdf.Level1($code, $intitule, rTkl!montant, rTkl!qte, X2, Y2, "")
                    Endif
                  Else
                    pdf.Level1($code, $intitule, rTkl!montant, rTkl!qte, X2, PosY, "")
                  Endif
                  If Ba4 Then
                    If Nbt = 1 Then Posy += 3
                    If Nbt = 2 Then Y2 += 3
                  Else
                    Posy += 3
                  Endif
                  If Posy >= 280 Or If Y2 >= 280 Then
                    pdf.Baspage()
                    pdf.newPage
                    Posy = 5
                    Y2 = 5
                    If Ba4 Then
                      pdf.Entete("Caisse " & rCaisse!code & ": Récapitulatif des tickets encaissés " & initdate, ipos, Posy, 1, Ba4)
                      Posy += 10
                      Y2 += 10
                    Endif
                  Endif
                Until rTkl.MoveNext()
              Endif
              If Nbt = 2 Then nbt = 0
            Until rTkx.MoveNext()
          Endif
          
          'On imprime les tickets client compte.
          nbt = 0
          rTkx = Utils.db.Exec(" select * from " & Tabe & " as e where e.type = 1 and e.statut = &1 and e.suppr = &2 and e.caisse = &3 " & filtredate & " order by numero", Statut, 0, rCaisse!code)
          If rTkx.Available Then
            pdf.Baspage()
            pdf.newPage
            Posy = 5
            Y2 = 5
            pdf.Entete("Caisse " & rCaisse!code & ": Récapitulatif des tickets des clients en compte " & initdate, ipos, Posy, 1, Ba4)
            Posy += 10
            Y2 += 10

            Repeat
              Inc NBT
              If Nbt = 2 Then
                X2 = 106
              Else
                X2 = 2
              Endif
              If Not Ba4 Then X2 = 2
              If Posy >= 278 Or If Y2 >= 278 Then
                pdf.Baspage()
                pdf.newPage
                Posy = 5
                Y2 = 5
                If Ba4 Then
                  pdf.Entete("Caisse " & rCaisse!code & ": Récapitulatif des tickets des clients en compte " & initdate, ipos, Posy, 1, Ba4)
                  Posy += 10
                  Y2 += 10
                Endif
              Endif
              If Ba4 Then
                If Nbt < 2 Then
                  pdf.Entete("Ticket numéro " & rTkx!numero & "     " & LDate(rTkx!date).LT, X2, Posy, 1, "")
                  pdf.Entete(rTkx!client & " " & rTkx!nom, X2, Posy + 4, 1, "")
                Else
                  pdf.Entete("Ticket numéro " & rTkx!numero & "     " & LDate(rTkx!date).LT, X2, Y2, 1, "")
                  pdf.Entete(rTkx!client & " " & rTkx!nom, X2, Y2 + 4, 1, "")
                Endif
              Else
                pdf.Entete("Ticket numéro " & rTkx!numero & "     " & LDate(rTkx!date).LT, X2, Posy, 1, "")
                pdf.Entete(rTkx!client & " " & rTkx!nom, X2, Posy + 4, 1, "")
              Endif
              If Ba4 Then
                If Nbt = 1 Then Posy += 10
                If Nbt = 2 Then Y2 += 10
              Else
                Posy += 10
              Endif
              rTkl = Utils.db.Exec(" select * from " & Tabl & " where numero = &1 order by LInd", rTkx!numero)
              If rTkl.Available Then
                Repeat
                  $code = rTkl!code & String$(15 - Len(rTkl!code), " ")
                  $intitule = rTkl!intitule & String$(40 - (Len(rTkl!intitule) - 10), " ")
                  If Ba4 Then
                    If Nbt < 2 Then
                      pdf.Level1($code, $intitule, rTkl!montant, rTkl!qte, X2, PosY, "")
                    Else
                      pdf.Level1($code, $intitule, rTkl!montant, rTkl!qte, X2, Y2, "")
                    Endif
                  Else
                    pdf.Level1($code, $intitule, rTkl!montant, rTkl!qte, X2, PosY, "")
                  Endif
                  If Ba4 Then
                    If Nbt = 1 Then Posy += 3
                    If Nbt = 2 Then Y2 += 3
                  Else
                    Posy += 3
                  Endif
                  If Posy >= 280 Or If Y2 >= 280 Then
                    pdf.Baspage()
                    pdf.newPage
                    Posy = 5
                    Y2 = 5
                    If Ba4 Then
                      pdf.Entete("Caisse " & rCaisse!code & ": Récapitulatif des tickets des clients en compte " & initdate, ipos, Posy, 1, Ba4)
                      Posy += 10
                      Y2 += 10
                    Endif
                  Endif
                Until rTkl.MoveNext()
              Endif
              If Nbt = 2 Then nbt = 0
            Until rTkx.MoveNext()
          Endif
        
          If Validate Then
            'Ticket Z on valide les tickets
            Utils.db.Exec("Update " & Tabe & " as e set e.statut = &1 where e.statut = &2 and e.caisse = &3" & filtredate, "V", Statut, rCaisse!code)
            'On met à jour le fond de caisse et les dates d'ouverture
            Utils.db.Exec("UPdate  " & Cbase.Table("TabCaisses") & "  SET fndc = &2, dtefm = &3, tkz = &4 WHERE code = &1", rCaisse!code, Utils.PointBase(Fndcaisse), LDate(Now).DT, 1)
          Endif
  
          pdf.Baspage()
          
        Else
          'Cette caisse n'a aucune donnée a traiter.
        Endif
  
      Until rCaisse.MoveNext()
      Dec Application.Busy
      pdf.Output(Filename, False)
      If Ret Then Visualiseur.Prog(Filename)
    Else
      Message.Info("Aucune caisse n'exite a traiter !")
    Endif
  End With
  
  Return Ret

End


Public Sub Moulinage()

  Dim rTck As Result
  Dim rlTck As Result
  Dim lBl As Result
  Dim rlTck2 As Result
  Dim rcpt As Result
  Dim rResult As Result
  Dim rFam, rDep As Result
  Dim Bl As Result
  Dim Blg As Result
  Dim res As Result
  Dim respar As Result
  Dim vente As String
  Dim ivente As String
  Dim tva As String
  Dim itva As String
  Dim montant As String
  Dim cvclibl As String
  Dim nmclibl As String
  Dim pnmclibl As String
  Dim adr1bl As String
  Dim adr2bl As String
  Dim cpbl As String
  Dim villebl As String
  Dim rmobl As String
  Dim numbon As String
  Dim numlig As Integer = 0
  Dim nmlig As String
  Dim bloc As String
  Dim Exo As String
  Dim Datec As Date
  Dim Date_Bl As Date
  Dim sDate As String
  Dim origine As String
  Dim scli As String
  Dim code As String
  Dim Remart As String
  Dim totalht As Float
  Dim totalttc As Float
  Dim $intit, resto, Fam, $depot As String
  Dim bretro As Boolean
  Dim dnfac As String
  Dim snfac As String
  Dim Verif_Caisse As Float
  Dim bl_cli_credit As Float
  Dim bl_cli_debit As Float
  Dim Error_Verif_Tck As String[] = []
  Dim mrg As Float
  Dim msg_err As String
  Dim lasttk As String
  Dim inda As Integer
  
  RegroupBL = New Facturergbl
  'On reinitialise les tables temporaire de ventilation et de virement interne
  Virements()
  Ventilation()
  numecr = "numecriture"
  numr = Ecritures(numecr)
  numr = numr + 1
  numecr = "numecriture2"
  numr2 = Ecritures(numecr)
  numr2 = numr2 + 1
  'On récupère le journal de caisse
  rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabJour") & " where code_jo = &1", Jnal)
  If rResult.Available Then CptCaisse = rResult!cde_banque
  Datem = Format$(DateChooser1.Value, "dd.mm.yyyy")
  Datec = DateChooser1.Value
  rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabParam") & " ")
  With utils
    Me.mouse = Mouse.Wait
    If rResult.Available Then numbon = rResult!dnbon
    Try rTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where statut = &1 order by date, numero", "V")
    If rTck.Available Then
      If LDate(rtck!date).G < DateChooser1.Value Then
        sDate = LDate(rtck!date).L 
        Message.Info("Il reste des tickets à la date du " & sdate & " !\nVeuillez faire un moulinage à cette date SVP.")
      Else
        rTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where DATE(date) = &1 and statut = &2 order by numero asc, date desc", LDate(DateChooser1.Value).D, "V")
        If rTck.Available Then
          Repeat

            'On verifie la somme de controle des tiquets
            If rTck!control Then
              If Sha1Calc.CalcSha1T("Fiches_EntTicketz", rTck!numero, rTck!prev_numero, False) <> Trim(rTck!control) Then
                Error_Verif_Tck.Add(rTck!numero)
              Endif
            Else
              Error_Verif_Tck.Add(rTck!numero)
            Endif
          Until rTck.MoveNext()

          If Error_Verif_Tck.Length > 0 Then
            If Message.Error("les Tickets suivants ont des champs de contrôle altéré ou absent, voulez vous poursuivre le moulinage!\n" & Error_Verif_Tck.Join(","), "OK", "ANNULER") <> 1 Then
              Return
            Endif
          Endif

          'création du fichier temporaire pour récuperer les lignes de facture
          creatmp()
          ' On bloque les tables
          Utils.db.Exec("LOCK TABLES " & Cbase.Table("TabParam") & " WRITE, " & Cbase.Table("TabEntTck") & " WRITE, " & Cbase.Table("TabLigTck") & " WRITE, " & Cbase.Table("TabComptes") & " WRITE, " & Cbase.Table("Totalisation") & " WRITE, " & Cbase.Table("TabFam") & " WRITE, " & Cbase.Table("TabTvav") & " WRITE, " & Cbase.Table("TabMvt") & " WRITE, " & Cbase.Table("TabMvtM") & " WRITE, " & Cbase.Table("TabArt") & " WRITE, " & Cbase.Table("TabHisEntTck") & " WRITE, " & Cbase.Table("TabHisLigTck") & " WRITE, " & Cbase.Table("TabJour") & " WRITE,  " & Cbase.Table("TabCli") & " WRITE, " & Cbase.Table("TabBl") & " WRITE, " & Cbase.Table("TabLigbl") & " WRITE, " & Cbase.Table("TabRemTypec") & " WRITE, " & Tab & " WRITE, Fiches_Caisses WRITE, Fiches_FamDep WRITE, Fiches_BordereauxC WRITE")

        Endif
      
        lasttk = ""
        rTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where DATE(date) = &1 and statut = &2 order by numero asc, date desc", LDate(DateChooser1.Value).D, "V")
        If rTck.Available Then
          Repeat
          
            'On verifie si plusieur ticket partage le meme numero (bug possible lié à un crash lors de la saisie d'un ticket)
            If lasttk And (lasttk = rTck!numero) Then
              Message.Warning("Un Ticket avec le numero " & rTck!numero & " a déjà été traité, celui-ci avec la date " & LDate(Rtck!date).LT & " sera ignoré")
              Continue
            Else
              lasttk = rTck!numero
            Endif
          
            If rtck!sresto = "1" Then
              resto = "R"
            Else
              resto = ""
            Endif
            bretro = rtck!retro
            Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisEntTck") & " (caisse, numero, date, client, scheque, mcheque, scarte, mcarte, sespeces, mespeces, scredit, mcredit, mht, mtva, mttc, savoir, scavoir, mavoir, vendeur, carte, points, sresto, mresto, nom, suppr, control, type, retro, prev_numero) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18}, &{19}, &{20}, &{21}, &{22}, &{23}, &{24}, &{25}, &{26}, &{27}, &{28}, &{29})", rtck!caisse, rtck!numero, rtck!date, rtck!client, rtck!scheque, rtck!mcheque, rtck!scarte, rtck!mcarte, rtck!sespeces, rtck!mespeces, rtck!scredit, rtck!mcredit, rtck!mht, rtck!mtva, rtck!mttc, rtck!savoir, rtck!scavoir, rtck!mavoir, rtck!vendeur, rtck!carte, rtck!points, rtck!sresto, rtck!mresto, rtck!nom, rtck!suppr, rtck!control, rtck!type, rtck!retro, rtck!prev_numero)
            If Jnl Then
              ' On gère d'abord les clients caisse
              If rTck!type = "0" Then
                Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisEntTck") & " (caisse, numero, date, client, scheque, mcheque, scarte, mcarte, sespeces, mespeces, scredit, mcredit, mht, mtva, mttc, savoir, scavoir, mavoir, vendeur, carte, points, sresto, mresto, nom, suppr) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18}, &{19}, &{20}, &{21}, &{22}, &{23}, &{24}, &{25})", rtck!caisse, rtck!numero, rtck!date, client, rtck!scheque, rtck!mcheque, rtck!scarte, rtck!mcarte, rtck!sespeces, rtck!mespeces, rtck!scredit, rtck!mcredit, rtck!mht, rtck!mtva, rtck!mttc, rtck!savoir, rtck!scavoir, rtck!mavoir, rtck!vendeur, rtck!carte, rtck!points, resto, rtck!mresto, Null, rtck!suppr)
                rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", client)
                If rResult.Available Then
                  ivente = rResult!intitule_cc
                Endif
                'On ajoute un header au ticket supprimé au cas our
                If rTck!suppr Then
                  Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisLigTck") & " (numero, numlig, intitule, type) VALUES (&1, &2, &3, &4)", rTck!numero, "000", "Ticket supprimé!", "C")
                Endif
                If Not IsNull(rTck!mttc) And Not rTck!suppr Then
                  'Print "Caisse " & rTck!numero & " " & Client & " " & ivente & " " & rTck!mttc
                  If rTck!savoir = "1" Then
                    Maj_Totalisation(Client, ivente, "-" & rTck!mttc)
                  Else
                    Maj_Totalisation(Client, ivente, rTck!mttc)
                  Endif
                Endif
                
                'On conserve l'historique des BL selectionné dans le ticket meme si le ticket est supprime
                rlTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigTck") & " where numero = &1 order by lInd", rTck!numero)
                If rlTck.Available Then
                  rltck.MoveFirst
                  Repeat
                    
                    If rlTck!type = "BL" Then
                      Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisLigTck") & " (numero, numlig, code, intitule, montant, qte, type, fam, mht, mrem, tva) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11})", rltck!numero, rltck!numlig, rlTck!code, rlTck!intitule, rltck!montant, rlTck!qte, rltck!type, Fam, rltck!mht, Format$(rlTck!mrem, "000000"), rltck!tva)
                    Else
                      Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisLigTck") & " (numero, numlig, code, intitule, montant, qte, type, fam, mht, mrem, tva) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11})", rltck!numero, rltck!numlig, rltck!code, rlTck!intitule, rltck!montant, rltck!qte, rltck!type, rlTck!fam, rltck!mht, rltck!mrem, rltck!tva)
                    Endif
                  Until rlTck.MoveNext()
                Endif
                
                'Traitement des lignes du ticket
                rlTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigTck") & " where numero = &1 order by lInd", rTck!numero)
                If rlTck.Available Then
                  rltck.MoveFirst
                  Repeat
                    If rlTck!type = "BL" Then
                      'rlTck!mrem est utilisé pour récupéré le numéro de Bl
                      Bl = Utils.db.Exec(" select * from " & Cbase.Table("TabBl") & " where type = \"B\" and numtick = &1 and numbl = &2", rlTck!numero, Format$(rlTck!mrem, "000000"))
                      If Bl.Available And Not rTck!suppr Then
                        'aucun mouvement specifique n'est a inscrire pour le BL, le BL passe cependant en type facture et déclaré règlé et imprimé
                        'On met a jour la totalisation pour la TVA et HT pour chaque ligne du BL
                        lBl = Utils.db.Exec(" select * from " & Cbase.Table("TabLigbl") & " where num_ligbl = &1 and typel_ligbl = \"A\"", Format$(rlTck!mrem, "000000"))
                        If lBl.Available Then
                          Repeat
                            rFam = Utils.db.Exec(" select * from " & Cbase.Table("TabArt") & " where art_code = &1", lBl!code_ligbl)
                            Fam = rFam!art_fam
                            rDep = Utils.db.Exec("SELECT * FROM Fiches_Caisses where code = &1", rtck!caisse)
                            If rDep.Available Then $depot = rdep!depot
                            rcpt = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabFam") & " where code_fam = &1", Fam)
                            If rcpt.Available Then
                              If Not bretro Then
                                vente = rcpt!compt_fam
                              Else
                                vente = rcpt!compt5_fam
                              Endif

                              If Not IsNull($depot) Then
                                rDep = Utils.db.Exec("SELECT * FROM Fiches_FamDep where fam = &1 and depot = &2", Fam, $depot)
                                If rDep.Available Then vente = rDep!compte
                              Endif
                              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", vente)
                              If rResult.Available Then
                                ivente = rResult!intitule_cc
                              Endif
                              montant = Val(.cpoint(lBl!netht_ligbl))
                              'on met a jour le HT
                              Maj_Totalisation(vente, ivente, montant)

                              tva = lBl!tx_ligbl
                              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabTvav") & " Where code_tva = &1", tva)
                              If rResult.Available Then
                                tva = rResult!cc_tva
                              Endif
                              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", tva)
                              If rResult.Available Then
                                itva = rResult!intitule_cc
                              Endif
                              'on met a jour la TVA
                              montant = Val(.cpoint(lBl!nettc_ligbl)) - Val(.cpoint(lBl!netht_ligbl))
                              Maj_Totalisation(Tva, iTva, montant)
                            Endif
                          Until lBl.MoveNext()
                        Endif
                      Else
                        'Le message de warning n'a du sens que si le ticket n'est pas supprime
                        If Not rTck!suppr Then Message.Warning("Le BL " & Format$(rlTck!mrem, "000000") & " est noté règlé dans le ticket " & rlTck!numero & " mais n'est pas associé a ce ticket, il sera ignoré")
                      Endif
                    Else
                      If rlTck!type = "A" Or If rlTck!type = "M" Or If rlTck!type = "S" Or If rlTck!type = "T" Or If rlTck!type = "L" Or If rlTck!type = "C" Then
                        If rlTck!type = "A" And IsNull(rlTck!fam) Then
                          rFam = Utils.db.Exec(" select * from " & Cbase.Table("TabArt") & " where art_code = &1", rltck!code)
                          Fam = rFam!art_fam
                          code = rlTck!code
                          qte = rlTck!qte
                        Else
                          Fam = rlTck!fam
                          code = rlTck!code
                          qte = rlTck!qte
                        Endif
                        If IsNull(Fam) Then Fam = rlTck!fam
                        If Not IsNull(rTck!suppr) And rlTck!type = "A" Then $intit = rlTck!intitule
                        If rlTck.Index < rlTck.count - 1 Then
                          $intit = rlTck!intitule
                          inda = rlTck.Index
                          Repeat
                            rlTck.MoveNext()
                          Until rlTck!type <> "O"
                          If rlTck!type <> "S" Then
                            rlTck.MoveTo(inda)
                          Endif
                        Endif
                        If rlTck!type <> "L" And If rlTck!type <> "M" And If rlTck!type <> "C" Then
                          rDep = Utils.db.Exec("SELECT * FROM Fiches_Caisses where code = &1", rtck!caisse)
                          If rDep.Available Then $depot = rdep!depot
                          rcpt = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabFam") & " where code_fam = &1", Fam)
                          If rcpt.Available Then
                            If Not bretro Then
                              vente = rcpt!compt_fam
                            Else
                              vente = rcpt!compt5_fam
                            Endif
                            If Not IsNull($depot) Then
                              rDep = Utils.db.Exec("SELECT * FROM Fiches_FamDep where fam = &1 and depot = &2", Fam, $depot)
                              If rDep.Available Then vente = rDep!compte
                            Endif
                            rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", vente)
                            If rResult.Available Then
                              ivente = rResult!intitule_cc
                            Endif
                            montant = Val(.cpoint(rlTck!mht))
                            If Not rTck!suppr Then
                              If rlTck!type <> "T" Then
                                If rTck!savoir = "1" Then
                                  Maj_Totalisation(vente, ivente, "-" & montant)
                                Else
                                  Maj_Totalisation(vente, ivente, montant)
                                Endif
                              Endif
                            Endif
                            tva = rcpt!cdtva_fam
                            rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabTvav") & " Where code_tva = &1", tva)
                            If rResult.Available Then
                              tva = rResult!cc_tva
                            Endif
                            rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", tva)
                            If rResult.Available Then
                              itva = rResult!intitule_cc
                            Endif
                            rlTck2 = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigTck") & " where numero = &1 and type = &2 and numlig = &3", rTck!numero, "T", rlTck!numlig, rlTck!code, rlTck!block)
                            If rlTck2.Available Then
                              montant = Val(.cpoint(rlTck2!mtva))
                            Else
                              rlTck2 = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigTck") & " where numero = &1 and type = &2 and numlig = &3", rTck!numero, "M", rlTck!numlig, rlTck!code, rlTck!block)
                              If rlTck2.Available Then
                                montant = Val(.cpoint(rlTck2!mtva))
                              Else
                                montant = Val(.cpoint(rlTck!mtva))
                              Endif
                            Endif
                          Endif
                          If IsNull(montant) Then montant = 0
                        Endif
                        If Not rTck!suppr Then
                          If rTck!savoir = "1" Then
                            If rlTck!type <> "T" And rlTck!type <> "L" And If rlTck!type <> "M" And If rlTck!type <> "C" Then Maj_Totalisation(Tva, iTva, "-" & montant)
                          Else
                            If rlTck!type <> "T" And rlTck!type <> "L" And If rlTck!type <> "M" And If rlTck!type <> "C" Then Maj_Totalisation(Tva, iTva, montant)
                          Endif
                        Endif
                        'ne pas decommenter on garde les totaux, et pb potentiel si le ticket
                        'se termine par une remise ou un article unique et qu'il n'y a pas de ligne de règlement (ex ticket supprimé)
                        'If rlTck!type = "S" Or rlTck!type = "A" Then
                        '  rlTck.MoveNext()
                        'Endif
                      Endif
                    Endif
                    If rlTck!type = "RA" And Not rTck!suppr Then
                      'Ticket avec un règlement par acompte
                      Message.Info("Reglement acompte")
                    Endif
                    If (rlTck!type = "EH" Or rlTck!type = "SH") Then
                      'Ticket avec une entree ou sortie exceptionnelle de caisse
                      'on garde l'historique du ticket tel quel
                      Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisLigTck") & " (numero, numlig, code, intitule, montant, qte, type, fam, mht, mrem, tva) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11})", rltck!numero, rltck!numlig, rlTck!code, rlTck!intitule, rltck!montant, rltck!qte, rltck!type, rlTck!fam, rltck!mht, rltck!mrem, rltck!tva)
                      If rlTck!type = "SH" Then
                        vente = "658000"
                      Else
                        vente = "758000"
                      Endif
                      rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", vente)
                      If rResult.Available Then
                        ivente = rResult!intitule_cc
                      Endif
                      montant = Val(.cpoint(rlTck!mht)) 'HT = TTC
                      If Not rTck!suppr Then
                        Maj_Totalisation(vente, ivente, montant)
                      Endif
                      'Message.Info("Hello")
                    Endif
                  Until rlTck.MoveNext()
                Endif

                'On regroupe les BL règlés dans ce ticket pour chaque client concerné afin de générer une facture
                Bl = Utils.db.Exec(" select cdclibl from " & Cbase.Table("TabBl") & " where type = \"B\" and numtick = &1 group by cdclibl", rtck!numero)
                'On utilise la date du ticket comme date du reglement du bl et de facturation.
                Date_Bl = LDate(rtck!date).G
                If Bl.Available And Not rTck!suppr Then
                  'on regroupe tous les BLs du meme clients pour le meme numero de ticket pour la generation de facture
                  numbon = Val(numbon) + 1
                  numbon = Format$(numbon, "000000")
                  RegroupBL.Ent_Bl(Bl!cdclibl, numbon, False, rtck!numero, Date_Bl)
                  Blg = Utils.db.Exec(" select * from " & Cbase.Table("TabBl") & " where type = \"B\" and numbl = &1", numbon)
                  If Blg.Available
                    'recuperation et maj du n° facture
                    respar = Utils.db.Exec("SELECT * FROM Fiches_Parametres")
                    If (respar!nfac <> 0)
                      snfac = Str(Format$(Now, "yymm")) & Format(Val(respar!dnfac) + 1, "000000")
                    Else
                      snfac = Str(Format$(Now, "yyyy")) & Format(Val(respar!dnfac) + 1, "000000")
                    Endif
                    dnfac = Format(Val(respar!dnfac) + 1, "000000")
                    utils.db.Exec("UPDATE Fiches_Parametres set dnfac = &1", dnfac)
                    Utils.db.Exec("UPDATE " & Cbase.Table("TabBl") & " set type = \"F\", numtick = NULL, imp = 1, reg = \"Caisse\", mtreg = &2, numfac = &3, dtefac = &4, ech = &4 where numbl = &1", numbon, Blg!totalttc, snfac, LDate(Date_Bl).DT)
                    'On genere les Mvt pour le clients
                    If Blg!totalttc < 0 Then
                      bl_cli_credit = 0
                      bl_cli_debit = Abs(Blg!totalttc)
                    Else
                      bl_cli_credit = Blg!totalttc
                      bl_cli_debit = 0
                    Endif
                    Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnl, numr, Blg!cdclibl, "Reglement BL Caisse", Utils.Cdate_Dbase(Datem), snfac, snfac, Left$("Facture " & Blg!nmclibl, 30), bl_cli_debit, bl_cli_credit, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
                    Sha1Calc.CalcSha1("Fiches_Mvt", numr)
                    Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnl, numr, Client, "Reglement BL Caisse", Utils.Cdate_Dbase(Datem), snfac, snfac, Left$("Facture " & Blg!nmclibl, 30), bl_cli_credit, bl_cli_debit, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
                    Sha1Calc.CalcSha1("Fiches_Mvt", numr)
                    numr = numr + 1
                    numr2 = numr2 + 1
                    Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Blg!cdclibl, "Reglement BL Caisse", Utils.Cdate_Dbase(Datem), snfac, snfac, Left$("Rglt Caisse Facture " & Blg!nmclibl, 30), bl_cli_credit, bl_cli_debit, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
                    Sha1Calc.CalcSha1("Fiches_Mvt", numr)
                    Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, "Reglement BL Caisse", Utils.Cdate_Dbase(Datem), snfac, snfac, Left$("Rglt Caisse Facture " & Blg!nmclibl, 30), bl_cli_debit, bl_cli_credit, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
                    Sha1Calc.CalcSha1("Fiches_Mvt", numr)
                    'on incremente le numero d'ecriture pour la suite des Mvt
                    numr = numr + 1
                    numr2 = numr2 + 1
                  Else
                    res = utils.db.Exec("SELECT cli_nom FROM Fiches_Cli WHERE cli_code=&1", Bl!cdclibl)
                    Message.Warning("Le BL " & numbon & " du client " & res!cli_nom & " est inexistant le regroupement de BL n'a pas fonctionné")
                  Endif
                Endif

              Endif
              'Puis on gère les clients en compte
              scli = rTck!client
              'On garde une trace du ticket meme supprimé
              If rTck!type = "1" Then
                Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisEntTck") & " (caisse, numero, date, client, scheque, mcheque, scarte, mcarte, sespeces, mespeces, scredit, mcredit, mht, mtva, mttc, savoir, scavoir, mavoir, vendeur, carte, points, sresto, mresto, nom, suppr) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18}, &{19}, &{20}, &{21}, &{22}, &{23}, &{24}, &{25})", rtck!caisse, rtck!numero, rtck!date, rtck!client, Null, Null, Null, Null, Null, Null, Null, Null, rtck!mht, rtck!mtva, rtck!mttc, Null, Null, Null, rtck!vendeur, rtck!carte, rtck!points, Null, Null, rtck!nom, rtck!suppr)
                If rTck!suppr Then
                  numlig = 0
                  Inc numlig
                  nmlig = Format$(Str(numlig), "0000")
                  Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisLigTck") & " (numero, numlig, intitule, type) VALUES (&1, &2, &3, &4)", rTck!numero, nmlig, "Ticket non enregistré sur BL car supprimé!", "C")
                  rlTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigTck") & " where numero = &1 order by lInd", rTck!numero)
                  If rlTck.Available Then
                    Repeat
                      ' On conserve l'historique du ticket client compte meme supprimé au meme format que les tickets caisse
                      Inc numlig
                      nmlig = Format$(Str(numlig), "0000")
                      'on garde l'historique du ticket tel quel
                      Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisLigTck") & " (numero, numlig, code, intitule, montant, qte, type, fam, mht, mrem, tva) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11})", rltck!numero, rltck!numlig, code, $intit, rltck!montant, rltck!qte, rltck!type, Fam, rltck!mht, rltck!mrem, rltck!tva)
                    Until rlTck.MoveNext()
                  Endif
                Else
                'Si le ticket n'est pas supprimé
                  'On increment le numero de bon
                  numbon = Val(numbon) + 1
                  numbon = Format$(numbon, "000000")
                  numlig = 0
                  rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabCli") & " Where cli_code = &1", scli)
                  If rResult.Available Then
                    cvclibl = rResult!cli_rs_soc
                    nmclibl = rResult!cli_nom
                    pnmclibl = rResult!cli_pnm
                    adr1bl = rResult!cli_adr1
                    adr2bl = rResult!cli_adr2
                    cpbl = rResult!cli_cd_ptl
                    villebl = rResult!cli_ville
                    typec = rResult!cli_typec
                    artrm = rResult!cli_rart
                    rmobl = rResult!cli_rmo
                    Exo = rResult!cli_exo
                  Endif
                  Remart = "0.00"
                  totalht = 0
                  totalttc = 0
                  mrg = 0
                  'On met à jour le fichier des entetes de bl
                  Utils.db.Exec("INSERT INTO " & Cbase.Table("TabBl") & "(numbl,datebl,cdclibl, nmclibl, rmobl, rartbl, type, pnmclibl, adr1bl, adr2bl, cpbl, villebl, exobl, cvclibl, tvar, imp, acpt, mreg, totalht, totalttc, retro, marge_art, remmobl, remartbl, marge_mo) VALUES (&1,&2,&3,&4,&5,&6,&7,&8,&9,&{10},&{11},&{12},&{13},&{14},&{15}, &{16}, &{17}, &{18}, &{19}, &{20}, &{21}, &{22}, &{23}, &{24}, &{25})", numbon, LDate(rTck!date).DT, scli, nmclibl, rmobl, Artrm, "B", Pnmclibl, adr1bl, adr2bl, cpbl, villebl, Exo, Cvclibl, 0, 0, 0, "", .PointBase(totalht), .PointBase(totalttc), 0, 0, 0, 0, 0)
                  'On met à jour les lignes de bl
                  Inc numlig
                  nmlig = Format$(Str(numlig), "0000")
                  Bloc = nmlig
                  origine = "Ticket de caisse numéro " & rTck!numero & " du " & LDate(rTck!date).LT
                  Utils.db.Exec("INSERT INTO " & Cbase.Table("TabLigbl") & " (num_ligbl, numlig_ligbl, com_ligbl, typel_ligbl, block_ligbl, dte_ligbl) VALUES (&1, &2, &3, &4, &5, &6)", numbon, nmlig, origine, "C", Bloc, LDate(rTck!date).DT)
                  Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisLigTck") & " (numero, numlig, intitule, type) VALUES (&1, &2, &3, &4)", rTck!numero, Right(nmlig, 3), "Ticket enregistré sur le BL: " & numbon, "C")
                  rlTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigTck") & " where numero = &1 order by lInd", rTck!numero)
                  If rlTck.Available Then
                    Repeat
                      ' On conserve l'historique du ticket client compte au meme format que les tickets caisse
                      'TODO 3.69 rajouter la ligne mtva
                      Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisLigTck") & " (numero, numlig, code, intitule, montant, qte, type, fam, mht, mrem, tva) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11})", rltck!numero, Right(nmlig, 3), rlTck!code, rltck!intitule, rltck!montant, rltck!qte, rltck!type, rltck!fam, rltck!mht, rltck!mrem, rltck!tva)
                      If rlTck!type = "A" Then
                        rlTck.MoveNext
                        If rlTck!type = "O" Then rlTck.MoveNext
                        If rlTck!type <> "S" Then
                          rlTck.MovePrevious
                          If rlTck!type = "O" Then rlTck.MovePrevious
                        Endif
                        qte = rlTck!qte
                        Recup_Art(rlTck!code, qte, rlTck!mht, rlTck!montant, rlTck!mtva)
                        Inc numlig
                        nmlig = Format$(Str(numlig), "0000")
                        Bloc = nmlig
                        Remart = Val(.cpoint(Remart)) + Val(.cpoint(artbrut)) - Val(.cpoint(artnet))
                        totalht = totalht + Val(.cpoint(artnet))
                        totalttc = totalttc + Val(.cpoint(Arttc))
                        'mrg += rltck!marge 'TODO la marge n'est pas dispo sur la ligne en caisse, il faut faire le calcul ici si besoin
                        'on enregistre la ligne du Bl
                        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabLigbl") & "(num_ligbl, numlig_ligbl,code_ligbl, libel_ligbl, fam_ligbl, pu_ligbl, qte_ligbl, brut_ligbl, rem_ligbl, netht_ligbl, tx_ligbl, nettc_ligbl, typel_ligbl, dec_ligbl, block_ligbl, mrgart_ligbl, dte_ligbl) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", numbon, nmlig, rlTck!code, artdsg, artfam, artpu, qte, artbrut, Artrm, artnet, Arttx, Arttc, "A", Nbd, Bloc, "", LDate(rTck!date).DT) ' TODO calul marge
                        If rlTck!type = "S" Then
                          rlTck.MovePrevious
                          If rlTck!type = "O" Then rlTck.MovePrevious
                        Endif
                      Endif
                      If rlTck!type = "O" Then
                        'Eco participation
                        If rlTck!intitule = " Dont Eco-taxe" Then
                          Inc numlig
                          nmlig = Format$(Str(numlig), "0000")
                          totalht = totalht + Val(.cpoint(rlTck!montant))
                          totalttc = totalttc + Val(.cpoint(rlTck!montant))
                          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabLigbl") & "(num_ligbl, numlig_ligbl,code_ligbl, libel_ligbl, fam_ligbl, pu_ligbl, qte_ligbl, brut_ligbl, rem_ligbl, netht_ligbl, tx_ligbl, nettc_ligbl, typel_ligbl, dec_ligbl, block_ligbl) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15})", numbon, nmlig, rlTck!code, rlTck!intitule, "", Format$(Val(rlTck!montant), "0.00"), "1", Format$(Val(rlTck!montant), "0.00"), 0, Format$(Val(rlTck!montant), "0.00"), Arttx, Format$(Val(rlTck!montant), "0.00"), "E", "0", Bloc)
                        Endif
                      Endif
                      If rlTck!type = "C" Then
                        Inc numlig
                        nmlig = Format$(Str(numlig), "0000")
                        Bloc = nmlig
                        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabLigbl") & " (num_ligbl, numlig_ligbl, com_ligbl, typel_ligbl, block_ligbl) VALUES (&1, &2, &3, &4, &5)", numbon, nmlig, rlTck!intitule, "C", Bloc)
                      Endif
                    Until rlTck.MoveNext()
                    Utils.db.Exec("UPdate  " & Cbase.Table("TabBl") & "  SET marge_art = &2, remartbl = &3, totalht = &4, totalttc = &5 where numbl = &1", numbon, mrg, Remart, totalht, totalttc)
                  Endif
                Endif
              Endif
            Endif

next_ticket:

          Until rTck.MoveNext()
          
          If Verif() = True Then
            Verif_Caisse = Maj_Compta()
            Maj_Tresorerie(Verif_Caisse)
            RegroupBL.Maj_Parametres(numbon)
            'Génération de la facture
            genfac()
            Utils.db.Exec("UNLOCK TABLES")
            'On recalcule les soldes
            'Csolde.Recalc_solde()
            'On imprime le livre de caisse pour toute les caisses
            Livre_caisse(Null, "V", False, LDate(DateChooser1.Value), "A4")
            'On efface les Tables
            rTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where DATE(date) = &1 and statut = &2", LDate(DateChooser1.Value).D, "V")
            If rTck.Available Then
              Repeat
                Utils.db.Exec("delete FROM " & Cbase.Table("TabEntTck") & " where numero = &1", rTck!numero)
                Utils.db.Exec("delete FROM " & Cbase.Table("TabLigTck") & " where numero = &1", rTck!numero)
              Until rTck.MoveNext()
            Endif
            Me.mouse = Mouse.Default
            If start.son Then Music.Play
            Message.Info("Traitement terminé !")
          Else
            Utils.db.Exec("UNLOCK TABLES")
            Me.mouse = Mouse.Default
            If start.son Then Music.Play
            Message.Info("Vous avez interrompu le processus de moulinage suite a un controle de ventilation!\nVous devez restaurer la sauvegarde\n " & User.home & "/Sauve/" & Utils.db.Name & ".sql" & Format$(Now, "yyyymmdd") & "\nPuis faire suivre votre sauvegarde sur le forum pour analyse par les développeurs\net ne plus pratiquer de nouveau moulinage avant correction")
          Endif
        Else
          If start.son Then Music.Play
          Message.Info("Aucune donnée n'est a traiter pour cette sélection !")
        Endif
      Endif
    Else
      If start.son Then Music.Play
      Message.Info("Aucune donnée n'est a traiter pour cette sélection !")
    Endif
  End With
  Me.Mouse = mouse.Default
  
  Catch
    Utils.db.Exec("UNLOCK TABLES")
    If Start.son Then
      Music.Play
    Endif
    If Object.IsValid(rTck)
      If rTck.Available Then msg_err = "Ticket " & rTck!numero Else msg_err = "Ticket " & "inconnu"
    Else
      msg_err = "Ticket " & "invalid"
    Endif
    If Object.IsValid(rlTck)
      If rlTck.Available Then msg_err = msg_err & " Ligne " & rlTck!numlig Else msg_err = msg_err & " Ligne " & "inconnue"
    Else
      msg_err = msg_err & " Ligne " & "invalid"
    Endif
    message.Error(Error.Text & " " & Error.where & "\n\nErreur Fatal au moulinage!!\n" & msg_err & "\nVous devez restaurer la sauvegarde\n " & User.home & "/Sauve/" & Utils.db.Name & ".sql" & Format$(Now, "yyyymmdd") & "\nPuis faire suivre votre sauvegarde sur le forum pour analyse par les développeurs\net ne plus pratiquer de nouveau moulinage avant correction")
    Me.Mouse = Mouse.Default

End


Public Sub Button4_Click()

  Controle_Moulinage()

End


Public Sub Controle_Moulinage() As Boolean

  Dim rTck As Result
  Dim rlTck As Result
  Dim rVent As Result
  Dim rMvt As Result
  Dim rcpt As Result
  Dim rResult As Result
  Dim rFam, rDep As Result
  Dim vente As String
  Dim ivente As String
  Dim tva As String
  Dim itva As String
  Dim montant As String
  Dim Datec As Date
  Dim code As String
  Dim totalht As Float
  Dim totalttc As Float
  Dim solde As Float
  Dim verif As Float
  Dim $intit, resto, Fam, $depot As String
  Dim bretro As Boolean
  Dim genecr As Boolean = False
  
  Datem = Format$(DateChooser1.Value, "dd.mm.yyyy")
  Datec = DateChooser1.Value
  'On reinitialise les tables temporaire de ventilation et de virement interne
  Virements()
  Ventilation()
  
  With utils
    rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabJour") & " where code_jo = &1", Jnal)
    If rResult.Available Then CptCaisse = rResult!cde_banque
    rResult = Utils.db.Exec("SELECT * FROM Fiches_ClientCaisse ")
    If rResult.Available Then
      client = rResult!code
    Endif
 
    'On recherche dans les factures non archivées
    rTck = Utils.db.Exec("SELECT * From " & Cbase.Table("TabBl") & " where left(dtefac, 10) = &1 and type = &2 and reg = &3", Format$(DateChooser1.Value, "yyyy-mm-dd"), "F", "Caisse")
    If rTck.Available Then
      Repeat
        rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", client)
        If rResult.Available Then
          ivente = rResult!intitule_cc
        Endif
        'Print "Facture non Archivee " & rTck!numbl & " " & Client & " " & ivente & " " & rTck!totalttc
        Maj_Totalisation(Client, ivente, rTck!totalttc)
        
        bretro = rtck!retro
        rlTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigbl") & " where num_ligbl = &1 and typel_ligbl = &2 order by numlig_ligbl asc", rTck!numbl, "A")
        If rlTck.Available Then
          Repeat
            'On recupére la Famille de l'article
            If IsNull(rlTck!fam_ligbl) Then
              rFam = Utils.db.Exec(" select * from " & Cbase.Table("TabArt") & " where art_code = &1", rltck!code_ligbl)
              Fam = rFam!art_fam
              code = rlTck!code_ligbl
              qte = rlTck!qte_ligbl
            Else
              Fam = rlTck!fam_ligbl
              code = rlTck!code_ligbl
              qte = rlTck!qte_ligbl
            Endif
            If IsNull(Fam) Then Fam = rlTck!fam
            $intit = rlTck!libel_ligbl

            'Helas pas de support de dépot dans le contrôle car on a perdu la caisse originale dans le règlement de BL en caisse
            'rDep = Utils.db.Exec("SELECT * FROM Fiches_Caisses where code = &1", rtck!caisse)
            'If rDep.Available Then $depot = rdep!depot
            rcpt = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabFam") & " where code_fam = &1", Fam)
            If rcpt.Available Then
              If Not bretro Then
                vente = rcpt!compt_fam
              Else
                vente = rcpt!compt5_fam
              Endif
              'If Not IsNull($depot) Then
              '  rDep = Utils.db.Exec("SELECT * FROM Fiches_FamDep where fam = &1 and depot = &2", Fam, $depot)
              '  If rDep.Available Then vente = rDep!compte
              'Endif
              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", vente)
              If rResult.Available Then
                ivente = rResult!intitule_cc
              Endif
              montant = Val(.cpoint(rlTck!netht_ligbl))
              Maj_Totalisation(vente, ivente, montant)
              tva = rcpt!cdtva_fam
              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabTvav") & " Where code_tva = &1", tva)
              If rResult.Available Then
                tva = rResult!cc_tva
              Endif
              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", tva)
              If rResult.Available Then
                itva = rResult!intitule_cc
              Endif
              montant = Val(.cpoint(rlTck!nettc_ligbl)) - Val(.cpoint(rlTck!netht_ligbl))
              If IsNull(montant) Then montant = 0
              Maj_Totalisation(Tva, iTva, montant)
            Endif
          Until rlTck.MoveNext()
        Endif
      Until rTck.MoveNext()
    Endif
    
    
    'On recherche dans les factures archivées (!Be carefull cut and paste of above, cannot be merged easily because field naming are totally different :-( )
    'Facture de caisse ou BL règlés en caisse puis archivés
    rTck = Utils.db.Exec("SELECT * From " & Cbase.Table("TabHisFac") & " where left(datefac, 10) = &1 and (reg = &2 or cdclifac = &3)", Format$(DateChooser1.Value, "yyyy-mm-dd"), "Caisse", client)
    If rTck.Available Then
      Repeat
        rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", client)
        If rResult.Available Then
          ivente = rResult!intitule_cc
        Endif
        'Print "Facture Archivee " & rTck!numfac & " " & Client & " " & ivente & " " & rTck!totfacttc
        Maj_Totalisation(Client, ivente, rTck!totfacttc)
        
        bretro = False 'bretro = rtck!retro 'TODO 3.69 remettre un champ retrocession dans les factures archivees
        rlTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabHisLigFac") & " where num_ligfac = &1 and typel_ligfac = &2 order by numlig_ligfac asc", rTck!numfac, "A")
        If rlTck.Available Then
          Repeat
            'On recupére la Famille de l'article
            If IsNull(rlTck!fam_ligfac) Then
              rFam = Utils.db.Exec(" select * from " & Cbase.Table("TabArt") & " where art_code = &1", rltck!code_ligfac)
              Fam = rFam!art_fam
              code = rlTck!code_ligfac
              qte = rlTck!qte_ligfac
            Else
              Fam = rlTck!fam_ligfac
              code = rlTck!code_ligfac
              qte = rlTck!qte_ligfac
            Endif
            If IsNull(Fam) Then Fam = rlTck!fam
            $intit = rlTck!libel_ligfac

            'Helas pas de support de dépot dans le contrôle car on a perdu la caisse originale dans le règlement de BL en caisse
            'rDep = Utils.db.Exec("SELECT * FROM Fiches_Caisses where code = &1", rtck!caisse)
            'If rDep.Available Then $depot = rdep!depot
            rcpt = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabFam") & " where code_fam = &1", Fam)
            If rcpt.Available Then
              If Not bretro Then
                vente = rcpt!compt_fam
              Else
                vente = rcpt!compt5_fam
              Endif
              'If Not IsNull($depot) Then
              '  rDep = Utils.db.Exec("SELECT * FROM Fiches_FamDep where fam = &1 and depot = &2", Fam, $depot)
              '  If rDep.Available Then vente = rDep!compte
              'Endif
              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", vente)
              If rResult.Available Then
                ivente = rResult!intitule_cc
              Endif
              montant = Val(.cpoint(rlTck!netht_ligfac))
              Maj_Totalisation(vente, ivente, montant)
              tva = rcpt!cdtva_fam
              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabTvav") & " Where code_tva = &1", tva)
              If rResult.Available Then
                tva = rResult!cc_tva
              Endif
              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", tva)
              If rResult.Available Then
                itva = rResult!intitule_cc
              Endif
              montant = Val(.cpoint(rlTck!nettc_ligfac)) - Val(.cpoint(rlTck!netht_ligfac))
              If IsNull(montant) Then montant = 0
              Maj_Totalisation(Tva, iTva, montant)
            Endif
          Until rlTck.MoveNext()
        Endif
      Until rTck.MoveNext()
    Endif
    
    'Bug dans la generation de facture caisse (issue d'un bug de caisse) qui ignorais les tickets (hors client compte type = 0) lorsque le compte choisi n'est pas celui de la caisse "411027"
    'TODO A verifier si le bug est corrigé aujourd'hui
    'TODO 3.69 changer les formats de date
    rTck = Utils.db.Exec("SELECT * From " & Cbase.Table("TabHEntTck") & " where left(date, 8) = &1 and (nom is null or (nom is not null and (scheque is not null or scarte is not null or sespeces is not null or scredit is not null or sbachat is not null or scavoir is not null or sbonus is not null or sresto is not null)))  and client != &2", Format$(DateChooser1.Value, "yyyymmdd"), Client)
    If rTck.Available Then
      Repeat
        bretro = False 'bretro = rtck!retro 'TODO 3.69 remettre le champ retrocession dans les historiques ticket archives
        rlTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabHLigTck") & " where numero = &1 and type = &2 order by numlig asc", rTck!numero, "A")
        If rlTck.Available Then
          Repeat
            
            rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", client)
            If rResult.Available Then
              ivente = rResult!intitule_cc
            Endif
            montant = Val(.cpoint(rlTck!montant)) * Val(.cpoint(rlTck!qte))
            'Print "Article caisse oublié dans la facture caisse " & rTck!numero & " " & Client & " " & ivente & " " & montant
            Maj_Totalisation(Client, ivente, montant)
        
            'On recupére la Famille de l'article
            If IsNull(rlTck!fam) Then
              rFam = Utils.db.Exec(" select * from " & Cbase.Table("TabArt") & " where art_code = &1", rltck!code)
              Fam = rFam!art_fam
              code = rlTck!code
              qte = rlTck!qte
            Else
              Fam = rlTck!fam
              code = rlTck!code
              qte = rlTck!qte
            Endif
            If IsNull(Fam) Then Fam = rlTck!fam
            $intit = rlTck!intitule

            rDep = Utils.db.Exec("SELECT * FROM Fiches_Caisses where code = &1", rtck!caisse)
            If rDep.Available Then $depot = rdep!depot
            rcpt = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabFam") & " where code_fam = &1", Fam)
            If rcpt.Available Then
              If Not bretro Then
                vente = rcpt!compt_fam
              Else
                vente = rcpt!compt5_fam
              Endif
              If Not IsNull($depot) Then
                rDep = Utils.db.Exec("SELECT * FROM Fiches_FamDep where fam = &1 and depot = &2", Fam, $depot)
                If rDep.Available Then vente = rDep!compte
              Endif
              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", vente)
              If rResult.Available Then
                ivente = rResult!intitule_cc
              Endif
              montant = Val(.cpoint(rlTck!mht))
              Maj_Totalisation(vente, ivente, montant)
              tva = rcpt!cdtva_fam
              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabTvav") & " Where code_tva = &1", tva)
              If rResult.Available Then
                tva = rResult!cc_tva
              Endif
              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", tva)
              If rResult.Available Then
                itva = rResult!intitule_cc
              Endif
              montant = (Val(.cpoint(rlTck!montant)) * Val(.cpoint(rlTck!qte))) - Val(.cpoint(rlTck!mht))
              If IsNull(montant) Then montant = 0
              Maj_Totalisation(Tva, iTva, montant)
            Endif
          Until rlTck.MoveNext()
        Endif
      Until rTck.MoveNext()
    Endif

    rResult = Utils.db.Exec("Select compte, numero, SUM(montantd) as montantd, SUM(montantc) as montantc, COUNT(*) as cnt From Fiches_Mvt where jour = &1 and dte = &2 and compte = &3 and intitule != &4 and libelle like &5 and collectif is null and tresorerie = 0 group by compte", Jnl, Format$(DateChooser1.Value, "yyyy-mm-dd"), client, "Reglement BL Caisse", "Caisse du " & Format$(DateChooser1.Value, "dd.mm.yyyy") & "%")
    If rResult.Available Then
      
      rTck = Utils.db.Exec("SELECT * From " & Cbase.Table("TabHisFac") & " where left(datefac, 10) = &1 and cdclifac = &2", Format$(DateChooser1.Value, "yyyy-mm-dd"), client)
      If rTck.Count > rResult!cnt Then
        Message.Warning("Il y a un nombre de facture caisse sur cette journée (" & rTck.Count & ")\nsupérieur au nombre d'ecriture comptable provenant du moulinage (" & rResult!cnt & ")\nVérifier la cohérence des factures de caisse archivées\nLa vérification du moulinage est impossible!")
        Return False
      Endif
  
      'On verifie le compte client
      rVent = Utils.db.Exec("SELECT * From Totalisation where compte = &1", client)
      If rVent.Available Then
        montant = Val(.cpoint(rResult!montantd))
        totalttc = Val(.cpoint(rVent!totalttc))
        solde = Round(montant - totalttc, -2)
        If (solde <> 0) Then
          If Message.Warning("Une différente de " & solde & " apparait entre les \nencaissement et les ventilations ( " & rResult!cnt & " moulinage sur la journée )\nVoulez-vous créer une ecriture de vente à affecter au compte d'erreur 707999", "Oui", "Non") = 1 Then
            ' On verifie que les deux comptes d'erreur existent
            rcpt = Utils.db.Exec("SELECT * From " & Cbase.Table("TabComptes") & " where compte_cc = &1 or compte_cc = &2", "707999", "445999")
            If rcpt.Available And rcpt.Count = 2 Then
              'On prend le taux de TVA pour les erreurs
              rcpt = Utils.db.Exec("SELECT * From " & Cbase.Table("TabTvav") & " where cc_tva = &1", "445999")
              If rcpt.Available Then
                totalht = Round(solde / (1 + (rcpt!taux_tva / 100)), -2)
                tva = Round(solde - totalht, -2)
                'On corrige le solde compte client
                rcpt = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", client)
                If rcpt.Available Then
                  ivente = rcpt!intitule_cc
                Endif
                Maj_Totalisation(client, ivente, solde)
                
                'Maj Totalisation vente en erreur
                rcpt = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", "707999")
                If rcpt.Available Then
                  ivente = rcpt!intitule_cc
                Endif
                Maj_Totalisation("707999", ivente, totalht)
                
                'Maj Totalisation TVA en erreur
                rcpt = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", "445999")
                If rcpt.Available Then
                  iTva = rcpt!intitule_cc
                Endif
                Maj_Totalisation("445999", iTva, tva)
  
              Else
                Message.Warning("Vous devez d'abord créer la code de TVA de vente pour le compte 445999\n(Taux max utilisé pour répondre aux critère fiscaux pour une TVA inconnue)")
                Return False
              Endif
            Else
              Message.Warning("Vous devez d'abord créer le compte 707999 avec l'intitule\"Vente Erreur Ventilation\"\net le compte 445999 avec l'intitule\"TVA Erreur Ventilation\"\n(Taux max utilisé pour répondre aux critère fiscaux pour une TVA inconnue)")
              Return False
            Endif
          Else
            Message.Warning("Vous avez choisi de ne pas générer une ecriture de correction automatique.\nLe compte client caisse " & client & " sera donc non equilibré!\nVous devrez alors faire une écriture manuelle pour solder ce compte.")
          Endif
        Endif

        'On verifie ensuite les ventilations
        rVent = Utils.db.Exec("SELECT * From Totalisation")
        If rVent.Available Then
          Repeat
            'On filtre les ecritures qui provienne du moulinage sur la partie ventilation et correction déjà appliquée
            rResult = Utils.db.Exec("Select compte, numero, SUM(montantd) as montantd, SUM(montantc) as montantc From Fiches_Mvt where jour = &1 and dte = &2 and compte = &3 and intitule != &4 and libelle like &5 and collectif is null and tresorerie = 0 group by compte", Jnl, Format$(DateChooser1.Value, "yyyy-mm-dd"), rVent!compte, "Reglement BL Caisse", "Caisse du " & Format$(DateChooser1.Value, "dd.mm.yyyy") & "%")
            If rResult.Available Then
              If rVent!compte = client Then
                totalttc = Val(.cpoint(rVent!totalttc))
                montant = Val(.cpoint(rResult!montantc)) - Val(.cpoint(rResult!montantd))
                Solde = Round(totalttc + montant, -2)
                verif = Round(verif - Solde, -2)
                Utils.db.Exec("UPDATE Totalisation set totalttc = &1 where compte = &2", Solde, rVent!compte)
              Else
                totalht = Val(.cpoint(rVent!totalht))
                montant = Val(.cpoint(rResult!montantd)) - Val(.cpoint(rResult!montantc))
                Solde = Round(totalht + montant, -2)
                verif = Round(verif + Solde, -2)
                Utils.db.Exec("UPDATE Totalisation set totalht = &1 where compte = &2", Solde, rVent!compte)
              Endif
            Else
              'Message.Warning("Le compte de ventilation " & rVent!compte & " n'existe pas dans l'ecriture originale!")
              Solde = Val(.cpoint(rVent!totalht))
              verif = Round(verif + Solde, -2)
            Endif
            'si le calcul remonte un solde non null pour une ventilation on genere l'ecriture de correction (si bien sur l'ecriture est equilibré voir verif)
            If Solde <> 0 Then genecr = True
          Until rVent.MoveNext()
        Endif
      Else
        Message.Warning("Impossible de trouver un total de ventilation pour le compte " & client & "!")
      Endif
    Else
      Message.Warning("Impossible de trouver une ecriture de caisse pour cette date!")
    Endif
    
    If genecr = False Then
      Message.Info("Contrôle effectué avec succes")
      Return True
    Endif
    
    If Verif <> 0 Then
      Message.Info("La balance de l'ecriture de correction n'est pas nulle (" & verif & "), impossible de corriger ce moulinage")
      Return False
    Endif
    
    'On cree l'ecriture de correction au besoin
    rVent = Utils.db.Exec("SELECT * From Totalisation")
    If rVent.Available Then
      
      numecr = "numecriture"
      numr = Ecritures(numecr)
      numr = numr + 1
      numecr = "numecriture2"
      numr2 = Ecritures(numecr)
      numr2 = numr2 + 1
  
      Repeat
        If rVent!compte = client Then
          montant = Val(.cpoint(rVent!totalttc))
          If montant <> 0 Then
            Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc, validee, provisoire, tresorerie, lettree, Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnl, numr, rVent!compte, "Caisse", Utils.Cdate_Dbase(Datem), Format$(Now, "ddmmyyyy"), Format$(Now, "ddmmyyyy"), Left$("Caisse du " & Format$(DateChooser1.Value, "dd.mm.yyyy") & " Correc.", 30), Round(montant, -2), 0, 1, 0, 0, 0, 0, Utils.Cdate_Dbase(Now), numr2)
            'TODO a recalculer le solde dans la table compte
          Endif
        Else
          montant = Val(.cpoint(rVent!totalht))
          If montant <> 0 Then
            Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc, validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnl, numr, rVent!compte, rVent!intitule, Utils.Cdate_Dbase(Datem), Format$(Now, "ddmmyyyy"), Format$(Now, "ddmmyyyy"), Left$("Caisse du " & Format$(DateChooser1.Value, "dd.mm.yyyy") & " Correc.", 30), 0, Round(montant, -2), 1, 0, 0, 0, 0, Utils.Cdate_Dbase(Now), numr2)
            'TODO a recalculer le solde dans la table compte
          Endif
        Endif
      Until rVent.MoveNext()
      
      Sha1Calc.CalcSha1("Fiches_Mvt", numr)
      Message.Info("Ecriture " & numr & " de correction effectué avec succes")
    Endif
    
  End With
  
  Majnum()
  Return True
  
  Catch
    If Start.son Then
      Music.Play
    Endif

    message.Error(Error.Text & " " & Error.where & "\n\nErreur Fatal lors du controle du moulinage!!\nVous devez faire suivre une sauvegarde sur le forum pour une analyse par les développeurs\n")
    Me.Mouse = Mouse.Default
    Return False

End



Public Sub Recup_Art(code As String, qtea As String, mht As String, mttc As String, tva As String)

  Dim Remtypec As Result
  Dim Rarts As Result
  Dim diffttc As Float
  'Dim prix_ht As String
  'Dim prix_ttc As String

  With utils
    Rarts = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabArt") & " where art_code = &1", Code)
    If Rarts.Available Then
      Artdsg = Rarts!art_design
      Artdsg2 = Rarts!art_design2
      Artfam = Rarts!art_fam
      Nbd = Rarts!art_nbd ' décimale des prix
      Decq = Rarts!art_dec ' décimale des quantités
      Nbdec = .Find_Nbdec(Nbd)
      Paht = Format$(Rarts!art_paht, "0.000")
      Pmp = Rarts!art_pmp
      Artpu = Format$(Rarts!art_pvht, Nbdec)
      Artbrut = Format(Val(Artpu), Nbdec)
      'Article sans prix défini, on utilise le montant défini en caisse
      'Meme chose si le prix de l'article à été modifié depuis la caisse
      If (Val(.cpoint(artpu)) = 0 Or (Artpu <> mht)) Then
        Artbrut = Format(Val(mht), Nbdec)
      Endif
      'Si aucune remise n'est déjà appliqué on regarde si le client beneficie d'une remise pour cette famille
      If IsNull(artrm) Or Val(.CPoint(artrm)) = 0 Then
        Remtypec = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabRemTypec") & " where coder = &1 and codef = &2", Typec, Artfam)
        If RemTypec.Available Then
          Artrm = RemTypec!remise
        Endif
      Endif
      arr = Rarts!art_cdarr
      Arttx = Rarts!art_tva
      Decm = Rarts!art_dec
      Ecot = Rarts!art_eco
      Tcp = Rarts!art_cpp
      Try Rms[0, 0] = Str(Rarts!qte1)
      Try Rms[0, 1] = Str(Rarts!qte2)
      Try Rms[0, 2] = Str(Rarts!rem1)
      Try Rms[1, 0] = Str(Rarts!qte3)
      Try Rms[1, 1] = Str(Rarts!qte4)
      Try Rms[1, 2] = Str(Rarts!rem2)
      Try Rms[2, 0] = Str(Rarts!qte5)
      Try Rms[2, 1] = Str(Rarts!qte6)
      Try Rms[2, 2] = Str(Rarts!rem3)
      Try Rms[3, 0] = Str(Rarts!qte7)
      Try Rms[3, 1] = Str(Rarts!qte8)
      Try Rms[3, 2] = Str(Rarts!rem4)
      Try Rms[4, 0] = Str(Rarts!qte9)
      Try Rms[4, 1] = Str(Rarts!qte10)
      Try Rms[4, 2] = Str(Rarts!rem5)
      Try Rms[5, 0] = Str(Rarts!qte11)
      Try Rms[5, 1] = Str(Rarts!qte12)
      Try Rms[5, 2] = Str(Rarts!rem6)
      If Val(.CPoint(Qtea)) = 0 Then
        Artpu = Artbrut = "0"
      Else
        If ((Val(.cpoint(artpu)) <> 0) And (Artpu = Format$((Val(.CPoint(mht)) / Val(.CPoint(Qtea))), "0.00"))) Then
          Artbrut = Format$(Val(.CPoint(Artpu)) * Val(.CPoint(Qtea)), Nbdec)
        Else
          artpu = Format$(Val(.CPoint(Artbrut)) / Val(.CPoint(Qtea)), Nbdec)
        Endif
      Endif
      Remises_quantitatives()
      Decimal()
      diffttc = Val(.CPoint(Arttc)) - (Val(.CPoint(Qtea)) * Val(.CPoint(mttc)))
      If diffttc > 0 Then 'Le prix ttc calculé pour le bon de caisse du client est supérieur au prix public
        'Ceci peut provenir d'un arrondi de TVA puisque le calcul repars du HT pour faire le calcul ttc
        'au dela de 1 centimes par qte d'article on met un message, en dessous on applique une reduction du prix brut pour correspondre au prix public ttc
        If diffttc > (0.01 * Val(.CPoint(Qtea))) Then
          Message.Warning("Le prix de vente ttc de l'article\n" & Code & " : " & Artdsg & "\nen caisse (" & mttc & ",remise:" & Artrm & "%) et en gestion (" & Arttc & ") sont incoherent\nLe prix en gestion sera utilisé!")
        Else
          Artbrut = Format(Val(.CPoint(Artbrut)) - diffttc, Nbdec)
          Artnet = Format(Val(.CPoint(Artnet)) - diffttc, Nbdec)
          CalcTTC()
        Endif
      Endif

      Calc_Marge()
    Endif

  End With

End

'*****************************************
'* On récupère les remises quantitatives *
'*****************************************
Public Sub Remises_quantitatives()

  Dim i As Integer

  With Utils
    For i = 0 To Rms.Bounds[0] - 1
      If IsNull(Rms[i, 2]) Then
        Break
      Else
        If Val(Utils.cpoint(Qte)) >= Val(.Cpoint(rms[i, 0])) And Val(Utils.cpoint(qte)) <= Val(.Cpoint(rms[i, 1])) Then
          Try Artrm = Val(Artrm) + Val(.Cpoint(Rms[i, 2]))
          If Error Then Artrm = Val(Artrm)
          Break
        Endif
      Endif
    Next
    
    If IsNull(Artrm) Then
      Artnet = Format(Val(Artbrut), Nbdec)
      Calcttc()
    Else
      If Val(Artrm) <> 100 Then
        If Val(Artrm) <> 0 Then
          Artnet = Format$(Val(.CPoint(Artbrut)) - (Val(.CPoint(Artbrut)) * Val(.CPoint(Artrm)) / 100), Nbdec)
        Else
          Artnet = Format(Val(Artbrut), Nbdec)
        Endif
        Calcttc()
      Else
        ArtNet = "0"
        Arttc = "0"
      Endif
    Endif
    
  End With

End

'*********************************
'* Calcul du TTC du produit      *
'*********************************
Public Sub CalcTTC()

  Recup_Tva()
  Arttc = Val(Utils.CPoint(Artnet)) + (Val(Utils.CPoint(Artnet)) * Ttva / 100)
  Arttc = arrondi(Arttc, arr)
  tx = 1 + (Ttva / 100)
  Artnet = Format$(Val(Utils.CPoint(Arttc)) / Tx, Nbdec)
  If Val(Artrm) = 0 Then Artnet = Artbrut

End

'************************
'* Recup de la Tva      *
'************************
Public Sub Recup_Tva()

  Dim hResult As Result

  Ttva = 0
  hResult = Utils.db.Exec("select * from " & Cbase.Table("TabTvav") & " where code_tva = &1 ", Arttx)
  If hResult.Available Then
    Ttva = hResult!taux_tva
  Endif

End

'*********************************
'* Calcul du nombre de decimal   *
'*********************************
Public Sub Decimal()

  With Utils
    qte = .CPoint(qte)
    If Decq = "0" Then
      qte = Format$(Val(qte), "0")
    Else
      If Decq = "2" Then
        qte = Format$(Val(qte), "0.00")
      Else
        If decq = "3" Then
          qte = Format$(Val(qte), "0.000")
        Endif
      Endif
    Endif
  End With

End

'***********************************
'*        On gère l' arrondi       *
'***********************************
Public Sub arrondi(montant As String, arrondi As String) As String

  Try montant = Format$(Val(Utils.CPoint(montant)), "0.00")
  If Not montant Then montant = "0,00"
  If arrondi = "0,05" Then
    If Right$(montant) Like "[34567]*" Then
      montant = Left$(montant, (Len(montant) - 1)) & "5"
    Else
      montant = Round(Val(montant), -1)
    Endif
  Endif

  If arrondi = "0,10" Then
    montant = Round(Val(montant), -1)
  Endif

  If arrondi = "0,50" Then
    If Abs(Val(montant)) <= Abs(Val(Left$(montant, (Len(montant) - 2)) & 25)) Then
      montant = Left$(montant, (Len(montant) - 2)) & "00"
    Else
      If Abs(Val(montant)) <= Abs(Val(Left$(montant, (Len(montant) - 2)) & 75)) Then
        montant = Left$(montant, (Len(montant) - 2)) & "50"
      Endif
      If Abs(Val(montant)) >= Abs(Val(Left$(montant, (Len(montant) - 2)) & 76)) Then
        montant = Round(Val(montant))
      Endif
    Endif
  Endif

  If arrondi = "1,00" Then
    montant = Round(Val(montant))
  Endif

  Return montant

End

Public Sub Calc_Marge()

  Dim rMrg As Result

  With utils
    If Pmp = 0 Then
      rMrg = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabFam") & " WHERE code_fam = &1", ArtFam)
      Try Marge = Val(.cpoint(marge)) + Val(.cpoint(Artnet)) / Val(.cpoint(rMrg!coef_fam))
    Else
      Try Marge = Val(.cpoint(marge)) + Val(.cpoint(Artnet)) - (Pmp * Val(.cpoint(qte)))
    Endif
  End With

End
'**********************************************************
'*      Creation table temporaire pour totalisation       *
'**********************************************************

Public Sub Ventilation()

  Utils.db.Exec("DROP TABLE IF EXISTS  Totalisation ")
  Utils.db.Exec("CREATE TABLE " & Cbase.Table("Totalisation") &
    "(compte Char(8) NOT NULL," &
    "intitule Char(40)," &
    "totalttc Char(25)," &
    "totalht Char(25)," &
    "totaltva Char(25)," &
    "PRIMARY KEY (compte))" & Utils.db.Engine())

End

'**********************************************************
'*  Creation table temporaire pour virements internes     *
'**********************************************************
Public Sub Virements()

  Utils.db.Exec("DROP TABLE IF EXISTS  Virements ")
  Utils.db.Exec("CREATE TABLE " & Tab &
    "(compte Char(8) NOT NULL," &
    "intitule Char(35)," &
    "type Char(1)," &
    "montant Decimal(12,2)," &
    "PRIMARY KEY (compte, type))" & Utils.db.Engine())

End

'*****************************************************
'*  Récuperation du dernier numéro d'écriture        *
'*****************************************************
Public Function Ecritures(numecr2 As String) As String

  Dim Params As Result
  Dim nro As String

  Params = Utils.db.Exec("SELECT " & numecr & " FROM " & Cbase.Table("TabParam") & " ")
  If Params.Available Then
    If IsNull(Params["" & numecr2 & ""]) Then
      nro = 0
    Else
      nro = Params["" & numecr2 & ""]
    Endif
  Endif
  Return nro

End

'************************************************
'*  Mise a jour du dernier numéro d'écriture    *
'************************************************
Public Sub Majnum()

  Utils.db.Exec("UPDATE " & Cbase.Table("TabParam") & " set numecriture = &1, numecriture2 = &2", numr, numr2)

End

'**********************************************************
'*                   Recup parametres                     *
'**********************************************************
Public Sub Parametres()

  Dim rJnl As Result
  Dim rcli As Result
  Dim rcol As Result
  Dim colcpt As String
  'On récupère le journal des ventes
  rJnl = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabParam") & " ")
  If rJnl.Available Then
    Jnl = rJnl!jrnal4
    If IsNull(Jnl) Then Jnl = rJnl!jrnal
    Jnal3 = rJnl!jrnal3
    If IsNull(Jnal3) Then Jnal3 = rJnl!jrnal
  Endif
  'On recupère les données pour la trésorerie.
  If rJnl.Available Then
    Jnal = rJnl!jrnal2
    Vic = rJnl!viremc
    Vichq = rJnl!viremchq
    Viautre = rJnl!virema
  Endif
  rcli = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabCliCaisse") & "")
  If rcli.Available Then
    Client = rcli!code
    Nclient = rcli!nom
  Endif
  rcol = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " where coll = &1 order by cast(compte_cc AS char)", "1")
  If rcol.Available Then
    Repeat
      Colcpt = rcol!compte_cc
      If Left$(Colcpt, 2) = Left$(Client, 2) Then
        collectif = Colcpt
        Break
      Endif
    Until rcol.MoveNext()
  Endif

End

'**********************************************************
'*                   Maj Totalisation                     *
'**********************************************************
Public Sub Maj_Totalisation(cpt As String, intit As String, montant As String)

  Dim hResult As Result
  Dim Mtnt As String

  With utils
    hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("Totalisation") & " Where compte = &1", Cpt)
    'Si le compte existe dans la table temporaire
    If hResult.Available Then
      If Left$(cpt, 3) = "411" Then
        Mtnt = Format$(Val(.cpoint(montant)) + Val(.cpoint(hResult!totalttc)), "0.00")
        Utils.db.Exec("UPDATE " & Cbase.Table("Totalisation") & " set totalttc = &2 Where compte = &1 ", Cpt, mtnt)
      Else
        If Left$(cpt, 3) = "709" Then
          Mtnt = Format$(Val(.cpoint(montant)) + Val(.cpoint(hResult!totalht)), "0.00")
          Utils.db.Exec("UPDATE " & Cbase.Table("Totalisation") & " set totalht = &2 Where compte = &1 ", Cpt, mtnt)
        Else
          Try mtnt = Format$(Val(.cpoint(montant)) + Val(.cpoint(hResult!totalht)), "0.00")
          If Not Error Then Utils.db.Exec("UPDATE " & Cbase.Table("Totalisation") & " set totalht = &2 Where compte = &1 ", Cpt, mtnt)
        Endif
      Endif
    Else
      'Si le compte n'existe pas dans la table temporaire
      If Left(cpt, 3) = "411" Then
        Utils.db.Exec("INSERT INTO " & Cbase.Table("Totalisation") & "(compte, intitule, totalttc) VALUES (&1, &2, &3)", Cpt, intit, montant)
      Else
        If Not IsNull(cpt) Then Utils.db.Exec("INSERT INTO " & Cbase.Table("Totalisation") & "(compte, intitule, totalht) VALUES (&1, &2, &3)", Cpt, intit, montant)
      Endif
    Endif
  End With

End

Public Sub Verif() As Boolean

  Dim hResult As Result
  Dim sCompte As String
  Dim sTotalD As String = "0"
  Dim sTotalC As String = "0"
  Dim sdif As Float

  With utils
    hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("Totalisation") & " order by compte")
    If hResult.Available Then
      Repeat
        If Left$(hResult!compte, 3) = "411" Then
          sTotalD = hResult!totalttc
        Else
          sTotalC = Val(.cpoint(sTotalC)) + Val(.cpoint(hResult!totalht))
          sCompte = hResult!compte
        Endif
      Until hResult.MoveNext()
      hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("Totalisation") & " Where compte = &1", sCompte)
      If hresult.Available Then
        If Val(.cpoint(sTotalD)) < Val(.cpoint(sTotalC)) Then
          sDif = Val(.cpoint(sTotalC)) - Val(.cpoint(sTotalD))
          If (sDif > 0.05) Then
            If Message.Error("Une erreur de ventilation génère une perte de " & sDif & "!\nVoulez vous continuer et enregistrer une ecriture de charge exceptionelle?", "OK", "Annuler") = 2 Then
              Return False
            Endif
          Endif
          Utils.db.Exec("INSERT INTO " & Cbase.Table("Totalisation") & "(compte, intitule, totalttc, totalht) VALUES (&1, &2, &3, &4)", "658000", "Erreur moulinage caisse", sDif, sDif)
        Else
          If Val(.cpoint(sTotalD)) > Val(.cpoint(sTotalC)) Then
            sDif = Val(.cpoint(sTotalD)) - Val(.cpoint(sTotalC))
            'sDif = Val(.cpoint(hResult!totalht)) + sDif
            If (sDif > 0.05) Then
              If Message.Error("Une erreur de ventilation génère un bénéfice de " & sDif & "!\nVoulez vous continuer et enregistrer une ecriture de produit exceptionelle?", "OK", "Annuler") = 2 Then
                Return False
              Endif
            Endif
            Utils.db.Exec("INSERT INTO " & Cbase.Table("Totalisation") & "(compte, intitule, totalttc, totalht) VALUES (&1, &2, &3, &4)", "758000", "Erreur moulinage caisse", sDif, sDif)
          Endif
        Endif
      Endif
    Endif
  End With
  
  Return True

End

'**********************************************************
'*                   Maj comptabilité                     *
'**********************************************************
Public Sub Maj_Compta() As Float

  Dim Cpt As String
  Dim coll As String
  Dim Libel As String
  Dim Mtc As Float
  Dim Mtd As Float
  Dim Sld As Float
  Dim SldTot As Float
  Dim Verif_Caisse As Float
  Dim Valid As Integer
  Dim Prov As Integer
  Dim Tresor As Integer
  Dim Pointee As Integer
  Dim Lettree As Integer
  Dim Cloturee As Integer
  Dim Relance As Integer
  Dim intit As String
  Dim rResult As Result
  Dim hResult As Result
  Dim numlt As String

  Valid = 1
  Prov = 0
  Tresor = 0
  Pointee = 0
  Lettree = 1
  Cloturee = 1
  Relance = 0
  Verif_Caisse = 0
  Datem = Format$(DateChooser1.Value, "dd.mm.yyyy")
  Numlt = Format$(DateChooser1.Value, "ddmmyyyy")
  With Utils
    rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("Totalisation") & "")
    If rResult.Available Then
      Libel = "Caisse du " & Datem
      Repeat
        collectif = ""
        Cpt = rResult!compte
        Intit = rResult!intitule
        If Left$(Cpt, 3) = "411" Then
          hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", Cpt)
          coll = hResult!coll_cc
          collectif = "1"
          Mtd = Val(.cpoint(rResult!totalttc))
          Verif_Caisse = Mtd
          If Mtd < 0 Then
            Mtc = Abs(Mtd)
            Mtd = 0
          Endif
          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, collectif, intitule, dte, libelle, montantd, montantc, validee, provisoire, tresorerie, pointee, lettree, cloturee, relance, numerodef, numdoc, numlot) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18}, &{19})", Jnl, numr, coll, collectif, Intit, .Cdate_Dbase(Datem), Libel, Mtd, Mtc, Valid, Prov, Tresor, Pointee, lettree, Cloturee, Relance, numr2, Numlt, numlt)
          Sha1Calc.CalcSha1("Fiches_Mvt", numr)
          hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", coll)
          If hresult.Available Then
            If hResult!solde = "" Then
              Sld = Mtd - Mtc
            Else
              Sld = hResult!solde + Mtd - Mtc
            Endif
          Endif
          Utils.db.Exec("UPDATE " & Cbase.Table("TabComptes") & " set solde = &2 Where compte_cc = &1", coll, Sld)
          collectif = ""
        Endif
        If Left$(Cpt, 3) <> "411" And Left$(Cpt, 3) <> "445" Then
          If Left$(rResult!compte, 3) <> "709" And Left$(rResult!compte, 3) <> "658" Then
            If rResult!totalht And Val(.cpoint(rResult!totalht)) > 0 Then
              Mtc = Val(.cpoint(rResult!totalht))
              Mtd = 0
            Else
              Mtd = Val(.cpoint(rResult!totalht))
              Mtc = 0
            Endif
          Else
            If rResult!totalht And Val(.cpoint(rResult!totalht)) > 0 Then
              Mtd = Val(.cpoint(rResult!totalht))
              Mtc = 0
            Else
              Mtc = Val(.cpoint(rResult!totalht))
              Mtd = 0
            Endif
          Endif
        Endif
        If Left$(Cpt, 3) = "445" Then
          If Not IsNull(rResult!totalht) Then
            If Val(.cpoint(rResult!totalht)) > 0 Then
              Mtc = Val(.cpoint(rResult!totalht))
              Mtd = 0
            Else
              Mtd = Abs(Val(.cpoint(rResult!totalht)))
              Mtc = 0
            Endif
          Endif
        Endif
        Mtd = Abs(Mtd)
        Mtc = Abs(Mtc)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, libelle, montantd, montantc, validee, provisoire, tresorerie, pointee, lettree, cloturee, relance, numerodef, numdoc, numlot) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18})", Jnl, numr, Cpt, Left$(Intit, 40), .Cdate_Dbase(Datem), Left$(Libel, 30), Mtd, Mtc, Valid, Prov, Tresor, Pointee, lettree, Cloturee, Relance, numr2, Numlt, numlt)
        Sha1Calc.CalcSha1("Fiches_Mvt", numr)
        hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", Cpt)
        SldTot = SldTot + Mtd - Mtc
        If hResult!solde = "" Then
          Sld = Mtd - Mtc
        Else
          Sld = hResult!solde + Mtd - Mtc
        Endif
        Utils.db.Exec("UPDATE " & Cbase.Table("TabComptes") & " set solde = &2 Where compte_cc = &1", Cpt, Sld)
        Mtd = 0
        Mtc = 0
        Try Utils.db.Exec("delete FROM " & Cbase.Table("Totalisation") & " where compte = &1", Cpt)
      Until rResult.MoveNext()
      Sha1Calc.CalcSha1("Fiches_Mvt", Numr)
      If Round(SldTot, -3) <> 0 Then
        Message.Warning("Une erreur de moulinage importante est survenu!\nLa ventilation du montant de la caisse donne un solde de\n" & CStr(Round(SldTot, -3)) & "\nVeuillez corriger manuellement l'ecriture " & numr & ".")
      Endif
      Majnum()
    Endif
  End With
  Return Verif_Caisse

End

Public Sub Maj_Tresorerie(Verif_Caisse As Float)

  Dim rResult As Result
  Dim hResult As Result
  Dim MtTot As Float = 0
  Dim CptCli As String
  Dim libel, nom As String
  Dim Nfac As String = Format$(Now, "ddmmyyyy")
  Dim Snom As String
  Dim Nm As String[]
  Dim Mtd As Float
  Dim SldTot As Float
  Dim x As Integer
  Dim ChequeCptInt As Boolean

  SldTot = Verif_Caisse
  Try ChequeCptInt = Start.LocalSettings["/Soc" & Start.Societe & "/Cheque"]
  If Error Then ChequeCptInt = False
  rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabJour") & " where code_jo = &1", jnal)
  CptCaisse = rResult!cde_banque

  ' On fait le total des especes
  hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where sespeces = &1", "N")
  If hResult.Available Then
    Repeat
      If LDate(hResult!date).GnT = DateChooser1.Value Then
        Cptcli = hresult!client
        rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " where compte_cc = &1", hResult!client)
        Nom = rresult!intitule_cc
        rResult = Utils.db.Exec("SELECT * FROM " & Tab & " where compte = &1 and type = &2", Client, "N")
        SldTot = SldTot - Val(utils.cpoint(hResult!mespeces))
        If rresult.Available Then
          MtTot = Val(Utils.cpoint(rResult!montant)) + Val(utils.cpoint(hResult!mespeces))
          Utils.db.Exec("UPDATE " & Tab & " set montant = &3, intitule = &4 Where compte = &1 and type = &2", Client, "N", MtTot, nom)
        Else
          Utils.db.Exec("INSERT INTO " & Tab & "(compte, type, montant, intitule) VALUES (&1, &2, &3, &4)", Client, "N", Val(Utils.cpoint(hResult!mespeces)), nom)
        Endif
        Csolde.Solde_caisse(Client)
      Endif
    Until hResult.MoveNext()
  Endif
  ' On fait le total des chèques
  'MtTot = 0
  If ChequeCptInt
    hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where scheque = &1", "V")
    If hResult.Available Then
      Repeat
        If LDate(hResult!date).GnT = DateChooser1.Value Then
          Cptcli = hresult!client
          rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " where compte_cc = &1", hResult!client)
          Nom = rresult!intitule_cc
          rResult = Utils.db.Exec("SELECT * FROM " & Tab & " where compte = &1 and type = &2", Client, "V")
          SldTot = SldTot - Val(utils.cpoint(hResult!mcheque))
          If rresult.Available Then
            MtTot = Val(Utils.cpoint(rResult!montant)) + Val(utils.cpoint(hResult!mcheque))
            Utils.db.Exec("UPDATE " & Tab & " set montant = &3, intitule = &4 Where compte = &1 and type = &2", Client, "V", MtTot, nom)
          Else
            Utils.db.Exec("INSERT INTO " & Tab & "(compte, type, montant, intitule) VALUES (&1, &2, &3, &4)", Client, "V", Val(Utils.cpoint(hResult!mcheque)), nom)
          Endif
          Csolde.Solde_caisse(Client)
        Endif
      Until hResult.MoveNext()
    Endif
  Else
    'On mouvemente la table des bordereaux de chèques.
    hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where scheque = &1", "V")
    If hResult.Available Then
      Repeat
        If LDate(hResult!date).GnT = DateChooser1.Value Then
          Snom = ""
          nm = Split(hresult!nmcheque, " ")
          SldTot = SldTot - Val(utils.cpoint(hResult!mcheque))
          For x = 1 To nm.Count - 1
            Snom &= nm[x] & " "
          Next
          If IsNull(Snom) Then Snom = " "
          Utils.db.Exec("INSERT INTO " & "Fiches_BordereauxC" & "(code, nom, montant,dateremise,banque,nfacture) VALUES (&1, &2, &3, &4, &5, &6)", hresult!client, Snom, Val(Utils.cpoint(hResult!mcheque)), Utils.Cdate_Dbase(datem), jnal3, Right$(hresult!client, 4) & Replace$(Left$(datem, 5), ".", ""))
        Endif
      Until hResult.MoveNext()
    Endif
  Endif

  ' On fait le total des cartes
  MtTot = 0
  hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where scarte = &1", "U")
  If hResult.Available Then
    Repeat
      If LDate(hResult!date).GnT = DateChooser1.Value Then
        Cptcli = hresult!client
        rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " where compte_cc = &1", hResult!client)
        Nom = rresult!intitule_cc
        rResult = Utils.db.Exec("SELECT * FROM " & Tab & " where compte = &1 and type = &2", Client, "U")
        SldTot = SldTot - Val(utils.cpoint(hResult!mcarte))
        If rresult.Available Then
          MtTot = Val(Utils.cpoint(rResult!montant)) + Val(utils.cpoint(hResult!mcarte))
          Utils.db.Exec("UPDATE " & Tab & " set montant = &3, intitule = &4 Where compte = &1 and type = &2", Client, "U", MtTot, nom)
        Else
          Utils.db.Exec("INSERT INTO " & Tab & "(compte, type, montant, intitule) VALUES (&1, &2, &3, &4)", Client, "U", Val(Utils.cpoint(hResult!mcarte)), nom)
        Endif
        Csolde.Solde_caisse(Client)
      Endif
    Until hResult.MoveNext()
  Endif

  ' On génère l'écriture de trésorerie pour les especes
  hResult = Utils.db.Exec("SELECT * FROM " & Tab & " ")
  If hResult.Available Then
    numr = numr + 1
    numr2 = numr2 + 1
  Endif
  hResult = Utils.db.Exec("SELECT * FROM " & Tab & " where type = &1", "N")
  If hresult.Available Then
    Cptcli = hResult!compte
    Libel = "Espèces " & Datem
    Repeat
      If Val(Utils.cpoint(hResult!montant)) > 0 Then
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, hResult!montant, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1("Fiches_Mvt", numr)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, CptCaisse, "Espèces", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, hResult!montant, 0, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1("Fiches_Mvt", numr)
      Else
        Mtd = hResult!montant
        Mtd = Abs(Mtd)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, Mtd, 0, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1("Fiches_Mvt", numr)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, CptCaisse, "Espèces", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, Mtd, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1("Fiches_Mvt", numr)
      Endif
      Csolde.Solde_caisse(Client)
      Csolde.Solde_caisse(CptCaisse)
      Maj_Collectif(cptcli, hResult!intitule, libel, hResult!montant)
    Until hresult.MoveNext()
  Endif
  ' On génère l'écriture de trésorerie pour les chèques
  If ChequeCptInt
    hResult = Utils.db.Exec("SELECT * FROM " & Tab & " where type = &1", "V")
    If hresult.Available Then
      Cptcli = hResult!compte
      Libel = "Chèques caisse " & Datem
      Repeat
        If Val(Utils.cpoint(hResult!montant)) > 0 Then
          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, hResult!montant, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
          Sha1Calc.CalcSha1("Fiches_Mvt", numr)
          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Vichq, "Virements internes chèques", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, hResult!montant, 0, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
          Sha1Calc.CalcSha1("Fiches_Mvt", numr)
        Else
          Mtd = hResult!montant
          Mtd = Abs(Mtd)
          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, hResult!montant, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
          Sha1Calc.CalcSha1("Fiches_Mvt", numr)
          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Vichq, "Virements internes chèques", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, hResult!montant, 0, 1, 1, 1, 0, 1, Utils.Cdate_Dbase(Datem), numr2)
          Sha1Calc.CalcSha1("Fiches_Mvt", numr)
        Endif
        Csolde.Solde_caisse(Client)
        Csolde.Solde_caisse(Vichq)
        Maj_Collectif(cptcli, hResult!intitule, libel, hResult!montant)
      Until hresult.MoveNext()
    Endif
  Endif

  ' On génère l'écriture de trésorerie pour les cartes
  hResult = Utils.db.Exec("SELECT * FROM " & Tab & " where type = &1", "U")
  If hresult.Available Then
    Cptcli = hResult!compte
    Libel = "Cartes caisse " & Datem
    Repeat
      If Val(Utils.cpoint(hResult!montant)) > 0 Then
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, hResult!montant, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1("Fiches_Mvt", numr)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Vic, "Virements internes cartes", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, hResult!montant, 0, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1("Fiches_Mvt", numr)
      Else
        Mtd = hResult!montant
        Mtd = Abs(Mtd)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, hResult!montant, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1("Fiches_Mvt", numr)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Vic, "Virements internes cartes", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, hResult!montant, 0, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1("Fiches_Mvt", numr)
      Endif
      Csolde.Solde_caisse(Client)
      Csolde.Solde_caisse(Vic)
      Maj_Collectif(cptcli, hResult!intitule, libel, hResult!montant)
    Until hresult.MoveNext()
  Endif
  If Round(SldTot, -3) <> 0 Then
    Message.Warning("Une erreur de moulinage importante est survenu!\nLa comparaison de la caisse et des règlements donne un solde de\n" & CStr(Round(SldTot, -3)) & "\nVeuillez corriger manuellement l'ecriture " & numr & ".")
  Endif
  Majnum()

End

Public Sub Maj_Collectif(Cpt As String, intit As String, libel As String, Mnt As Float)

  Dim Coll As String
  Dim Mtc As Float
  Dim Mtd As Float
  Dim Sld As Float
  Dim cResult As Result
  Dim Numlt As String = Format$(DateChooser1.Value, "ddmmyyyy")

  cResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", Cpt)
  coll = cResult!coll_cc
  cResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabMvt") & " Where compte = &1 and numero = &2 and numerodef = &3", Coll, numr, numr2)
  If cResult.Available Then
    If Mnt > 0 Then
      Mtd = 0
      Mtc = Mnt + cResult!montantc
    Else
      Mtc = 0
      Mtd = Mnt + cResult!montantd
    Endif
    Utils.db.Exec("UPDATE " & Cbase.Table("TabMvt") & " set montantc = &4 Where compte = &1 and numero = &2 and numerodef = &3", Coll, numr, numr2, mtc)
    Sha1Calc.CalcSha1("Fiches_Mvt", Numr, cResult!lind)
  Else
    Mtc = Mnt
    Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, collectif, intitule, dte, libelle, montantd, montantc, validee, provisoire, tresorerie, pointee, lettree, cloturee, relance, numerodef, numdoc, numlot) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18}, &{19})", Jnal, numr, coll, 1, Intit, Utils.Cdate_Dbase(Datem), Libel, Mtd, Mtc, 1, 0, 1, 0, 0, 1, 0, numr2, Numlt, numlt)
    Sha1Calc.CalcSha1("Fiches_Mvt", Numr)
  Endif
  cResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", coll)
  If cResult!solde = "" Then
    Sld = Mtd - Mtc
  Else
    Sld = cResult!solde + Mtd - Mtc
  Endif
  Utils.db.Exec("UPDATE " & Cbase.Table("TabComptes") & " set solde = &2 Where compte_cc = &1", coll, Sld)

End

'*****************************************
'*  Génération de la facture magasin     *
'*****************************************
Private Sub genfac()

  Dim res, respu, resentz, resligz, resentfac, resligfac, respar, reslig As Result
  Dim i, j, inda As Integer
  Dim rem As Float
  Dim pu, pxttc, mttc, mht, mtva, mremise As Float
  Dim snfac, snumlig, dnfac As String
  Dim ccd As Calculconsdroit
  Dim nbvente As Integer = 0

  'recuperation et maj du n° facture
  respar = utils.db.Exec("SELECT * FROM Fiches_Parametres")
  snfac = Str(Year(DateChooser1.Value)) & Format(Val(respar!dnfac) + 1, "000000")
  dnfac = Format(Val(respar!dnfac) + 1, "000000")

  'selection des entetes fichier z
  'NE PAS UTILISER 'resentz = Utils.db.Exec("SELECT numero FROM " & Cbase.Table("TabEntTck") & " where DATE(date) = &1 and client = &2 and not suppr group by numero", LDate(DateChooser1.Value).D, client) 'TODO A supprimer je l'ai garder pour le debug de la generation de Fac
  resentz = Utils.db.Exec("SELECT numero FROM " & Cbase.Table("TabEntTck") & " where DATE(date) = &1 and type = &2 and not suppr group by numero", LDate(DateChooser1.Value).D, "0")
  If resentz.Available Then
    utils.db.Begin
    resentz.MoveFirst
    For i = 0 To resentz.Max
      'selection des lignes z
      'Print "Genfac " & resentz!numero
      resligz = utils.db.Exec("SELECT * FROM Fiches_LigTicketz WHERE numero=&1  ORDER BY lInd", resentz!numero)
      If resligz.Available Then
        'creation des lignes articles dans fichier temporaire
        resligz.MoveFirst
        Repeat
          If resligz!type = "A" Then
            Inc nbvente
            resligfac = utils.db.Create("Tmp_Caisse")
            'On regarde si la ligne suivante existe puis si c'est une remise, si non on revient en arriere. "O"= ligne ecotaxe
            If resligz.Index < (resligz.Length - 1) Then
              inda = resligz.Index
              Repeat    'on passe les éco taxes
                resligz.MoveNext
              Until resligz!type <> "O"
              'retour à l'article si pas de remise
              If resligz!type <> "S" Then
                resligz.MoveTo(inda)
              Endif
            Endif
            'calculs intermediaires
            resligfac!code = resligz!code
            resligfac!fam = resligz!fam
            resligfac!pu = Val(Replace(resligz!montant, ".", ","))
            resligfac!quantite = Val(Replace(resligz!qte, ".", ","))
            resligfac!tva = Val(Replace(resligz!mtva, ".", ","))
            resligfac!montant = Val(Replace(resligz!mht, ".", ","))
            'resligfac!marge = resligz!marge 'TODO la marge n'est pas dispo sur la ligne en caisse, il faut faire le calcul ici si besoin
            resligfac.Update
          Endif
        Until resligz.MoveNext()
      Endif
      resentz.MoveNext
    Next
    utils.db.Commit

    'Si il n'y a aucun article (ex moulinage avec juste des tickets de mouvement hors vente on ne produit pas de facture de caisse)
    If nbvente = 0 Then Return
    
      'mise a jour entete facture
      utils.db.Begin
      res = Utils.db.Exec("SELECT SUM(montant) AS montht, SUM(tva) AS tottva, SUM(marge) AS totmarge,SUM(remise) as remise FROM Tmp_Caisse")
      If res.Available Then
        resentfac = utils.db.Create("Fiches_HistoFac")
        resentfac!marge_art = res!totmarge
        'resentfac!totfac = res!montht - res!remise
        resentfac!totfac = res!montht
        resentfac!totfacttc = res!montht + res!tottva
        resentfac!numfac = snfac
        resentfac!rmofac = "0,00"
        resentfac!rartfac = "0,00"
        resentfac!exofac = 0
        resentfac!remmofac = "0"
        resentfac!remartfac = Val(Utils.cpoint(res!remise))
        resentfac!ech = DateChooser1.Value
        resentfac!acpt = "0,00"
        resentfac!marge_art = res!totmarge
        resentfac!marge_mo = 0
        resentfac!cdclifac = client
        res = utils.db.Exec("SELECT * FROM Fiches_Cli WHERE cli_code=&1", client)
        resentfac!cvclifac = res!cli_rs_soc
        resentfac!nmclifac = res!cli_nom
        resentfac!pnmclifac = res!cli_pnm
        resentfac!adr1fac = res!cli_adr1
        resentfac!adr2fac = res!cli_adr2
        resentfac!cpfac = res!cli_cd_ptl
        resentfac!villefac = res!cli_ville
        resentfac!datefac = DateChooser1.Value
        resentfac.Update
        utils.db.Exec("UPDATE Fiches_Parametres SET dnfac=&1", dnfac) 

        'mise a jour des lignes de facture
        reslig = utils.db.Exec("SELECT SUM(pu) as pu, SUM(montant) as montant, SUM(remise) as remise, SUM(quantite) as quantite, SUM(tva) as mtva, SUM(marge) as marge, fam,code FROM Tmp_Caisse GROUP BY code,fam")
        snumlig = "0001"
        resligfac = Utils.db.Create("Fiches_HistoLigfac")
        resligfac!num_ligfac = snfac
        snumlig = snumlig
        resligfac!numlig_ligfac = Format(snumlig, "0000")
        resligfac!typel_ligfac = "C"
        resligfac!com_ligfac = "Facture caisse du : " & Format(DateChooser1.Value, "dd-mm-yyyy")
        resligfac.Update

        reslig.MoveFirst
        For j = 0 To reslig.Max
          resligfac = Utils.db.Create("Fiches_HistoLigfac")
          res = utils.db.Exec("SELECT * FROM Fiches_Art WHERE art_code=&1", reslig!code)
          resligfac!num_ligfac = snfac
          snumlig = Str(Val(snumlig) + 1)
          resligfac!numlig_ligfac = Format(snumlig, "0000")
          resligfac!code_ligfac = reslig!code
          If res.Available Then resligfac!pu_ligfac = Format(res!art_pvht, "0.00") Else resligfac!pu_ligfac = "0,00"
          resligfac!brut_ligfac = Format(Val(resligfac!pu_ligfac) * reslig!quantite, "0.00")
          resligfac!netht_ligfac = Format(reslig!montant, "0.00")
          resligfac!nettc_ligfac = Format(reslig!montant + reslig!mtva, "0.00")
          resligfac!mrgart_ligfac = reslig!marge
          resligfac!typel_ligfac = "A"
          resligfac!dtligbl_ligfac = DateChooser1.Value
          'lecture des données sur fiche article
          If res.Available Then
            resligfac!libel_ligfac = res!art_design
            resligfac!fam_ligfac = res!art_fam
            resligfac!tx_ligfac = res!art_tva
            resligfac!qte_ligfac = Format(reslig!quantite, utils.Find_nbdec(res!art_dec))
            If Val(Utils.cpoint(reslig!quantite)) <> 0 Then
              resligfac!pu_ligfac = Format(reslig!montant / reslig!quantite, utils.Find_nbdec(res!art_nbd))
            Else
              resligfac!pu_ligfac = Format(0, utils.Find_nbdec(res!art_nbd))
            Endif
            res = utils.db.Exec("SELECT * FROM Fiches_Tvaav WHERE code_tva=&1", resligfac!tx_ligfac)
            If res.Available Then resligfac!mtx_ligfac = res!taux_tva
          Else
            resligfac!libel_ligfac = "Article inconnu"
            resligfac!qte_ligfac = Format(reslig!quantite, "0.000")
            resligfac!fam_ligfac = reslig!fam
          Endif
          resligfac.Update
          reslig.MoveNext
        Next
      Endif
      utils.db.Commit
      If $soption = "B" Or $soption = "T" Then
        ccd = New Calculconsdroit(snfac, "M")
        ccd.comptmat(snfac)
      Endif
  Endif

End


Private Sub creatmp()

  Try utils.db.Exec("DROP TABLE Tmp_Caisse")
  Utils.db.EXEC("CREATE TABLE Tmp_Caisse" &
    "(code Char(15)," &
    "pu Decimal(8,2) DEFAULT '0'," &
    "montant Decimal(8,2) DEFAULT '0', " &
    "remise Decimal(8,2) DEFAULT '0'," &
    "quantite Decimal(9,3) DEFAULT '0'," &
    "tva Decimal(8,2) DEFAULT '0'," &
    "marge Decimal(8,2) DEFAULT '0'," &
    "fam Char(20)," &
    Utils.db.AutoIncrement("lInd") & ")")

End

'**********************************
'*    Appel de la doc html        *
'**********************************
Public Sub Button3_Click()

  Doc.Open("Moulinage")

End
