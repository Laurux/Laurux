' Gambas class file

Private Jnl As String
Private numr As Integer ' Numero ecriture provisoire
Private numr2 As Integer ' numero ecriture définitif
Private numecr As String
Private client As String
Private Nclient As String
Private collectif As String
Private typec As String
Private Artdsg As String
Private Artdsg2 As String
Private Artfam As String
Private Nbd As String
Private Nbdec As String
Private Paht As String
Private Pmp As String
Private Artpu As String
Private Artbrut As String
Private Artnet As String
Private Arttc As String
Private Artrm As String ' remise client sur pieces ou par type client
Private RemType As String
Private Rms As New String[6, 3] ' Tableau des remises quantitatives
Private Qte As String
Private Decq As String '
Private Ttva As Float
Private Tx As Float
Private Arttx As String
Private Arr As String
Private Decm As String
Private Ecot As String
Private Tcp As String
Private marge As String
Private Datem As String
Private CptCaisse As String
Private Vic As String
Private Vichq As String
Private Viautre As String
Private jnal As String
Private jnal3 As String
Private Tab As String = "Virements"
Private RegroupBL As Facturergbl

Public Sub _new()

  Parametres()
  Ventilation()

End

Public Sub Button2_Click()

  Me.close

End

'**********************************************On effectue le moulinage des tickets**************************************
Public Sub Button1_Click()

  Dim rResult As Result
  Dim chemin As String = "/Sauve"

  If Jnal = "" Or If Vic = "" Or If Vichq = "" Or If Viautre = "" Then
    If start.son Then Music.Play
    Message.Error("Vous devez completer, dans les parametres, les données relatives au journal de caisse \net aux comptes de virements internes avant de faire le moulinage !")
  Else
    If start.son Then Music.Play
    If Message.Question("Ce programme va effacer les bordereaux de remises de chèques et de cartes !\nEtes-vous d'accord pour lancer le moulinage ?", "Oui", "Non") = 1 Then
      rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabCaisses") & " where connecte = &1", 1)
      If rResult.Available Then
        If start.son Then Music.Play
        Message.Error("La caisse numéro " & rResult!code & " est connectée ! \n Veuillez déconnecter toutes vos caisses avant de faire le moulinage SVP.")
        Return
      Else
        rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabCaisses") & " where tkz = &1", 0)
        If rResult.Available Then
          If start.son Then Music.Play
          Message.Error("Le ticket Z de la caisse numéro " & rResult!code & " n'est pas tiré ! \n Veuillez imprimer vos bandes Z avant de faire le moulinage SVP.")
          Return
        Else
          If start.son Then Music.Play
          If Message.Question("Cette opération va effectuer le passage en comptabilité pour l'ensemble des tickets de caisse.\nLes bons de caisse pour les clients en compte seront archivés dans les documents.\nLes bordereaux seront effacés.\nVoulez-vous continuer ?", "Oui", "Non") = "1" Then
            Me.mouse = mouse.Wait
            If Not Exist(User.home & chemin) Then Mkdir User.home & chemin
            Shell "mysqldump -h " & Settings["/dbase/Host"] & " -u " & Utils.db.Login & " -p" & Utils.db.Password & " " & Utils.db.Name & " " & "--add-drop-table" & " " & ">" & " " & User.home & "/Sauve/" & Utils.db.Name & ".sql" & Format$(Now, "yyyymmdd") Wait
            Moulinage()
          Endif
        Endif
      Endif
    Endif
  Endif

End

Public Sub Livre_caisse()

  Dim rTkx, rttva As Result
  Dim rTkFam As Result
  Dim rTkhv As Result
  Dim rCaisse As Result
  Dim Tabz As String
  Dim Tabe, Tabl As String
  Dim Tabr As String
  Dim Posy As Integer
  Dim Filename As String
  Dim sFam As String = "0,00"
  Dim sFam2 As String = "0,00"
  Dim sLFam, tintitule As String
  Dim sMtfam As String = 0
  Dim sMtreg As String = 0
  Dim sreg As String
  Dim sqte As String
  Dim totcaisse As String = 0
  Dim totventes As String = 0
  Dim Fdc As String = "0"
  Dim Totnbtck As Integer = 0
  Dim Pnm, itva As Float = 0
  Dim Enc As Boolean = False
  Dim pdf As Clivre
  Dim Ncaisse, sintitule As String

  With Utils
    If Not Exist(User.home & "/Caisse/") Then Mkdir User.home & "/Caisse/"
    Filename = User.home & "/Caisse/Livre_" & Format$(DateChooser1.Value, "dd-mm-yyyy") & ".pdf"
    pdf = New Clivre("P", "mm", "A4")
    pdf.Open()
    pdf.AliasNbPages()
    rCaisse = Utils.db.Exec("select * from  " & Cbase.Table("TabCaisses") & " order by code")
    If rCaisse.Available Then
      Repeat
        Ncaisse = rCaisse!code
        sIntitule = "Livre de caisse du " & Format$(DateChooser1.Value, "dd-mm-yyyy") & " : Caisse N° " & Ncaisse
        Tabz = "Fiches_Ticketz" & Ncaisse
        Tabr = "Fiches_Regltz"
        Tabe = "Fiches_EntTickets" & Ncaisse
        Tabl = "Fiches_LigTickets" & Ncaisse
        Try Fdc = Format$(rCaisse!fndc, "0.00")
        totcaisse = Val(.cpoint(Totcaisse)) + Val(.cpoint(Fdc))
        rTkx = Utils.db.Exec(" select * from " & Tabr & " where caisse = &1 order by type", Ncaisse)
        If rTkx.Available Then
          Enc = True
        Else
          Enc = False
        Endif
        rTkx = Utils.db.Exec(" select * from " & Cbase.Table("TabEntTck") & " where statut = &1 and caisse = &2 and left(date,10) = &3 and (suppr is null or suppr != 1)", 0, Ncaisse, Format$(DateChooser1.Value, "dd-mm-yyyy"))
        If rTkx.Available Or If Enc = True Then
          pdf.newPage()
          Totnbtck = rTkx.count
          If rTkx.Available Then
            Repeat
              If rTkx!savoir = 1 Then
                Try totventes = Val(.cpoint(Totventes)) - Val(.cpoint(rTkx!mttc))
              Else
                Try totventes = Val(.cpoint(Totventes)) + Val(.cpoint(rTkx!mttc))
              Endif
            Until rTkx.MoveNext()
          Endif
          Posy += 5
          Pdf.Level3(sIntitule, Posy)
          Posy += 8
          pdf.Level2("Fond de caisse initial ", Fdc, "", Posy)
          Posy += 8
          pdf.Lines2(Posy)
          Posy += 5
          rTkhv = Utils.db.Exec(" select * from " & Tabr & " where caisse = &1 order by type", Ncaisse)
          If rTkhv.Available Then
            'Posy += 5
            'Pdf.Level3(sIntitule, Posy)
            'Posy += 8
            'pdf.Level2("Fond de caisse initial ", Fdc, "", Posy)
            'Posy += 8
            'pdf.Lines2(Posy)
            'Posy += 5
            pdf.Level2("Mouvements hors ventes ", "", "", Posy)
            Posy += 5
            Repeat
              If rTkhv!type = "F" Or If rTkhv!type = "G" Or If rTkhv!type = "H" Or If rTkhv!type = "P" Then
                If rTkhv!type = "F" Then sreg = "Sortie " & rTkhv!intitule
                If rTkhv!type = "G" Then sreg = "Entree espèces " & rTkhv!intitule
                If rTkhv!type = "H" Then sreg = "Entree chèques " & rTkhv!intitule
                If rTkhv!type = "P" Then sreg = "Entree cartes " & rTkhv!intitule
                sMtreg = Format$(Val(.cpoint(rTkhv!montant)), "0.00")
                If rTkhv!type = "F" Then sMtreg = "-" & sMtreg
                If rTkhv!type = "F" Then
                  totcaisse = Val(.cpoint(Totcaisse)) - Val(.cpoint(rTkhv!montant))
                Else
                  If rTkhv!type = "G" Then totcaisse = Val(.cpoint(Totcaisse)) + Val(.cpoint(rTkhv!montant))
                Endif
                sqte = rTkhv!qte
                If rTkhv!type = "F" Or If rTkhv!type = "G" Or If rTkhv!type = "P" Or If rTkhv!type = "H" Then
                  pdf.Level2(sReg, sMTreg, sqte, Posy)
                  Posy += 5
                Endif
              Endif
            Until rTkhv.MoveNext()
            Posy += 3
            pdf.Lines2(Posy)
            Posy += 5
          Endif
          rTkhv = Utils.db.Exec(" select * from " & Tabr & " where caisse = &1 and left(date,10) = &2 order by type", Ncaisse, Format$(DateChooser1.Value, "dd-mm-yyyy"))
          If rTkhv.Available Then
            pdf.Level2("Mouvements ventes ", "", "", Posy)
            Posy += 5
            Repeat
              If rTkhv!type = "N" Then sreg = "Tot. rglts par especes "
              If rTkhv!type = "Q" Then sreg = "Tot. rendu monnaie "
              If rTkhv!type = "U" Then sreg = "Tot. rglts par cartes "
              If rTkhv!type = "V" Then sreg = "Tot. rglts par chèques "
              If rTkhv!type = "B" Then sreg = "Tot. bonus utilises "
              If rTkhv!type = "E" Then sreg = "Tot. bons de reduction "
              If rTkhv!type = "X" Then sreg = "Tot. bons achat"
              If rTkhv!type = "Y" Then sreg = "Tot. chèques cadeaux"
              If rTkhv!type = "W" Then sreg = "Tot. credits "
              If rTkhv!type = "Z" Then sreg = "Tot. avoirs "
              If rTkhv!type = "M" Then sreg = "Tot. clients compte "
              If rTkhv!type = "1" Then sreg = "Tot. chèques entreprise "
              'IF rTkhv!type = "G" THEN sreg = "Tot. acomptes verses"
              If rTkhv!type = "C" Then sreg = "Tot. acomptes utilises"
              sMtreg = Format$(Val(.cpoint(rTkhv!montant)), "0.00")
              If rTkhv!type = "N" Then totcaisse = Val(.cpoint(Totcaisse)) + Val(.cpoint(rTkhv!montant))
              If rTkhv!type = "Q" Then totcaisse = Val(.cpoint(Totcaisse)) - Val(.cpoint(rTkhv!montant))
              sqte = rTkhv!qte
              If rTkhv!type = "A" Or If rTkhv!type = "E" Or If rTkhv!type = "B" Or If rTkhv!type = "C" Or If rTkhv!type = "N" Or If rTkhv!type = "U" Or If rTkhv!type = "V" Or If rTkhv!type = "X" Or If rTkhv!type = "Y" Or If rTkhv!type = "W" Or If rTkhv!type = "Z" Or If rTkhv!type = "Q" Or If rTkhv!type = "M" Or If rTkhv!type = "1" Then
                pdf.Level2(sReg, sMTreg, sqte, Posy)
                Posy += 5
              Endif
            Until rTkhv.MoveNext()
          Endif
          Posy += 5
          pdf.Level2("Total ventes ", Format$(Val(.cpoint(Totventes)), "0.00"), "", Posy)
          Posy += 5
          pdf.Lines2(Posy)
          Posy += 5
          pdf.Level2("Fond de caisse ", Format$(Val(.cpoint(Totcaisse)), "0.00"), "", Posy)
          Posy += 5
          pdf.Lines2(Posy)
          Posy += 5
          rTkx = Utils.db.Exec(" select * from " & Tabe & " where type = &1", "1")
          If rTkx.Available Then
            totventes = 0
            Repeat
              Try totventes = Val(.cpoint(Totventes)) + Val(.cpoint(rTkx!mttc))
            Until rTkx.MoveNext()
            Posy += 5
            pdf.Level2("Total bons de caisse ", Format$(Val(.cpoint(Totventes)), "0.00"), "", Posy)
            Posy += 5
            pdf.Lines2(Posy)
            Posy += 5
          Endif
          pdf.Lines2(Posy)
          pdf.Level2("Nombre de tickets :", Totnbtck, "", Posy)
          Posy += 5
          Try Pnm = Totventes / Totnbtck
          If Error Then Pnm = 0
          pdf.Level2("Panier moyen :", Format$(Pnm, "0.00"), "", Posy)
          Posy += 5
          pdf.Lines2(Posy)
          Posy += 5
          rttva = Utils.db.Exec("select * from  " & Tabl & " WHERE left(intitule,3) = &1 order by intitule", "TVA")
          If rttva.Available Then
            pdf.Level2("Récapitulatif TVA", "", "", Posy)
            Posy += 5
            tintitule = rttva!intitule
            Repeat
              If tintitule <> rttva!intitule Then
                pdf.Level2(Tintitule, itva, "", Posy)
                Posy += 5
                itva = 0
              Endif
              itva = itva + Val(utils.cpoint(rttva!montant))
              tintitule = rttva!intitule
            Until rttva.MoveNext()
            pdf.Level2(Tintitule, itva, "", Posy)
            Posy += 5
            pdf.Lines2(Posy)
          Endif
          Try rTkx = Utils.db.Exec(" select * from " & Tabz & " order by fam")
          If Not Error Then
            sqte = "0,00"
            If rTkx.Available Then
              pdf.Level2("Total ventes par familles", "", "", Posy)
              Posy += 5
              sFam2 = "Famille " & Left$(rTkx!fam, 2)
              Repeat
                sFam = "Famille " & Left$(rTkx!fam, 2)
                If sFam2 <> sFam Then
                  pdf.Level2(sFam2 & " " & rTkFam!libell_fam & " " & Format$(Val(utils.cpoint(sMTfam)) / Totventes * 100, "0.00") & " %", sMTfam, sqte, Posy)
                  Posy += 5
                  sMtfam = "0,00"
                  sQte = "0,00"
                Endif
                rTkFam = Utils.db.Exec(" select * from " & Cbase.Table("TabFam") & " where code_fam = &1", Left$(rTkx!fam, 2))
                If Not rTkFam.Available Then rTkFam = Utils.db.Exec(" select * from " & Cbase.Table("TabFam") & " where code_fam = &1", rTkx!fam)
                sLFam = rTkFam!libell_fam
                sMtfam = Format$(Val(Utils.cpoint(sMtfam)) + Val(Utils.cpoint(rTkx!montant)), "0.00")
                sqte = Format$(Val(.cpoint(sqte)) + Val(.cpoint(rTkx!qte)), "0.00")
                sFam2 = sFam
              Until rTkx.MoveNext()
              If totventes = 0 Then totventes = 1
              pdf.Level2(sFam & " " & sLFam & " " & Format$(Val(utils.cpoint(sMTfam)) / Totventes * 100, "0.00") & " %", sMTfam, sqte, Posy)
              Posy += 5
            Endif
          Endif
        Endif
        'On met à jour le fond de caisse
        Utils.db.Exec("UPDATE  " & Cbase.Table("TabCaisses") & "  SET fndc = &2 WHERE code = &1", Ncaisse, Val(Utils.cpoint(Totcaisse)))
        'et on continue
        sReg = 0
        sMTreg = 0
        sqte = 0
        sMtfam = 0
        Totventes = 0
        Totcaisse = 0
        Pnm = 0
        Posy = 0
      Until rCaisse.MoveNext()
      Dec Application.Busy
      Utils.db.Exec("drop Table IF exists " & Tabz & "")
      pdf.Output(Filename, False)
      Visualiseur.Prog_Editeur(Filename)
    Else
      Message.Info("Aucune donnée n'est a traiter !")
    Endif
  End With

End


Public Function VerifSha1(sha1 As String, numero As String, prev_numero As String) As Boolean

  Dim sresult As Result
  Dim lresult As Result
  Dim cle, cle2, Tab As String

  Tab = "Fiches_EntTicketz"
  sResult = Utils.db.Exec("SELECT * FROM  " & Tab & " WHERE numero = &1", numero)
  If sResult.Available Then
    cle = sResult!caisse & sResult!numero & sResult!date & sResult!client & sResult!scheque & sResult!mcheque & sResult!nmcheque & sResult!scarte & sResult!mcarte & sResult!nmcarte & sResult!sespeces & sResult!mespeces & sResult!scredit & sResult!mcredit & sResult!mht & sResult!mtva & sResult!mttc & sResult!statut & sResult!savoir
    cle &= sResult!scavoir & sResult!mavoir & sResult!type & sResult!vendeur & sResult!carte & sResult!points & sResult!sbonus & sResult!mbonus & sResult!sresto & sResult!mresto & sResult!sbachat & sResult!mbachat & sResult!nom & sResult!suppr & sResult!retro
    cle = Replace$(cle, ")", "")
    cle = Replace$(cle, "(", "")
    cle = Replace$(cle, "'", "")
    'On chaine les contrôle avec le ticket précédent si il existe dans la table
    lResult = Utils.db.Exec("SELECT * FROM  " & Tab & " WHERE numero = &1", prev_numero)
    If lResult.Available Then
      cle &= lResult!control
    Else
      prev_numero = ""
    Endif
    Shell "echo " & cle & " | sha1sum 2>&1" To cle2
    If sha1 = Left$(cle2, 40) Then
      Return True
    Else
      Return False
    Endif
  Else
    Return False
  Endif

End

Public Sub Moulinage()

  Dim rTck As Result
  Dim rlTck As Result
  Dim lBl As Result
  Dim rlTck2 As Result
  Dim rcpt As Result
  Dim rResult As Result
  Dim rFam, rDep As Result
  Dim Bl As Result
  Dim Blg As Result
  Dim respar As Result
  Dim vente As String
  Dim ivente As String
  Dim tva As String
  Dim itva As String
  Dim montant As String
  Dim cvclibl As String
  Dim nmclibl As String
  Dim pnmclibl As String
  Dim adr1bl As String
  Dim adr2bl As String
  Dim cpbl As String
  Dim villebl As String
  Dim rmobl As String
  Dim numbon As String
  Dim numlig As Integer = 0
  Dim nmlig As String
  Dim bloc As String
  Dim Exo As String
  Dim Datec As Date
  Dim sDate As String
  Dim origine As String
  Dim scli As String
  Dim code As String
  Dim Remart As String
  Dim totalht As Float
  Dim totalttc As Float
  Dim $intit, resto, Fam, $depot As String
  Dim bretro As Boolean
  Dim dnfac As String
  Dim snfac As String
  Dim Verif_Caisse As Float
  Dim bl_cli_credit As Float
  Dim bl_cli_debit As Float
  Dim Error_Verif_Tck As String[] = []

  RegroupBL = New Facturergbl
  Virements()
  numecr = "numecriture"
  numr = Ecritures(numecr)
  numr = numr + 1
  numecr = "numecriture2"
  numr2 = Ecritures(numecr)
  numr2 = numr2 + 1
  'On récupère le journal de caisse
  rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabJour") & " where code_jo = &1", Jnal)
  If rResult.Available Then CptCaisse = rResult!cde_banque
  Datem = Format$(DateChooser1.Value, "dd.mm.yyyy")
  Datec = DateChooser1.Value
  rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabParam") & " ")
  With utils
    Me.mouse = Mouse.Wait
    If rResult.Available Then numbon = rResult!dnbon
    Try rTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " order by date , numero")
    If rTck.Available Then
      If Mid(rtck!date, 7, 4) & Mid(rtck!date, 4, 2) & Left(rtck!date, 2) < Format$(DateChooser1.Value, "yyyymmdd") Then
        sDate = Left(rtck!date, 2) & "." & Mid(rtck!date, 4, 2) & "." & Mid(rtck!date, 7, 4)
        Message.Info("Il reste des tickets à la date du " & sdate & " !\nVeuillez faire un moulinage à cette date SVP.")
      Else
        rTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where left(date,10) = &1 order by numero", Format$(DateChooser1.Value, "dd-mm-yyyy"))
        If rTck.Available Then
          Repeat
            'On verifie la somme de controle des tiquets
            If rTck!control Then
              If Not VerifSha1(rTck!control, rTck!numero, rTck!prev_numero) Then
                Error_Verif_Tck.Add(rTck!numero)
              Endif
            Else
              Error_Verif_Tck.Add(rTck!numero)
            Endif
          Until rTck.MoveNext()
          
          If Error_Verif_Tck.Length > 0 Then
            If Message.Error("les Tickets suivants ont des champs de contrôle altéré ou absent, voulez vous poursuivre le moulinage!\n" & Error_Verif_Tck.Join(","), "OK", "ANNULER") <> 1 Then
              Return
            Endif
          Endif

          'création du fichier temporaire pour récuperer les lignes de facture
          creatmp()
          ' On bloque les tables
          Utils.db.Exec("LOCK TABLES " & Cbase.Table("TabParam") & " WRITE, " & Cbase.Table("TabEntTck") & " WRITE, " & Cbase.Table("TabLigTck") & " WRITE, " & Cbase.Table("TabComptes") & " WRITE, " & Cbase.Table("Totalisation") & " WRITE, " & Cbase.Table("TabFam") & " WRITE, " & Cbase.Table("TabTvav") & " WRITE, " & Cbase.Table("TabMvt") & " WRITE, " & Cbase.Table("TabArt") & " WRITE, " & Cbase.Table("TabHisEntTck") & " WRITE, " & Cbase.Table("TabHisLigTck") & " WRITE, " & Cbase.Table("TabJour") & " WRITE,  " & Cbase.Table("TabCli") & " WRITE, " & Cbase.Table("TabBl") & " WRITE, " & Cbase.Table("TabLigbl") & " WRITE, " & Tab & " WRITE, Fiches_Caisses WRITE, Fiches_FamDep WRITE, Fiches_BordereauxC WRITE")

          '         Génération de la facture
          genfac()
        Endif
        ' On gère d'abord les clients caisse
        rTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where left(date,10) = &1 order by numero", Format$(DateChooser1.Value, "dd-mm-yyyy"))
        If rTck.Available Then
          Repeat
            If rtck!sresto = "1" Then
              resto = "R"
            Else
              resto = ""
            Endif
            bretro = rtck!retro
            Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisEntTck") & " (caisse, numero, date, client, scheque, mcheque, scarte, mcarte, sespeces, mespeces, scredit, mcredit, mht, mtva, mttc, savoir, scavoir, mavoir, vendeur, carte, points, sresto, mresto, nom, suppr) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18}, &{19}, &{20}, &{21}, &{22}, &{23}, &{24}, &{25})", rtck!caisse, rtck!numero, rtck!date, rtck!client, rtck!scheque, rtck!mcheque, rtck!scarte, rtck!mcarte, rtck!sespeces, rtck!mespeces, rtck!scredit, rtck!mcredit, rtck!mht, rtck!mtva, rtck!mttc, rtck!savoir, rtck!scavoir, rtck!mavoir, rtck!vendeur, rtck!carte, rtck!points, resto, rtck!mresto, rtck!nom, rtck!suppr)
            Sha1Calc.CalcShaC(rtck!caisse, rtck!numero)
            If Jnl Then
              If rTck!type = "0" Then
                rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", client)
                If rResult.Available Then
                  ivente = rResult!intitule_cc
                Endif
                If Not IsNull(rTck!mttc) And Not rTck!suppr Then
                  If rTck!savoir = "1" Then
                    Maj_Totalisation(Client, ivente, "-" & rTck!mttc)
                  Else
                    Maj_Totalisation(Client, ivente, rTck!mttc)
                  Endif
                Endif
                rlTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigTck") & " where numero = &1 order by lInd", rTck!numero)
                If rlTck.Available Then
                  Repeat
                    If rlTck!type = "BL" Then
                      'rlTck!mrem est utilisé pour récupéré le numéro de Bl
                      'On conserve l'historique des BL selectionné dans le ticket meme si le ticket est supprime
                      Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisLigTck") & " (numero, numlig, code, intitule, montant, qte, type, fam, mht, mrem, tva) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11})", rltck!numero, rltck!numlig, rlTck!code, rlTck!intitule, rltck!montant, rlTck!qte, rltck!type, Fam, rltck!mht, Format$(rlTck!mrem, "000000"), rltck!tva)
                      Bl = Utils.db.Exec(" select * from " & Cbase.Table("TabBl") & " where type = \"B\" and numtick = &1 and numbl = &2", rlTck!numero, Format$(rlTck!mrem, "000000"))
                      If Bl.Available And Not rTck!suppr Then
                        'aucun mouvement specifique n'est a inscrire pour le BL, le BL passe cependant en type facture et déclaré règlé et imprimé
                        'On met a jour la totalisation pour la TVA et HT pour chaque ligne du BL
                        lBl = Utils.db.Exec(" select * from " & Cbase.Table("TabLigbl") & " where num_ligbl = &1 and typel_ligbl = \"A\"", Format$(rlTck!mrem, "000000"))
                        If lBl.Available Then
                          Repeat
                            rFam = Utils.db.Exec(" select * from " & Cbase.Table("TabArt") & " where art_code = &1", lBl!code_ligbl)
                            Fam = rFam!art_fam
                            rDep = Utils.db.Exec("SELECT * FROM Fiches_Caisses where code = &1", rtck!caisse)
                            If rDep.Available Then $depot = rdep!depot
                            rcpt = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabFam") & " where code_fam = &1", Fam)
                            If rcpt.Available Then
                              If Not bretro Then
                                vente = rcpt!compt_fam
                              Else
                                vente = rcpt!compt5_fam
                              Endif

                              If Not IsNull($depot) Then
                                rDep = Utils.db.Exec("SELECT * FROM Fiches_FamDep where fam = &1 and depot = &2", Fam, $depot)
                                If rDep.Available Then vente = rDep!compte
                              Endif
                              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", vente)
                              If rResult.Available Then
                                ivente = rResult!intitule_cc
                              Endif
                              montant = Val(.cpoint(lBl!netht_ligbl))
                              'on met a jour le HT
                              Maj_Totalisation(vente, ivente, montant)

                              tva = lBl!tx_ligbl
                              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabTvav") & " Where code_tva = &1", tva)
                              If rResult.Available Then
                                tva = rResult!cc_tva
                              Endif
                              rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", tva)
                              If rResult.Available Then
                                itva = rResult!intitule_cc
                              Endif
                              'on met a jour la TVA
                              montant = Val(.cpoint(lBl!nettc_ligbl)) - Val(.cpoint(lBl!netht_ligbl))
                              Maj_Totalisation(Tva, iTva, montant)
                            Endif
                          Until lBl.MoveNext()
                        Endif
                      Else
                        'Le message de warning n'a du sens que si le ticket n'est pas supprime
                        If Not rTck!suppr Then Message.Warning("Le BL " & Format$(rlTck!mrem, "000000") & " est noté règlé dans le ticket " & rlTck!numero & " mais n'est pas associé a ce ticket, il sera ignoré")
                      Endif
                    Endif
                    If rlTck!type = "A" Or If rlTck!type = "M" Or If rlTck!type = "S" Or If rlTck!type = "T" Or If rlTck!type = "L" Or If rlTck!type = "C" Then
                      If rlTck!type = "A" And IsNull(rlTck!fam) Then
                        rFam = Utils.db.Exec(" select * from " & Cbase.Table("TabArt") & " where art_code = &1", rltck!code)
                        Fam = rFam!art_fam
                        code = rlTck!code
                        qte = rlTck!qte
                      Else
                        Fam = rlTck!fam
                        code = rlTck!code
                        qte = rlTck!qte
                      Endif
                      If IsNull(Fam) Then Fam = rlTck!fam
                      If Not IsNull(rTck!suppr) And rlTck!type = "A" Then $intit = rlTck!intitule
                      If rlTck.index < rlTck.count - 1 Then
                        $intit = rlTck!intitule
                        rlTck.MoveNext()
                        If rlTck!type = "O" Then
                          rlTck.MoveNext()
                        Endif
                        If rlTck!type <> "S" And If rlTck!type <> "T" Then
                          rlTck.MovePrevious()
                          If rlTck!type = "O" Then
                            rlTck.MovePrevious()
                          Endif
                        Endif
                      Endif
                      If rlTck!type <> "L" And If rlTck!type <> "M" And If rlTck!type <> "C" Then
                        rDep = Utils.db.Exec("SELECT * FROM Fiches_Caisses where code = &1", rtck!caisse)
                        If rDep.Available Then $depot = rdep!depot
                        rcpt = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabFam") & " where code_fam = &1", Fam)
                        If rcpt.Available Then
                          If Not bretro Then
                            vente = rcpt!compt_fam
                          Else
                            vente = rcpt!compt5_fam
                          Endif
                          If Not IsNull($depot) Then
                            rDep = Utils.db.Exec("SELECT * FROM Fiches_FamDep where fam = &1 and depot = &2", Fam, $depot)
                            If rDep.Available Then vente = rDep!compte
                          Endif
                          rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", vente)
                          If rResult.Available Then
                            ivente = rResult!intitule_cc
                          Endif
                          montant = Val(.cpoint(rlTck!mht))
                          If Not rTck!suppr Then
                            If rTck!type = "0" Then
                              If rTck!savoir = "1" Then
                                Maj_Totalisation(vente, ivente, "-" & montant)
                              Else
                                Maj_Totalisation(vente, ivente, montant)
                              Endif
                            Endif
                          Endif
                          tva = rcpt!cdtva_fam
                          rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabTvav") & " Where code_tva = &1", tva)
                          If rResult.Available Then
                            tva = rResult!cc_tva
                          Endif
                          rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", tva)
                          If rResult.Available Then
                            itva = rResult!intitule_cc
                          Endif
                          rlTck2 = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigTck") & " where numero = &1 and type = &2 and numlig = &3", rTck!numero, "T", rlTck!numlig, rlTck!code, rlTck!block)
                          If rlTck2.Available Then
                            montant = Val(.cpoint(rlTck2!mtva))
                          Else
                            rlTck2 = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigTck") & " where numero = &1 and type = &2 and numlig = &3", rTck!numero, "M", rlTck!numlig, rlTck!code, rlTck!block)
                            If rlTck2.Available Then
                              montant = Val(.cpoint(rlTck2!mtva))
                            Else
                              montant = Val(.cpoint(rlTck!mtva))
                            Endif
                          Endif
                        Endif
                        If IsNull(montant) Then montant = 0
                        If rlTck!type = "S" Then
                          rlTck.MoveNext()
                          If rlTck!type <> "T" Then
                            rlTck.MovePrevious()
                            If rlTck!type = "O" Then
                              rlTck.MovePrevious()
                            Endif
                          Endif
                        Endif
                      Endif
                      Utils.db.Exec("INSERT INTO " & Cbase.Table("TabHisLigTck") & " (numero, numlig, code, intitule, montant, qte, type, fam, mht, mrem, tva) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11})", rltck!numero, rltck!numlig, code, $intit, rltck!montant, qte, rltck!type, Fam, rltck!mht, rltck!mrem, rltck!tva)
                      If Not rTck!suppr Then
                        If rTck!savoir = "1" Then
                          If rlTck!type <> "L" And If rlTck!type <> "M" And If rlTck!type <> "C" Then Maj_Totalisation(Tva, iTva, "-" & montant)
                        Else
                          If rlTck!type <> "L" And If rlTck!type <> "M" And If rlTck!type <> "C" Then Maj_Totalisation(Tva, iTva, montant)
                        Endif
                      Endif
                    Endif
                  Until rlTck.MoveNext()
                Endif

                'On regroupe les BL règlés dans ce ticket pour chaque client concerné afin de générer une facture
                Bl = Utils.db.Exec(" select * from " & Cbase.Table("TabBl") & " where type = \"B\" and numtick = &1 group by cdclibl", rtck!numero)
                If Bl.Available And Not rTck!suppr Then
                  'on regroupe tous les BLs du meme clients pour le meme numero de ticket pour la generation de facture
                  numbon = Val(numbon) + 1
                  numbon = Format$(numbon, "000000")
                  RegroupBL.Ent_Bl(Bl!cdclibl, numbon, False, rtck!numero)
                  Blg = Utils.db.Exec(" select * from " & Cbase.Table("TabBl") & " where type = \"B\" and numbl = &1", numbon)
                  If Blg.Available
                    'recuperation et maj du n° facture
                    respar = Utils.db.Exec("SELECT * FROM Fiches_Parametres")
                    If (respar!nfac <> 0)
                      snfac = Str(Format$(Now, "yymm")) & Format(Val(respar!dnfac) + 1, "000000")
                    Else
                      snfac = Str(Format$(Now, "yyyy")) & Format(Val(respar!dnfac) + 1, "000000")
                    Endif
                    dnfac = Format(Val(respar!dnfac) + 1, "000000")
                    utils.db.Exec("UPDATE Fiches_Parametres set dnfac = &1", dnfac)
                    Utils.db.Exec("UPDATE " & Cbase.Table("TabBl") & " set type = \"F\", numtick = NULL, imp = 1, reg = \"Caisse\", mtreg = &2, numfac = &3, dtefac = &4, ech = &4 where numbl = &1", numbon, Blg!totalttc, snfac, Utils.Cdate2_Dbase(Left$(rtck!date, 10)))
                    'On genere les Mvt pour le clients
                    If Blg!totalttc < 0 Then
                      bl_cli_credit = 0
                      bl_cli_debit = Abs(Blg!totalttc)
                    Else
                      bl_cli_credit = Blg!totalttc
                      bl_cli_debit = 0
                    Endif
                    Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnl, numr, Blg!cdclibl, "Reglement BL Caisse", Utils.Cdate_Dbase(Datem), snfac, snfac, Left$("Facture " & Blg!nmclibl, 30), bl_cli_debit, bl_cli_credit, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
                    Sha1Calc.CalcSha1(numr)
                    Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnl, numr, Client, "Reglement BL Caisse", Utils.Cdate_Dbase(Datem), snfac, snfac, Left$("Facture " & Blg!nmclibl, 30), bl_cli_credit, bl_cli_debit, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
                    Sha1Calc.CalcSha1(numr)
                    numr = numr + 1
                    numr2 = numr2 + 1
                    Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Blg!cdclibl, "Reglement BL Caisse", Utils.Cdate_Dbase(Datem), snfac, snfac, Left$("Rglt Caisse Facture " & Blg!nmclibl, 30), bl_cli_credit, bl_cli_debit, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
                    Sha1Calc.CalcSha1(numr)
                    Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, "Reglement BL Caisse", Utils.Cdate_Dbase(Datem), snfac, snfac, Left$("Rglt Caisse Facture " & Blg!nmclibl, 30), bl_cli_debit, bl_cli_credit, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
                    Sha1Calc.CalcSha1(numr)
                    'on incremente le numero d'ecriture pour la suite des Mvt
                    numr = numr + 1
                    numr2 = numr2 + 1
                  Else
                    Message.Warning("Le BL " & numbon & " du client " & Bl!nmclibl & " est inexistant le regroupement de BL n'a pas fonctionné")
                  Endif
                Endif

              Endif
              'Puis on gère les clients en compte
              scli = rTck!client
              If rTck!type = "1" And Not rTck!suppr Then
                'On increment le numero de bon
                numbon = Val(numbon) + 1
                numbon = Format$(numbon, "000000")
                numlig = 0
                rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabCli") & " Where cli_code = &1", scli)
                If rResult.Available Then
                  cvclibl = rResult!cli_rs_soc
                  nmclibl = rResult!cli_nom
                  pnmclibl = rResult!cli_pnm
                  adr1bl = rResult!cli_adr1
                  adr2bl = rResult!cli_adr2
                  cpbl = rResult!cli_cd_ptl
                  villebl = rResult!cli_ville
                  typec = rResult!cli_typec
                  artrm = rResult!cli_rart
                  rmobl = rResult!cli_rmo
                  Exo = rResult!cli_exo
                Endif
                Remart = "0.00"
                totalht = 0
                totalttc = 0
                'On met à jour le fichier des entetes de bl
                Utils.db.Exec("INSERT INTO " & Cbase.Table("TabBl") & "(numbl,datebl,cdclibl, nmclibl, rmobl, rartbl, type, pnmclibl, adr1bl, adr2bl, cpbl, villebl, exobl, cvclibl, tvar, imp, acpt, mreg, totalht, totalttc, retro, marge_art, remmobl, remartbl, marge_mo) VALUES (&1,&2,&3,&4,&5,&6,&7,&8,&9,&{10},&{11},&{12},&{13},&{14},&{15}, &{16}, &{17}, &{18}, &{19}, &{20}, &{21}, &{22}, &{23}, &{24}, &{25})", numbon, Utils.Cdate_Dbase(Datem), scli, nmclibl, rmobl, Artrm, "B", Pnmclibl, adr1bl, adr2bl, cpbl, villebl, Exo, Cvclibl, 0, 0, 0, "", .PointBase(totalht), .PointBase(totalttc), 0, 0, 0, 0, 0)
                'On met à jour les lignes de bl
                Inc numlig
                nmlig = Format$(Str(numlig), "0000")
                Bloc = nmlig
                origine = "Ticket de caisse numéro " & rTck!numero & " du " & rTck!date
                Utils.db.Exec("INSERT INTO " & Cbase.Table("TabLigbl") & "(num_ligbl, numlig_ligbl, com_ligbl, typel_ligbl, block_ligbl) VALUES (&1, &2, &3, &4, &5)", numbon, nmlig, origine, "C", Bloc)
                rlTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabLigTck") & " where numero = &1 order by lInd", rTck!numero)
                If rlTck.Available Then
                  Repeat
                    If rlTck!type = "A" Then
                      qte = rlTck!qte
                      Recup_Art(rlTck!code, qte, rlTck!mht, rlTck!montant, rlTck!tva)
                      Inc numlig
                      nmlig = Format$(Str(numlig), "0000")
                      Bloc = nmlig
                      Remart = Val(.cpoint(Remart)) + Val(.cpoint(artbrut)) - Val(.cpoint(artnet))
                      totalht = totalht + Val(.cpoint(artnet))
                      totalttc = totalttc + Val(.cpoint(Arttc))
                      Utils.db.Exec("INSERT INTO " & Cbase.Table("TabLigbl") & "(num_ligbl, numlig_ligbl,code_ligbl, libel_ligbl, fam_ligbl, pu_ligbl, qte_ligbl, brut_ligbl, rem_ligbl, netht_ligbl, tx_ligbl, nettc_ligbl, typel_ligbl, dec_ligbl, block_ligbl) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15})", numbon, nmlig, rlTck!code, artdsg, artfam, artpu, qte, artbrut, Artrm, artnet, Arttx, Arttc, "A", Nbd, Bloc)
                    Endif
                    If rlTck!type = "O" Then
                      'Eco participation
                      If rlTck!intitule = " Dont Eco-taxe" Then
                        Inc numlig
                        nmlig = Format$(Str(numlig), "0000")
                        totalht = totalht + Val(.cpoint(rlTck!montant))
                        totalttc = totalttc + Val(.cpoint(rlTck!montant))
                        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabLigbl") & "(num_ligbl, numlig_ligbl,code_ligbl, libel_ligbl, fam_ligbl, pu_ligbl, qte_ligbl, brut_ligbl, rem_ligbl, netht_ligbl, tx_ligbl, nettc_ligbl, typel_ligbl, dec_ligbl, block_ligbl) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15})", numbon, nmlig, rlTck!code, rlTck!intitule, "", Format$(Val(rlTck!montant), "0.00"), "1", Format$(Val(rlTck!montant), "0.00"), 0, Format$(Val(rlTck!montant), "0.00"), Arttx, Format$(Val(rlTck!montant), "0.00"), "E", "0", Bloc)
                      Endif
                    Endif
                  Until rlTck.MoveNext()
                  Utils.db.Exec("UPdate  " & Cbase.Table("TabBl") & "  SET marge_art = &2, remartbl = &3, totalht = &4, totalttc = &5 where numbl = &1", numbon, marge, Remart, totalht, totalttc)
                Endif
              Endif
            Endif
          Until rTck.MoveNext()
          Verif()
          Verif_Caisse = Maj_Compta()
          Maj_Tresorerie(Verif_Caisse)
          RegroupBL.Maj_Parametres(numbon)
          Utils.db.Exec("UNLOCK TABLES")
          'On recalcule les soldes
          'Csolde.Recalc_solde()
          'On imprime le livre de caisse
          Livre_caisse()
          'On efface les Tables
          rTck = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where mid(date,7,4) = &1 and mid(date,4,2) = &2 and left(date,2) = &3", Format$(DateChooser1.Value, "yyyy"), Format$(DateChooser1.Value, "mm"), Format$(DateChooser1.Value, "dd"))
          If rTck.Available Then
            Repeat
              Utils.db.Exec("delete FROM " & Cbase.Table("TabEntTck") & " where numero = &1", rTck!numero)
              Utils.db.Exec("delete FROM " & Cbase.Table("TabLigTck") & " where numero = &1", rTck!numero)
            Until rTck.MoveNext()
          Endif
          Utils.db.Exec("delete from " & Cbase.Table("TabReglt") & " where date = &1", Format$(DateChooser1.Value, "dd-mm-yyyy"))
          'Raz_Tables()
          Me.mouse = Mouse.Default
          If start.son Then Music.Play
          Message.Info("Traitement terminé !")
        Else
          If start.son Then Music.Play
          Message.Info("Aucune donnée n'est a traiter pour cette sélection !")
        Endif
      Endif
    Else
      If start.son Then Music.Play
      Message.Info("Acune donnée n'est a traiter pour cette sélection !")
    Endif
  End With
  Me.Mouse = mouse.Default

End

Public Sub Raz_Tables()

  Try Utils.db.EXEC("CREATE TABLE " & Cbase.Table("TabReglt") &
    "(lInd INT NOT NULL AUTO_INCREMENT," &
    "intitule Char(30)," &
    "montant Char(12)," &
    "qte Char(12)," &
    "type Char(15)," &
    "caisse Char(2)," &
    "date Char(17)," &
    "PRIMARY KEY (lInd))" & "ENGINE = MYISAM")

  Try Utils.db.EXEC("CREATE TABLE " & Cbase.Table("TabEntTck") &
    "(lInd INT NOT NULL AUTO_INCREMENT," &
    "caisse Char(2)," &
    "vendeur Char(35)," &
    "numero Char(7)," &
    "date Char(17)," &
    "client Char(30)," &
    "scheque Char(1)," &
    "mcheque Char(12)," &
    "nmcheque Char(30)," &
    "scarte  Char(1)," &
    "nmcarte Char(30)," &
    "mcarte Char(12)," &
    "sespeces Char(1)," &
    "mespeces Char(12)," &
    "scredit  Char(1)," &
    "mcredit Char(12)," &
    "nmcredit Char(30)," &
    "sbachat  Char(1)," &
    "mbachat Char(12)," &
    "scavoir  Char(1)," &
    "mavoir Char(12)," &
    "nmavoir Char(30)," &
    "sresto  Char(1)," &
    "mresto Char(12)," &
    "mht Char(12)," &
    "mtva Char(12)," &
    "mttc Char(12)," &
    "statut Char(1)," &
    "savoir Char(1) ," &
    "type Char(1) ," &
    "mrem Char(12)," &
    "carte Char(13)," &
    "points Decimal(12,3)," &
    "suppr TINYINT(1)," &
    "control VARCHAR(40), " &
    "PRIMARY KEY (lInd))" & "ENGINE = MYISAM")

  Try Utils.db.EXEC("CREATE TABLE " & Cbase.Table("TabLigTck") &
    "(lInd INT NOT NULL AUTO_INCREMENT," &
    "numero Char(7)," &
    "numlig Char(3)," &
    "code Char(15)," &
    "intitule  Char(50)," &
    "montant Char(12)," &
    "qte Char(12)," &
    "type Char(1)," &
    "fam Char(5)," &
    "mht Char(12)," &
    "mrem Char(12)," &
    "mtva Char(12)," &
    "PRIMARY KEY (lInd))" & "ENGINE = MYISAM")

End

Public Sub Recup_Art(code As String, qtea As String, mht As String, mttc As String, tva As String)

  Dim Remtypec As Result
  Dim Rarts As Result
  'Dim prix_ht As String
  'Dim prix_ttc As String

  With utils
    Rarts = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabArt") & " where art_code = &1", Code)
    If Rarts.Available Then
      Artdsg = Rarts!art_design
      Artdsg2 = Rarts!art_design2
      Artfam = Rarts!art_fam
      Nbd = Rarts!art_nbd ' décimale des prix
      Decq = Rarts!art_dec ' décimale des quantités
      Nbdec = .Find_Nbdec(Nbd)
      Paht = Format$(Rarts!art_paht, "0.000")
      Pmp = Rarts!art_pmp
      Artpu = Format$(Rarts!art_pvht, Nbdec)
      Artbrut = Format(Val(Artpu), Nbdec)
      'Article sans prix défini, on utilise le montant défini en caisse
      'Meme chose si le prix de l'article à été modifié depuis la caisse
      If (Val(.cpoint(artpu)) = 0 Or (Artpu <> mht)) Then
        Artbrut = Format(Val(mht), Nbdec)
      Endif
      If IsNull(artrm) Then
        Remtypec = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabRemTypec") & " where coder = &1 and codef = &2", Typec, Artfam)
        If RemTypec.Available Then
          Artrm = RemTypec!remise
          RemType = Artrm
        Endif
      Endif
      arr = Rarts!art_cdarr
      Arttx = Rarts!art_tva
      Decm = Rarts!art_dec
      Ecot = Rarts!art_eco
      Tcp = Rarts!art_cpp
      Try Rms[0, 0] = Str(Rarts!qte1)
      Try Rms[0, 1] = Str(Rarts!qte2)
      Try Rms[0, 2] = Str(Rarts!rem1)
      Try Rms[1, 0] = Str(Rarts!qte3)
      Try Rms[1, 1] = Str(Rarts!qte4)
      Try Rms[1, 2] = Str(Rarts!rem2)
      Try Rms[2, 0] = Str(Rarts!qte5)
      Try Rms[2, 1] = Str(Rarts!qte6)
      Try Rms[2, 2] = Str(Rarts!rem3)
      Try Rms[3, 0] = Str(Rarts!qte7)
      Try Rms[3, 1] = Str(Rarts!qte8)
      Try Rms[3, 2] = Str(Rarts!rem4)
      Try Rms[4, 0] = Str(Rarts!qte9)
      Try Rms[4, 1] = Str(Rarts!qte10)
      Try Rms[4, 2] = Str(Rarts!rem5)
      Try Rms[5, 0] = Str(Rarts!qte11)
      Try Rms[5, 1] = Str(Rarts!qte12)
      Try Rms[5, 2] = Str(Rarts!rem6)
      If ((Val(.cpoint(artpu)) <> 0) And (Artpu = Format$((Val(.CPoint(mht)) / Val(.CPoint(Qtea))), "0.00"))) Then
        Artbrut = Format$(Val(.CPoint(Artpu)) * Val(.CPoint(Qtea)), Nbdec)
      Else
        artpu = Format$(Val(.CPoint(Artbrut)) / Val(.CPoint(Qtea)), Nbdec)
      Endif
      Remises_quantitatives()
      Decimal()
      'Si le calcul de l'article ttc et le montant ttc de la ligne du ticket correspondant diffère c'est
      'que le prix de l'article a été modifié et non vu depuis le HT ou que l'arrondi ne fonctionne pas en caisse
      'prix_ht = Format$((Val(.CPoint(mht)) - (Val(.CPoint(mht)) * Val(.CPoint(Artrm)) / 100)), "0.00")
      'prix_ttc = arrondi((.cpoint(Val(.CPoint(prix_ht)) + (Val(.CPoint(prix_ht)) * Val(.CPoint(tva)) / 100))), arr)
      'If ((Val(.cpoint(artpu)) <> 0) And (Val(.cpoint(Arttc)) <> Val(.CPoint(prix_ttc)))) Then
      '  Message.Warning("Le prix de vente ttc de l'article\n" & Code & " : " & Artdsg & "\nen caisse (" & mttc & ",remise:" & Artrm & "%) et en gestion (" & Arttc & ") sont incoherent")
      'Endif
      If Val(Artrm) <> 0 Then
        Try Artnet = Format$(Val(.CPoint(Artbrut)) - (Val(.CPoint(Artbrut)) * Val(.CPoint(Artrm)) / 100), Nbdec)
      Else
        Artnet = Format(Val(Artbrut), Nbdec)
      Endif
      Calc_Marge()
    Endif

  End With

End

'*****************************************
'* On récupère les remises quantitatives *
'*****************************************
Public Sub Remises_quantitatives()

  Dim i As Integer

  With Utils
    For i = 0 To Rms.Bounds[0] - 1
      If IsNull(Rms[i, 2]) Then
        Break
      Else
        If Val(Utils.cpoint(Qte)) >= Val(.Cpoint(rms[i, 0])) And Val(Utils.cpoint(qte)) <= Val(.Cpoint(rms[i, 1])) Then
          Try Artrm = Val(Artrm) + RemType + Val(.Cpoint(Rms[i, 2]))
          If Error Then Artrm = Val(Artrm)
          Break
        Endif
      Endif
    Next
    If Val(Artrm) <> 100 And Not IsNull(Artrm) Then
      ArtNet = Format$(Val(.CPoint(Artbrut)) - (Val(.CPoint(Artbrut)) * Val(.CPoint(Artrm)) / 100), Nbdec)
      Calcttc()
    Else
      ArtNet = "0"
      Arttc = "0"
    Endif
  End With

End

'*********************************
'* Calcul du TTC du produit      *
'*********************************
Public Sub CalcTTC()

  Recup_Tva()
  Arttc = Val(Utils.CPoint(Artnet)) + (Val(Utils.CPoint(Artnet)) * Ttva / 100)
  Arttc = arrondi(Arttc, arr)
  tx = 1 + (Ttva / 100)
  Artnet = Format$(Val(Utils.CPoint(Arttc)) / Tx, Nbdec)
  If Val(Artrm) = 0 Then Artnet = Artbrut

End

'************************
'* Recup de la Tva      *
'************************
Public Sub Recup_Tva()

  Dim hResult As Result

  Ttva = 0
  hResult = Utils.db.Exec("select * from " & Cbase.Table("TabTvav") & " where code_tva = &1 ", Arttx)
  If hResult.Available Then
    Ttva = hResult!taux_tva
  Endif

End

'*********************************
'* Calcul du nombre de decimal   *
'*********************************
Public Sub Decimal()

  With Utils
    qte = .CPoint(qte)
    If Decq = "0" Then
      qte = Format$(Val(qte), "0")
    Else
      If Decq = "2" Then
        qte = Format$(Val(qte), "0.00")
      Else
        If decq = "3" Then
          qte = Format$(Val(qte), "0.000")
        Endif
      Endif
    Endif
  End With

End

'***********************************
'*        On gère l' arrondi       *
'***********************************
Public Sub arrondi(montant As String, arrondi As String) As String

  Try montant = Format$(Val(Utils.CPoint(montant)), "0.00")
  If Not montant Then montant = "0,00"
  If arrondi = "0,05" Then
    If Right$(montant) Like "[34567]*" Then
      montant = Left$(montant, (Len(montant) - 1)) & "5"
    Else
      montant = Round(Val(montant), -1)
    Endif
  Endif

  If arrondi = "0,10" Then
    montant = Round(Val(montant), -1)
  Endif

  If arrondi = "0,50" Then
    If Abs(Val(montant)) <= Abs(Val(Left$(montant, (Len(montant) - 2)) & 25)) Then
      montant = Left$(montant, (Len(montant) - 2)) & "00"
    Else
      If Abs(Val(montant)) <= Abs(Val(Left$(montant, (Len(montant) - 2)) & 75)) Then
        montant = Left$(montant, (Len(montant) - 2)) & "50"
      Endif
      If Abs(Val(montant)) >= Abs(Val(Left$(montant, (Len(montant) - 2)) & 76)) Then
        montant = Round(Val(montant))
      Endif
    Endif
  Endif

  If arrondi = "1,00" Then
    montant = Round(Val(montant))
  Endif

  Return montant

End

Public Sub Calc_Marge()

  Dim rMrg As Result

  With utils
    If Pmp = 0 Then
      rMrg = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabFam") & " WHERE code_fam = &1", ArtFam)
      Try Marge = Val(.cpoint(marge)) + Val(.cpoint(Artnet)) / Val(.cpoint(rMrg!coef_fam))
    Else
      Try Marge = Val(.cpoint(marge)) + Val(.cpoint(Artnet)) - (Pmp * Val(.cpoint(qte)))
    Endif
  End With

End
'**********************************************************
'*      Creation table temporaire pour totalisation       *
'**********************************************************

Public Sub Ventilation()

  Utils.db.Exec("DROP TABLE IF EXISTS  Totalisation ")
  Utils.db.Exec("CREATE TABLE " & Cbase.Table("Totalisation") &
    "(compte Char(8) NOT NULL," &
    "intitule Char(40)," &
    "totalttc Char(25)," &
    "totalht Char(25)," &
    "totaltva Char(25)," &
    "PRIMARY KEY (compte))" & "ENGINE = MYISAM")

End

'**********************************************************
'*  Creation table temporaire pour virements internes     *
'**********************************************************
Public Sub Virements()

  Utils.db.Exec("DROP TABLE IF EXISTS  Virements ")
  Utils.db.Exec("CREATE TABLE " & Tab &
    "(compte Char(8) NOT NULL," &
    "intitule Char(35)," &
    "type Char(1)," &
    "montant Decimal(12,2)," &
    "PRIMARY KEY (compte, type))" & "ENGINE = MYISAM")

End

'*****************************************************
'*  Récuperation du dernier numéro d'écriture        *
'*****************************************************
Public Function Ecritures(numecr2 As String) As String

  Dim Params As Result
  Dim nro As String

  Params = Utils.db.Exec("SELECT " & numecr & " FROM " & Cbase.Table("TabParam") & " ")
  If Params.Available Then
    If IsNull(Params["" & numecr2 & ""]) Then
      nro = 0
    Else
      nro = Params["" & numecr2 & ""]
    Endif
  Endif
  Return nro

End

'************************************************
'*  Mise a jour du dernier numéro d'écriture    *
'************************************************
Public Sub Majnum()

  Utils.db.Exec("UPDATE " & Cbase.Table("TabParam") & " set numecriture = &1, numecriture2 = &2", numr, numr2)

End

'**********************************************************
'*                   Recup parametres                     *
'**********************************************************
Public Sub Parametres()

  Dim rJnl As Result
  Dim rcli As Result
  Dim rcol As Result
  Dim colcpt As String
  'On récupère le journal des ventes
  rJnl = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabParam") & " ")
  If rJnl.Available Then
    Jnl = rJnl!jrnal4
    If IsNull(Jnl) Then Jnl = rJnl!jrnal
    Jnal3 = rJnl!jrnal3
    If IsNull(Jnal3) Then Jnal3 = rJnl!jrnal
  Endif
  'On recupère les données pour la trésorerie.
  If rJnl.Available Then
    Jnal = rJnl!jrnal2
    Vic = rJnl!viremc
    Vichq = rJnl!viremchq
    Viautre = rJnl!virema
  Endif
  rcli = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabCliCaisse") & "")
  If rcli.Available Then
    Client = rcli!code
    Nclient = rcli!nom
  Endif
  rcol = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " where coll = &1 order by cast(compte_cc AS char)", "1")
  If rcol.Available Then
    Repeat
      Colcpt = rcol!compte_cc
      If Left$(Colcpt, 2) = Left$(Client, 2) Then
        collectif = Colcpt
        Break
      Endif
    Until rcol.MoveNext()
  Endif

End

'**********************************************************
'*                   Maj Totalisation                     *
'**********************************************************
Public Sub Maj_Totalisation(cpt As String, intit As String, montant As String)

  Dim hResult As Result
  Dim Mtnt As String

  With utils
    hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("Totalisation") & " Where compte = &1", Cpt)
    'Si le compte existe dans la table temporaire
    If hResult.Available Then
      If Left$(cpt, 3) = "411" Then
        Mtnt = Format$(Val(.cpoint(montant)) + Val(.cpoint(hResult!totalttc)), "0.00")
        Utils.db.Exec("UPDATE " & Cbase.Table("Totalisation") & " set totalttc = &2 Where compte = &1 ", Cpt, mtnt)
      Else
        If Left$(cpt, 3) = "709" Then
          Mtnt = Format$(Val(.cpoint(montant)) + Val(.cpoint(hResult!totalht)), "0.00")
          Utils.db.Exec("UPDATE " & Cbase.Table("Totalisation") & " set totalht = &2 Where compte = &1 ", Cpt, mtnt)
        Else
          Try mtnt = Format$(Val(.cpoint(montant)) + Val(.cpoint(hResult!totalht)), "0.00")
          If Not Error Then Utils.db.Exec("UPDATE " & Cbase.Table("Totalisation") & " set totalht = &2 Where compte = &1 ", Cpt, mtnt)
        Endif
      Endif
    Else
      'Si le compte n'existe pas dans la table temporaire
      If Left(cpt, 3) = "411" Then
        Utils.db.Exec("INSERT INTO " & Cbase.Table("Totalisation") & "(compte, intitule, totalttc) VALUES (&1, &2, &3)", Cpt, intit, montant)
      Else
        If Not IsNull(cpt) Then Utils.db.Exec("INSERT INTO " & Cbase.Table("Totalisation") & "(compte, intitule, totalht) VALUES (&1, &2, &3)", Cpt, intit, montant)
      Endif
    Endif
  End With

End

Public Sub Verif()

  Dim hResult As Result
  Dim sCompte As String
  Dim sTotalD As String = "0"
  Dim sTotalC As String = "0"
  Dim sdif As Float

  With utils
    hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("Totalisation") & " order by compte")
    If hResult.Available Then
      Repeat
        If Left$(hResult!compte, 3) = "411" Then
          sTotalD = hResult!totalttc
        Else
          sTotalC = Val(.cpoint(sTotalC)) + Val(.cpoint(hResult!totalht))
          sCompte = hResult!compte
        Endif
      Until hResult.MoveNext()
      hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("Totalisation") & " Where compte = &1", sCompte)
      If hresult.Available Then
        If Val(.cpoint(sTotalD)) < Val(.cpoint(sTotalC)) Then
          sDif = Val(.cpoint(sTotalC)) - Val(.cpoint(sTotalD))
          sDif = Val(.cpoint(hResult!totalht)) - sDif
          Utils.db.Exec("UPDATE " & Cbase.Table("Totalisation") & " set totalht = &2 Where compte = &1 ", sCompte, sDif)
        Else
          If Val(.cpoint(sTotalD)) > Val(.cpoint(sTotalC)) Then
            sDif = Val(.cpoint(sTotalD)) - Val(.cpoint(sTotalC))
            sDif = Val(.cpoint(hResult!totalht)) + sDif
            Utils.db.Exec("UPDATE " & Cbase.Table("Totalisation") & " set totalht = &2 Where compte = &1 ", sCompte, sDif)
          Endif
        Endif
      Endif
    Endif
  End With

End

'**********************************************************
'*                   Maj comptabilité                     *
'**********************************************************
Public Sub Maj_Compta() As Float

  Dim Cpt As String
  Dim coll As String
  Dim Libel As String
  Dim Mtc As Float
  Dim Mtd As Float
  Dim Sld As Float
  Dim SldTot As Float
  Dim Verif_Caisse As Float
  Dim Valid As Integer
  Dim Prov As Integer
  Dim Tresor As Integer
  Dim Pointee As Integer
  Dim Lettree As Integer
  Dim Cloturee As Integer
  Dim Relance As Integer
  Dim intit As String
  Dim rResult As Result
  Dim hResult As Result
  Dim numlt As String

  Valid = 1
  Prov = 0
  Tresor = 0
  Pointee = 0
  Lettree = 1
  Cloturee = 1
  Relance = 0
  Verif_Caisse = 0
  Datem = Format$(DateChooser1.Value, "dd.mm.yyyy")
  Numlt = Format$(DateChooser1.Value, "ddmmyyyy")
  With Utils
    rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("Totalisation") & "")
    If rResult.Available Then
      Libel = "Caisse du " & Datem
      Repeat
        collectif = ""
        Cpt = rResult!compte
        Intit = rResult!intitule
        If Left$(Cpt, 3) = "411" Then
          hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", Cpt)
          coll = hResult!coll_cc
          collectif = "1"
          Mtd = Val(.cpoint(rResult!totalttc))
          Verif_Caisse = Mtd
          If Mtd < 0 Then
            Mtc = Abs(Mtd)
            Mtd = 0
          Endif
          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, collectif, intitule, dte, libelle, montantd, montantc, validee, provisoire, tresorerie, pointee, lettree, cloturee, relance, numerodef, numdoc, numlot) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18}, &{19})", Jnl, numr, coll, collectif, Intit, .Cdate_Dbase(Datem), Libel, Mtd, Mtc, Valid, Prov, Tresor, Pointee, lettree, Cloturee, Relance, numr2, Numlt, numlt)
          Sha1Calc.CalcSha1(numr)
          hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", coll)
          If hresult.Available Then
            If hResult!solde = "" Then
              Sld = Mtd - Mtc
            Else
              Sld = hResult!solde + Mtd - Mtc
            Endif
          Endif
          Utils.db.Exec("UPDATE " & Cbase.Table("TabComptes") & " set solde = &2 Where compte_cc = &1", coll, Sld)
          collectif = ""
        Endif
        If Left$(Cpt, 3) <> "411" And Left$(Cpt, 3) <> "445" Then
          If Left$(rResult!compte, 3) <> "709" Then
            If rResult!totalht And Val(.cpoint(rResult!totalht)) > 0 Then
              Mtc = Val(.cpoint(rResult!totalht))
              Mtd = 0
            Else
              Mtd = Val(.cpoint(rResult!totalht))
              Mtc = 0
            Endif
          Else
            If rResult!totalht And Val(.cpoint(rResult!totalht)) > 0 Then
              Mtd = Val(.cpoint(rResult!totalht))
              Mtc = 0
            Else
              Mtc = Val(.cpoint(rResult!totalht))
              Mtd = 0
            Endif
          Endif
        Endif
        If Left$(Cpt, 3) = "445" Then
          If Not IsNull(rResult!totalht) Then
            If Val(.cpoint(rResult!totalht)) > 0 Then
              Mtc = Val(.cpoint(rResult!totalht))
              Mtd = 0
            Else
              Mtd = Abs(Val(.cpoint(rResult!totalht)))
              Mtc = 0
            Endif
          Endif
        Endif
        Mtd = Abs(Mtd)
        Mtc = Abs(Mtc)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, libelle, montantd, montantc, validee, provisoire, tresorerie, pointee, lettree, cloturee, relance, numerodef, numdoc, numlot) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18})", Jnl, numr, Cpt, Left$(Intit, 40), .Cdate_Dbase(Datem), Left$(Libel, 30), Mtd, Mtc, Valid, Prov, Tresor, Pointee, lettree, Cloturee, Relance, numr2, Numlt, numlt)
        Sha1Calc.CalcSha1(numr)
        hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", Cpt)
        SldTot = SldTot + Mtd - Mtc
        If hResult!solde = "" Then
          Sld = Mtd - Mtc
        Else
          Sld = hResult!solde + Mtd - Mtc
        Endif
        Utils.db.Exec("UPDATE " & Cbase.Table("TabComptes") & " set solde = &2 Where compte_cc = &1", Cpt, Sld)
        Mtd = 0
        Mtc = 0
        Try Utils.db.Exec("delete FROM " & Cbase.Table("Totalisation") & " where compte = &1", Cpt)
      Until rResult.MoveNext()
      Sha1Calc.CalcSha1(Numr)
      If Round(SldTot, -3) <> 0 Then
        Message.Warning("Une erreur de moulinage importante est survenu!\nLa ventilation du montant de la caisse donne un solde de\n" & CStr(Round(SldTot, -3)) & "\nVeuillez corriger manuellement l'ecriture " & numr & ".")
      Endif
      Majnum()
    Endif
  End With
  Return Verif_Caisse

End

Public Sub Maj_Tresorerie(Verif_Caisse As Float)

  Dim rResult As Result
  Dim hResult As Result
  Dim MtTot As Float = 0
  Dim CptCli As String
  Dim libel, nom As String
  Dim Nfac As String = Format$(Now, "ddmmyyyy")
  Dim Snom As String
  Dim Nm As String[]
  Dim Mtd As Float
  Dim SldTot As Float
  Dim x As Integer
  Dim ChequeCptInt As Boolean

  SldTot = Verif_Caisse
  Try ChequeCptInt = Settings["/Soc" & Start.Societe & "/Cheque"]
  If Error Then ChequeCptInt = False
  rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabJour") & " where code_jo = &1", jnal)
  CptCaisse = rResult!cde_banque

  ' On fait le total des especes
  hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where sespeces = &1", "N")
  If hResult.Available Then
    Repeat
      If Mid(hResult!date, 7, 4) & Mid(hResult!date, 4, 2) & Left(hResult!date, 2) = Format$(DateChooser1.Value, "yyyy") & Format$(DateChooser1.Value, "mm") & Format$(DateChooser1.Value, "dd") Then
        Cptcli = hresult!client
        rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " where compte_cc = &1", hResult!client)
        Nom = rresult!intitule_cc
        rResult = Utils.db.Exec("SELECT * FROM " & Tab & " where compte = &1 and type = &2", Client, "N")
        SldTot = SldTot - Val(utils.cpoint(hResult!mespeces))
        If rresult.Available Then
          MtTot = Val(Utils.cpoint(rResult!montant)) + Val(utils.cpoint(hResult!mespeces))
          Utils.db.Exec("UPDATE " & Tab & " set montant = &3, intitule = &4 Where compte = &1 and type = &2", Client, "N", MtTot, nom)
        Else
          Utils.db.Exec("INSERT INTO " & Tab & "(compte, type, montant, intitule) VALUES (&1, &2, &3, &4)", Client, "N", Val(Utils.cpoint(hResult!mespeces)), nom)
        Endif
        Csolde.Solde_caisse(Client)
      Endif
    Until hResult.MoveNext()
  Endif
  ' On fait le total des chèques
  'MtTot = 0
  If ChequeCptInt
    hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where scheque = &1", "V")
    If hResult.Available Then
      Repeat
        If Mid(hResult!date, 7, 4) & Mid(hResult!date, 4, 2) & Left(hResult!date, 2) = Format$(DateChooser1.Value, "yyyy") & Format$(DateChooser1.Value, "mm") & Format$(DateChooser1.Value, "dd") Then
          Cptcli = hresult!client
          rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " where compte_cc = &1", hResult!client)
          Nom = rresult!intitule_cc
          rResult = Utils.db.Exec("SELECT * FROM " & Tab & " where compte = &1 and type = &2", Client, "V")
          SldTot = SldTot - Val(utils.cpoint(hResult!mcheque))
          If rresult.Available Then
            MtTot = Val(Utils.cpoint(rResult!montant)) + Val(utils.cpoint(hResult!mcheque))
            Utils.db.Exec("UPDATE " & Tab & " set montant = &3, intitule = &4 Where compte = &1 and type = &2", Client, "V", MtTot, nom)
          Else
            Utils.db.Exec("INSERT INTO " & Tab & "(compte, type, montant, intitule) VALUES (&1, &2, &3, &4)", Client, "V", Val(Utils.cpoint(hResult!mcheque)), nom)
          Endif
          Csolde.Solde_caisse(Client)
        Endif
      Until hResult.MoveNext()
    Endif
  Else
    'On mouvemente la table des bordereaux de chèques.
    hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where scheque = &1", "V")
    If hResult.Available Then
      Repeat
        If Mid(hResult!date, 7, 4) & Mid(hResult!date, 4, 2) & Left(hResult!date, 2) = Format$(DateChooser1.Value, "yyyy") & Format$(DateChooser1.Value, "mm") & Format$(DateChooser1.Value, "dd") Then
          Snom = ""
          nm = Split(hresult!nmcheque, " ")
          SldTot = SldTot - Val(utils.cpoint(hResult!mcheque))
          For x = 1 To nm.Count - 1
            Snom &= nm[x] & " "
          Next
          If IsNull(Snom) Then Snom = " "
          Utils.db.Exec("INSERT INTO " & "Fiches_BordereauxC" & "(code, nom, montant,dateremise,banque,nfacture) VALUES (&1, &2, &3, &4, &5, &6)", hresult!client, Snom, Val(Utils.cpoint(hResult!mcheque)), Utils.Cdate_Dbase(datem), jnal3, Right$(hresult!client, 4) & Replace$(Left$(datem, 5), ".", ""))
        Endif
      Until hResult.MoveNext()
    Endif
  Endif

  ' On fait le total des cartes
  MtTot = 0
  hResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where scarte = &1", "U")
  If hResult.Available Then
    Repeat
      If Mid(hResult!date, 7, 4) & Mid(hResult!date, 4, 2) & Left(hResult!date, 2) = Format$(DateChooser1.Value, "yyyy") & Format$(DateChooser1.Value, "mm") & Format$(DateChooser1.Value, "dd") Then
        Cptcli = hresult!client
        rResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " where compte_cc = &1", hResult!client)
        Nom = rresult!intitule_cc
        rResult = Utils.db.Exec("SELECT * FROM " & Tab & " where compte = &1 and type = &2", Client, "U")
        SldTot = SldTot - Val(utils.cpoint(hResult!mcarte))
        If rresult.Available Then
          MtTot = Val(Utils.cpoint(rResult!montant)) + Val(utils.cpoint(hResult!mcarte))
          Utils.db.Exec("UPDATE " & Tab & " set montant = &3, intitule = &4 Where compte = &1 and type = &2", Client, "U", MtTot, nom)
        Else
          Utils.db.Exec("INSERT INTO " & Tab & "(compte, type, montant, intitule) VALUES (&1, &2, &3, &4)", Client, "U", Val(Utils.cpoint(hResult!mcarte)), nom)
        Endif
        Csolde.Solde_caisse(Client)
      Endif
    Until hResult.MoveNext()
  Endif

  ' On génère l'écriture de trésorerie pour les especes
  hResult = Utils.db.Exec("SELECT * FROM " & Tab & " ")
  If hResult.Available Then
    numr = numr + 1
    numr2 = numr2 + 1
  Endif
  hResult = Utils.db.Exec("SELECT * FROM " & Tab & " where type = &1", "N")
  If hresult.Available Then
    Cptcli = hResult!compte
    Libel = "Espèces " & Datem
    Repeat
      If Val(Utils.cpoint(hResult!montant)) > 0 Then
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, hResult!montant, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1(numr)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, CptCaisse, "Espèces", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, hResult!montant, 0, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1(numr)
      Else
        Mtd = hResult!montant
        Mtd = Abs(Mtd)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, Mtd, 0, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1(numr)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, CptCaisse, "Espèces", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, Mtd, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1(numr)
      Endif
      Csolde.Solde_caisse(Client)
      Csolde.Solde_caisse(CptCaisse)
      Maj_Collectif(cptcli, hResult!intitule, libel, hResult!montant)
    Until hresult.MoveNext()
  Endif
  ' On génère l'écriture de trésorerie pour les chèques
  If ChequeCptInt
    hResult = Utils.db.Exec("SELECT * FROM " & Tab & " where type = &1", "V")
    If hresult.Available Then
      Cptcli = hResult!compte
      Libel = "Chèques caisse " & Datem
      Repeat
        If Val(Utils.cpoint(hResult!montant)) > 0 Then
          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, hResult!montant, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
          Sha1Calc.CalcSha1(numr)
          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Vichq, "Virements internes chèques", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, hResult!montant, 0, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
          Sha1Calc.CalcSha1(numr)
        Else
          Mtd = hResult!montant
          Mtd = Abs(Mtd)
          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, hResult!montant, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
          Sha1Calc.CalcSha1(numr)
          Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Vichq, "Virements internes chèques", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, hResult!montant, 0, 1, 1, 1, 0, 1, Utils.Cdate_Dbase(Datem), numr2)
          Sha1Calc.CalcSha1(numr)
        Endif
        Csolde.Solde_caisse(Client)
        Csolde.Solde_caisse(Vichq)
        Maj_Collectif(cptcli, hResult!intitule, libel, hResult!montant)
      Until hresult.MoveNext()
    Endif
  Endif

  ' On génère l'écriture de trésorerie pour les cartes
  hResult = Utils.db.Exec("SELECT * FROM " & Tab & " where type = &1", "U")
  If hresult.Available Then
    Cptcli = hResult!compte
    Libel = "Cartes caisse " & Datem
    Repeat
      If Val(Utils.cpoint(hResult!montant)) > 0 Then
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, hResult!montant, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1(numr)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Vic, "Virements internes cartes", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, hResult!montant, 0, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1(numr)
      Else
        Mtd = hResult!montant
        Mtd = Abs(Mtd)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, intitule, dte, numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Client, hResult!intitule, Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, 0, hResult!montant, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1(numr)
        Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour,numero,compte,intitule,dte,numdoc, numlot, libelle, montantd, montantc,validee, provisoire,tresorerie,lettree,Cloturee, datee, numerodef) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17})", Jnal, numr, Vic, "Virements internes cartes", Utils.Cdate_Dbase(Datem), Nfac, Nfac, Libel, hResult!montant, 0, 1, 0, 1, 1, 1, Utils.Cdate_Dbase(Datem), numr2)
        Sha1Calc.CalcSha1(numr)
      Endif
      Csolde.Solde_caisse(Client)
      Csolde.Solde_caisse(Vic)
      Maj_Collectif(cptcli, hResult!intitule, libel, hResult!montant)
    Until hresult.MoveNext()
  Endif
  If Round(SldTot, -3) <> 0 Then
    Message.Warning("Une erreur de moulinage importante est survenu!\nLa comparaison de la caisse et des règlements donne un solde de\n" & CStr(Round(SldTot, -3)) & "\nVeuillez corriger manuellement l'ecriture " & numr & ".")
  Endif
  Majnum()

End

Public Sub Maj_Collectif(Cpt As String, intit As String, libel As String, Mnt As Float)

  Dim Coll As String
  Dim Mtc As Float
  Dim Mtd As Float
  Dim Sld As Float
  Dim cResult As Result
  Dim Numlt As String = Format$(DateChooser1.Value, "ddmmyyyy")

  cResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", Cpt)
  coll = cResult!coll_cc
  cResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabMvt") & " Where compte = &1 and numero = &2 and numerodef = &3", Coll, numr, numr2)
  If cResult.Available Then
    If Mnt > 0 Then
      Mtd = 0
      Mtc = Mnt + cResult!montantc
    Else
      Mtc = 0
      Mtd = Mnt + cResult!montantd
    Endif
    Utils.db.Exec("UPDATE " & Cbase.Table("TabMvt") & " set montantc = &4 Where compte = &1 and numero = &2 and numerodef = &3", Coll, numr, numr2, mtc)
    Sha1Calc.CalcSha1(Numr, cResult!lind)
  Else
    Mtc = Mnt
    Utils.db.Exec("INSERT INTO " & Cbase.Table("TabMvt") & "(jour, numero, compte, collectif, intitule, dte, libelle, montantd, montantc, validee, provisoire, tresorerie, pointee, lettree, cloturee, relance, numerodef, numdoc, numlot) VALUES (&1, &2, &3, &4, &5, &6, &7, &8, &9, &{10}, &{11}, &{12}, &{13}, &{14}, &{15}, &{16}, &{17}, &{18}, &{19})", Jnal, numr, coll, 1, Intit, Utils.Cdate_Dbase(Datem), Libel, Mtd, Mtc, 1, 0, 1, 0, 0, 1, 0, numr2, Numlt, numlt)
    Sha1Calc.CalcSha1(Numr)
  Endif
  cResult = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabComptes") & " Where compte_cc = &1", coll)
  If cResult!solde = "" Then
    Sld = Mtd - Mtc
  Else
    Sld = cResult!solde + Mtd - Mtc
  Endif
  Utils.db.Exec("UPDATE " & Cbase.Table("TabComptes") & " set solde = &2 Where compte_cc = &1", coll, Sld)

End

'*****************************************
'*  Génération de la facture magasin     *
'*****************************************
Private Sub genfac()

  Dim res, resentz, resligz, resentfac, resligfac, respar, reslig As Result
  Dim i, j As Integer
  Dim rem As Float
  Dim pu, pxttc, mttc, mht, mtva, mremise As Float
  Dim snfac, snumlig As String

  'recuperation et maj du n° facture
  respar = utils.db.Edit("Fiches_Parametres", "ind='0'")
  snfac = Str(Year(DateChooser1.Value)) & Format(Val(respar!dnfac) + 1, "000000")
  respar!dnfac = Format(Val(respar!dnfac) + 1, "000000")

  'selection des entetes fichier z
  resentz = Utils.db.Exec("SELECT * FROM " & Cbase.Table("TabEntTck") & " where left(date,10) = &1 and client = &2 and not suppr group by numero", Format$(DateChooser1.Value, "dd-mm-yyyy"), client)
  If resentz.Available Then
    utils.db.Begin
    resentz.MoveFirst
    For i = 0 To resentz.Max
      'selection des lignes z
      resligz = utils.db.Exec("SELECT * FROM Fiches_LigTicketz WHERE numero=&1  ORDER BY lInd", resentz!numero)
      If resligz.Available Then

        'calcul de la remise global en %
        rem = remglob(resligz)

        'creation des lignes articles dans fichier temporaire
        resligz.MoveFirst
        j = 0
        Repeat
          If resligz!type = "A" Then
            resligfac = utils.db.Create("Tmp_Caisse")
            'calculs intermediaires
            ttva = CFloat(Trim(resligz!tva)) / 100
            pxttc = CFloat(Trim(Replace(resligz!montant, ",", ".")))
            qte = Val(Utils.cpoint(resligz!qte))
            'mttc = pxttc * qte
            mttc = pxttc
            'mht = mttc / (1 + ttva)
            mht = CFloat(Trim(Replace(resligz!mht, ",", ".")))
            pu = mht / CFloat(Trim(Replace(resligz!qte, ",", ".")))
            mremise = mht * rem
            'mtva = (mht - mremise) * ttva
            mtva = CFloat(Trim(Replace(resligz!mtva, ",", ".")))
            'affectation
            resligfac!code = resligz!code
            resligfac!pu = pu
            resligfac!quantite = qte
            resligfac!montant = mht
            resligfac!fam = resligz!fam
            If IsNull(resligz!marge) Then resligfac!marge = - mremise Else resligfac!marge = resligz!marge - mremise
            'incremente la base de 1 pour voir si remise article ==> recalcul de la remise en 1 article puis globale
            Try resligz.MoveNext
            If resligz.Available Then
              If resligz!type = "O" Then
                resligz.MoveNext
                Inc J
              Endif
              If resligz!type = "S" Then
                resligz.MoveNext
                Inc J
              Endif
              If resligz!type = "T" Then
                'calcul intermediaire des montants remisés
                pxttc = CFloat(Trim(Replace(resligz!montant, ",", ".")))
                mttc = pxttc
                'qte = Val(Utils.cpoint(resligz!qte))
                'mttc = pxttc * qte
                'mttc = pxttc
                'mht = mttc / (1 + ttva)
                mht = CFloat(Trim(Replace(resligz!mht, ",", ".")))
                'mremise = (resligfac!montant - mht) + (mht * rem)
                Try mremise = CFloat(Trim(Replace(resligz!mrem, ",", ".")))
                If Error Then mremise = 0
                If IsNull(resligz!mtva) Then
                  mtva = mht * ttva
                Else
                  mtva = CFloat(Trim(Replace(resligz!mtva, ",", ".")))
                Endif
                resligfac!montant = mht
                Inc j
              Else
                resligz.MovePrevious
                If resligz!type = "O" Then
                  resligz.MovePrevious()
                Endif
              Endif
              resligfac!remise = mremise
              resligfac!montant = mht
              '   If IsNull(resligz!marge) Then resligfac!marge = - mremise Else resligfac!marge = resligz!marge - mremise
              resligfac!tva = mtva
              resligfac.Update
            Endif
          Endif
          Try resligz.MoveNext
          Inc j
        Until j >= resligz.Count
        resentz.MoveNext
      Endif
    Next
    Try resligfac.Update
    If Not Error Then
      utils.db.Commit

      'mise a jour entete facture
      utils.db.Begin
      res = Utils.db.Exec("SELECT SUM(montant) AS montht, SUM(tva) AS tottva, SUM(marge) AS totmarge,SUM(remise) as remise FROM Tmp_Caisse")
      If res.Available Then
        resentfac = utils.db.Create("Fiches_HistoFac")
        resentfac!marge_art = res!totmarge
        'resentfac!totfac = res!montht - res!remise
        resentfac!totfac = res!montht
        resentfac!totfacttc = res!montht + res!tottva
        resentfac!numfac = snfac
        resentfac!rmofac = "0,00"
        resentfac!rartfac = "0,00"
        resentfac!exofac = 0
        resentfac!remmofac = "0"
        resentfac!remartfac = Val(Utils.cpoint(res!remise))
        resentfac!ech = DateChooser1.Value
        resentfac!acpt = "0,00"
        resentfac!marge_art = res!totmarge
        resentfac!marge_mo = 0
        resentfac!cdclifac = client
        res = utils.db.Exec("SELECT * FROM Fiches_Cli WHERE cli_code=&1", client)
        resentfac!cvclifac = res!cli_rs_soc
        resentfac!nmclifac = res!cli_nom
        resentfac!pnmclifac = res!cli_pnm
        resentfac!adr1fac = res!cli_adr1
        resentfac!adr2fac = res!cli_adr2
        resentfac!cpfac = res!cli_cd_ptl
        resentfac!villefac = res!cli_ville
        resentfac!datefac = DateChooser1.Value
        resentfac.Update
        respar.Update

        'mise a jour des lignes de facture
        reslig = utils.db.Exec("SELECT SUM(pu) as pu, SUM(montant) as montant, SUM(remise) as remise, SUM(quantite) as quantite, SUM(tva) as mtva, SUM(marge) as marge, fam,code FROM Tmp_Caisse GROUP BY code")
        snumlig = "0001"
        resligfac = Utils.db.Create("Fiches_HistoLigfac")
        resligfac!num_ligfac = snfac
        snumlig = snumlig
        resligfac!numlig_ligfac = Format(snumlig, "0000")
        resligfac!typel_ligfac = "C"
        resligfac!com_ligfac = "Facture caisse du : " & Format(DateChooser1.Value, "dd-mm-yyyy")
        resligfac.Update

        reslig.MoveFirst
        For j = 0 To reslig.Max
          resligfac = Utils.db.Create("Fiches_HistoLigfac")
          resligfac!num_ligfac = snfac
          snumlig = Str(Val(snumlig) + 1)
          resligfac!numlig_ligfac = Format(snumlig, "0000")
          resligfac!code_ligfac = reslig!code
          resligfac!pu_ligfac = Format(reslig!pu, "0.00")
          'resligfac!brut_ligfac = Format(reslig!montant, "0.00")
          resligfac!brut_ligfac = Format(reslig!pu * reslig!quantite, "0.00")
          resligfac!rem_ligfac = Format(reslig!remise, "0.00")
          'resligfac!netht_ligfac = Format(reslig!montant - reslig!remise, "0.00")
          'resligfac!nettc_ligfac = Format((reslig!montant - reslig!remise) + reslig!mtva, "0.00")
          resligfac!netht_ligfac = Format(reslig!montant, "0.00")
          resligfac!nettc_ligfac = Format(reslig!montant + reslig!mtva, "0.00")
          resligfac!mrgart_ligfac = reslig!marge
          'resligfac!nettc_ligfac = Format((reslig!montant - reslig!remise), "0.00")
          resligfac!typel_ligfac = "A"
          'lecture des données sur fiche article
          res = utils.db.Exec("SELECT * FROM Fiches_Art WHERE art_code=&1", reslig!code)
          If res.Available Then
            resligfac!libel_ligfac = res!art_design
            resligfac!fam_ligfac = res!art_fam
            resligfac!tx_ligfac = res!art_tva
            resligfac!qte_ligfac = Format(reslig!quantite, utils.Find_nbdec(res!art_dec))
            'resligfac!pu_ligfac = Format(reslig!montant / reslig!quantite, utils.Find_nbdec(res!art_nbd))
            res = utils.db.Exec("SELECT * FROM Fiches_Tvaav WHERE code_tva=&1", resligfac!tx_ligfac)
            If res.Available Then resligfac!mtx_ligfac = res!taux_tva
          Else
            resligfac!libel_ligfac = "Article inconnu"
            resligfac!qte_ligfac = Format(reslig!quantite, "0.000")
            'resligfac!pu_ligfac = Format((reslig!montant / reslig!quantite), "0.00")
            resligfac!fam_ligfac = reslig!fam
          Endif
          resligfac.Update
          reslig.MoveNext
        Next
      Endif
      utils.db.Commit
    Endif
  Endif

End

Private Function remglob(res As Result) As Float    'calcul de la remise global sur 1 ticket

  Dim rem As Float
  Dim i As Integer
  Dim ftotbr, ftotnet As Float

  rem = 0
  res.MoveFirst
  For I = 0 To res.Max
    If InStr(res!intitule, "Remise sur total") <> 0 And res!type = "M" Then
      res.MovePrevious
      ftotbr = extraction(res!intitule)
      res.MoveNext
      res.MoveNext
      res.MoveNext
      Try ftotnet = extraction(res!intitule)
      If ftotnet <> 0 Then rem = 1 - (ftotnet / ftotbr)
      Break
    Endif
    res.MoveNext
  Next
  Return rem

End

Private Function extraction(intilule As String) As Float

  Dim fmont As Float
  Dim smont As String = ""

  intilule = Trim(intilule)
  While Right(intilule, 1) Like "[0-9]" Or Right(intilule, 1) Like "[,]"
    smont = Right(intilule, 1) & smont
    intilule = Left(intilule, Len(intilule) - 1)
  Wend
  Try fmont = CFloat(Replace(smont, ",", "."))
  Return fmont

End

Private Sub creatmp()

  Try utils.db.Exec("DROP TABLE Tmp_Caisse")
  Utils.db.EXEC("CREATE TABLE Tmp_Caisse" &
    "(lInd INT NOT NULL AUTO_INCREMENT," &
    "code Char(15)," &
    "pu Decimal(8,2)," &
    "montant Decimal(8,2)," &
    "remise Decimal(8,2)," &
    "quantite Decimal(9,3)," &
    "tva Decimal(8,2)," &
    "marge Decimal(8,2)," &
    "fam Char(5)," &
    "PRIMARY KEY (lInd))")

End

'**********************************
'*    Appel de la doc html        *
'**********************************
Public Sub Button3_Click()

  Exec ["xdg-open", Application.Path &/ "Doc_Caisse/Moulinage.html"]

End
