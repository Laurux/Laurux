' Gambas module file

Public Societe As String
Public LocalSettings As Settings
Public GlobalSettings As Settings
Public version_sha1 As String = "SHA1_REPO_GIT_Laurux"
Public version_branch As String = "BRANCH_REPO_GIT_Laurux"
Public son As Integer
Public Musique As String = "son/warning.ogg"
Public Caisse As Boolean
Public Proform As String
Public Commande As String
Public Devis As String
Public Devis2 As String
Public Bon As String
Public Facture As String
Public Epuises As String
Public Stockes As String
Public Nstockes As String
Public Suspendus As String
Private Lig2 As String[]
Private Fontes As String
Private hpb As ProgressBar
Public R As Integer = 255
Public G As Integer = 255
Public B As Integer = 255
Public R2 As Integer
Public G2 As Integer
Public B2 As Integer
Public Motdepasse As String
Private hlb As Label
Public NoTips As Boolean = False
Public StartDate As Date
Public MainWindow As Window

'Arguments
Public Arg_Config_File As String
Public Arg_Log As Boolean
Public Arg_Replay As Boolean
Public Arg_Start_Societe As String
Public Arg_Restore_DB As String
Public Arg_LogFile As String

'Timer for Replaying Event
Public hReplayTimer As Timer
Public Evens As String[]
Public Ev As Date
Public Evc As Integer
Public Evl As Integer


Public Sub Main()

  Dim $cle, $cle2, txt, sha As String
  Dim bcle As Boolean = False
  Dim Btunnel As Boolean = True
  Dim Pids As String
  Dim psExist As Process
  
  Try Start.version_branch = Trim(File.Load("branch.txt"))
  Try Start.version_sha1 = Trim(File.Load("sha1.txt"))
  
  Parse_Args()
  StartDate = Now
  
  Start.LocalSettings = New Settings(Arg_Config_File, Application.Name & " local configuration")

  If IsNull(Arg_Start_Societe) Then
    Try Societe = Start.LocalSettings["/Soc"]
  Else
    Societe = Format(CInt(Arg_Start_Societe), "00")
    Start.LocalSettings["/Soc"] = Societe
    Start.LocalSettings["/dbase/Name"] = Start.LocalSettings["/dbase/Prefixe"] & "Laurux" & Societe
  Endif

  If Start.LocalSettings["/dbase/Con-ssh"] And If Start.LocalSettings["/Soc" & Start.Societe & "/Replique"] And If Start.LocalSettings["/Soc" & Start.Societe & "/Breplique"] Then
    Btunnel = Utils.ControlTunnel()
    If Not Btunnel Then
      Message.Error("La réplication est inactive ! Continuer le travail avec Laurux peut causer des soucis.")
      Return
    Endif
  Endif

  Try Son = Start.LocalSettings["/son"]
  Music.Load(Musique)
  Proform = Start.LocalSettings["/Coul/Prf"]
  Commande = Start.LocalSettings["/Coul/Cmde"]
  Devis = Start.LocalSettings["/Coul/Devis"]
  Devis2 = Start.LocalSettings["/Coul/Devis2"]
  Bon = Start.LocalSettings["/Coul/Bl"]
  Facture = Start.LocalSettings["/Coul/Facts"]
  Epuises = Start.LocalSettings["/Coul/Eps"]
  Stockes = Start.LocalSettings["/Coul/Stk"]
  Nstockes = Start.LocalSettings["/Coul/Nstk"]
  Suspendus = Start.LocalSettings["/Coul/Spd"]
  If Error Or If IsNull(Start.LocalSettings["/Coul" & "/Fnets"]) Then
    Start.LocalSettings["/Coul" & "/Fnets"] = "Background: &HDDDDDD&; "
    Start.LocalSettings["/Coul" & "/Btns"] = "Background: &HBDBDBD&; "
    Start.LocalSettings["/Coul" & "/Znss"] = "Background: &HFAFAFA&; "
    Start.LocalSettings["/Coul" & "/Znaff"] = "Background: &HEEEEEE&; "
    Start.LocalSettings["/Coul" & "/Focus"] = "Background: &HF9FFC7&; "
    Start.LocalSettings["/Coul" & "/Coulfonds"] = "Background: &FFEE81&; "
    Start.LocalSettings["/Coul" & "/Others"] = "Background: &FFE0B8&; "
    Start.LocalSettings["/Coul" & "/Fcs"] = "Background: &HF9FFC7&"
    Start.LocalSettings["/Coul" & "/Stk"] = "Background: &HCFF58E&; Font: serif,9; "
    Start.LocalSettings["/Coul" & "/Coulfonds"] = "255;252;216;"
    Start.LocalSettings["/Coul" & "/Others"] = "255;232;199;"
    Start.LocalSettings["/Coul" & "/Facts"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Avs"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Bl"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Devis"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Devis2"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Cmde"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Prf"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Nstk"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Eps"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Spd"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Motps"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings["/Coul" & "/Momnt"] = "Background: &HFFFFFF&; Font: Serif,9; "
    Start.LocalSettings.Save
    Start.LocalSettings.Reload
  Endif
  If Not Exist(User.home & "/tmp") Then Mkdir User.home & "/tmp"
  Application.Font = Font["Serif,11"]
  Try Fontes = Start.LocalSettings["/Soc" & Societe & "/Font"]
  If IsNull(fontes) Then
    Application.Font = Font["Serif,11"]
  Else
    Application.Font = Font[Fontes]
  Endif
  Coul()
  If Exist(User.home & "/" & Application.Name & ".lock") Then
    If son Then
      Music.Play
    Endif
    Pids = File.Load(User.home & "/" & Application.Name & ".lock")
    If Not IsNull(Pids) Then
      psExist = Shell "ps -p " & Pids Wait
      If psExist.Value = 0 Then
        If Message.Warning(("Il semblerait que " & Application.Name & "\nProcess : " & Pids & "\nsoit encore ouvert!\n\nOuvrir deux fois Laurux peut causer des dysfonctionnements (erreur de stock etc...)\net utiliser un programme qui n'a pas été fermé normalement \nsignifie que la base n'est peut-être pas à jour et que vous devriez faire une restauration."), ("Ne pas ouvrir"), ("Ouvrir")) = 1 Then
          Quit
        Endif
        'Try Kill User.home & "/" & Application.Name & ".lock"
        Lancement()
      Else
      'le process est inexistant
        Try Kill User.home & "/" & Application.Name & ".lock"
        Lancement()
      Endif
    Else
      If Message.Warning(("Il semblerait que " & Application.Name & "\nsoit encore ouvert (Fichier de lock existe mais est vide : " & User.home & "/" & Application.Name & ".lock)!\n\nOuvrir deux fois Laurux peut causer des dysfonctionnements(erreur de stock etc...)\net utiliser un programme qui n'a pas été fermé normalement\nsignifie que la base n'est peut-être pas à jour et que vous devriez faire une restauration."), ("Ne pas ouvrir"), ("Ouvrir")) = 1 Then
        Quit
      Endif
      'Try Kill User.home & "/" & Application.Name & ".lock"
      Lancement()
    Endif
  Else
    Lancement()
  Endif

End

Public Sub Coul()

  Dim Fonds As String

  Try Fonds = Start.LocalSettings["/Coul/Others"]
  If Not Error Then
    If Not IsNull(Fonds) Then
      lig2 = Split(Fonds, ";")
      Try R = Lig2[0]
      Try G = Lig2[1]
      Try B = Lig2[2]
      If Error Then
        R2 = 229
        G2 = 233
        B2 = 255
      Endif
    Endif
  Endif
  Try Fonds = Start.LocalSettings["/Coul/Coulfonds"]
  If Not Error Then
    If Not IsNull(Fonds) Then
      lig2 = Split(Fonds, ";")
      Try R2 = Lig2[0]
      Try G2 = lig2[1]
      Try B2 = lig2[2]
      If Error Then
        R2 = 255
        G2 = 254
        B2 = 212
      Endif
    Endif
  Endif

End

Public Sub UnLock()

  Dim Pids As String = ""
  
  Try Pids = File.Load(User.home & "/" & Application.Name & ".lock") & " "
  'first with space separators (very few risk due to linux PID assignement for subset match)
  Pids = Replace$(Pids, " " & CStr(Application.Id), "")
  Pids = Replace$(Pids, CStr(Application.Id) & " ", "")
  'second special case without separators if alone
  Pids = Replace$(Pids, CStr(Application.Id), "")
  If IsNull(Trim(Pids)) Then
    Kill User.home & "/" & Application.Name & ".lock"
  Else
    Pids = Trim(Pids)
    File.Save(User.home & "/" & Application.Name & ".lock", Pids)
  Endif
  
End

Public Sub Lock()

  Dim Pids As String = ""
  
  Try Pids = File.Load(User.home & "/" & Application.Name & ".lock") & " "
  File.Save(User.home & "/" & Application.Name & ".lock", Pids & Application.Id)
  
End


Public Sub Lancement()

  Dim hFile As File
  Dim sLine As String
  Dim ev As Date
  Dim wa As Integer
  Dim Menu As Object
  Dim Tips As FTips
  
  
  Lock()
  If IsNull(proform) Then Proform = "&HF9F9BD&"
  If IsNull(Commande) Then Commande = "&HF9F9BD&" ""
  If IsNull(Devis) Then Devis = "&HF9F9BD&"
  If IsNull(Bon) Then Bon = "&HF9F9BD&"
  If IsNull(Facture) Then Facture = "&HF9F9BD&"
  If IsNull(proform) Then Proform = "&HF9F9BD&"
  If IsNull(Commande) Then Commande = "&HF9F9BD&" ""
  If IsNull(Devis) Then Devis = "&HF9F9BD&"
  If IsNull(Bon) Then Bon = "&HF9F9BD&"
  If IsNull(Facture) Then Facture = "&HF9F9BD&"
  If IsNull(Epuises) Then Epuises = "&HF9F9BD&"
  If IsNull(Stockes) Then Stockes = "&HF9F9BD&"
  If IsNull(Nstockes) Then Nstockes = "&HF9F9BD&"
  If IsNull(Suspendus) Then Suspendus = "&HF9F9BD&"
  If Start.LocalSettings["/Soc" & Societe & "/Compta"] Then
    Menu = New Fmenuc
  Else
    If Start.LocalSettings["/Soc" & Societe & "/Gestion"] Then
      Menu = New Fmenuf
    Else
      Menu = New Fmenu
    Endif
  Endif
  If Start.LocalSettings["/Soc" & Societe & "/Caisse"] Then Caisse = True
  
  Object.Call(Menu, "Show")
  MainWindow = Object.GetProperty(Menu, "Window")
  
  If Start.LocalSettings["/Tips"] And Not NoTips Then
    Tips = New FTips
    Tips.Show()
  Endif
 
  If Arg_Replay Then
    
    If Exist(Arg_LogFile) Then
      
      hFile = Open Arg_LogFile For Input
      Ev = Now
      Evl = Evc = 0
      Evens = []
      While Not Eof(hFile)
        Line Input #hFile, sLine
        If sLine Like "*;GUI;*" Then
         Evens.Add(sLine)
         Inc Evl
        Endif
      Wend
      hReplayTimer = New Timer As "ReplayTimer"
      hReplayTimer.Delay = 2000 'Initial Delay is 2sec
      hReplayTimer.Enabled = True
      
    Else
      Print "Le fichier de log " & Arg_LogFile & " ne peut pas etre rejoué, fichier innexistant!"
      Quit
    Endif
  Endif

End


Public Sub ReplayTimer_Timer()

  Dim rReplayTimer As Timer
  
  'We must create recursive timer to support ShowModal windows which does not return from timer
  'Impact on memory is unknown, normally timer is existing on scope base
  rReplayTimer = New Timer As "ReplayTimer"
  
  If Evc <= Evl Then
    Inc Evc
    Ev = ReplayObserver.Replay_Event(rReplayTimer, Ev, Evens[Start.Evc - 1])
    'recursive event complete for a ShowModal
    'return to default timer
    rReplayTimer.Enabled = False
    hReplayTimer.Delay = rReplayTimer.Delay
  Else
    hReplayTimer.Enabled = False
  Endif

End


Public Sub Parse_Args()
  
  Dim remaining_args As String[]
  Dim rarg As String
  'Arguments Default Value si besoin
  
  Args.Begin(Application.Name & " Usage\n")
  
  Arg_Config_File = Args.Get("c", "config", "fichier de configuration", Application.Name & ".conf")
  If IsNull(Arg_Config_File) Then
    Arg_Config_File = User.Home &/ ".config/gambas3" &/ Application.Name & ".conf"
  Else
    If Not Exist(Arg_Config_File) Then
      Print "Impossible de Trouver le fichier de conf fourni: " & Arg_Config_File 
      Quit
    Endif
  Endif
  Arg_Log = Args.Has("l", "log", "Active le logging")
  Arg_Replay = Args.Has("r", "replay", "Active le replay")
  Arg_LogFile = Args.Get("", "logfile", "fichier de log (si logging/replay activé)", Application.Name & ".log")
  
  If Args.Has("", "version-full", "Version / sha1 / branche") Then
    Print Application.Name & " " & Application.Version
    Print "Branche: " & Start.version_branch
    Print "SHA1: " & Start.version_sha1
    Quit
  Endif
  
  Arg_Start_Societe = Args.Get("s", "societe", "societe de demarrage", "01")
  Arg_Restore_DB = Args.Get("", "restore", "fichier de database à restaurer au démarrage", Application.Name & ".sql")
  
  remaining_args = Args.End()
  
  For Each rarg In remaining_args
    Print "Arg: " & rarg
  Next
  
End

Public Sub Restore_Args()
  
  If Not IsNull(Arg_Restore_DB) Then
    If Not Exist(Arg_Restore_DB) Then
      Print "Erreur: Impossible de trouver le fichier" & Arg_Restore_DB & "!"
      Quit
    Endif
    Print "ATTENTION CE MODULE DE RESTAURATION DOIT S'UTILISER EN MODE DEBUG UNIQUEMENT" 
    Print "Restauration de la Societe " & Societe & " avec la base de donnée " & Arg_Restore_DB & "."
    Utils.Fill_DataBase("Laurux" & Societe, Arg_Restore_DB)
  Endif

End
